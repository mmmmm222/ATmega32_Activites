
ICU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002530  000025c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  0080007e  0080007e  000025e2  2**0
                  ALLOC
  3 .stab         00002388  00000000  00000000  000025e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000117f  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000088cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000967c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000097dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__vector_4>
      14:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__vector_5>
      18:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_6>
      1c:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__vector_7>
      20:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__vector_8>
      24:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__vector_9>
      28:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__vector_10>
      2c:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <main>
      8a:	0c 94 96 12 	jmp	0x252c	; 0x252c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 87 12 	jmp	0x250e	; 0x250e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	  2-r\w => write
	  3- data => command to the eight pins
	  4-enable pulse for 2 milli seconds
	 */
	/*set rs to low*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	65 e0       	ldi	r22, 0x05	; 5
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>

	/* set command to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	67 e0       	ldi	r22, 0x07	; 7
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs to HIGH for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	65 e0       	ldi	r22, 0x05	; 5
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>

	/* set Data to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	67 e0       	ldi	r22, 0x07	; 7
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	67 e0       	ldi	r22, 0x07	; 7
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8SetPinValue>

}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidSendString>:

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <CLCD_voidSendString+0x6>
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9b 83       	std	Y+3, r25	; 0x03
     dcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     dce:	19 82       	std	Y+1, r1	; 0x01
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	80 81       	ld	r24, Z
     de4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Counter++;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	89 83       	std	Y+1, r24	; 0x01

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	fc 01       	movw	r30, r24
     dfa:	e2 0f       	add	r30, r18
     dfc:	f3 1f       	adc	r31, r19
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	39 f7       	brne	.-50     	; 0xdd2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <CLCD_voidGoToXY+0x6>
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	8a 83       	std	Y+2, r24	; 0x02
     e1e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address=0;
     e20:	19 82       	std	Y+1, r1	; 0x01

	/*if x ==0 we target the first line*/
	if(Copy_u8XPos == 0)
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	88 23       	and	r24, r24
     e26:	19 f4       	brne	.+6      	; 0xe2e <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Address=Copy_u8YPos;
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <CLCD_voidGoToXY+0x2a>
	}

	/*if x ==1 we target the second line*/
	else if(Copy_u8XPos == 1)
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	19 f4       	brne	.+6      	; 0xe3a <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Address=Copy_u8YPos+(0x40);
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	80 5c       	subi	r24, 0xC0	; 192
     e38:	89 83       	std	Y+1, r24	; 0x01
	}
	/*here we added 128 because the binary address we got is 7 digits only and we need the 8th digit to be 1*/
	CLCD_voidSendCommand(Local_u8Address+128);
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	80 58       	subi	r24, 0x80	; 128
     e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <CLCD_voidInit>:


void CLCD_voidInit(void)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2e 97       	sbiw	r28, 0x0e	; 14
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e2       	ldi	r26, 0x20	; 32
     e68:	b2 e4       	ldi	r27, 0x42	; 66
     e6a:	8b 87       	std	Y+11, r24	; 0x0b
     e6c:	9c 87       	std	Y+12, r25	; 0x0c
     e6e:	ad 87       	std	Y+13, r26	; 0x0d
     e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	4a ef       	ldi	r20, 0xFA	; 250
     e80:	54 e4       	ldi	r21, 0x44	; 68
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	8f 83       	std	Y+7, r24	; 0x07
     e8c:	98 87       	std	Y+8, r25	; 0x08
     e8e:	a9 87       	std	Y+9, r26	; 0x09
     e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e92:	6f 81       	ldd	r22, Y+7	; 0x07
     e94:	78 85       	ldd	r23, Y+8	; 0x08
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e8       	ldi	r20, 0x80	; 128
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <CLCD_voidInit+0x66>
		__ticks = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	3f c0       	rjmp	.+126    	; 0xf32 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     eb4:	6f 81       	ldd	r22, Y+7	; 0x07
     eb6:	78 85       	ldd	r23, Y+8	; 0x08
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	3f ef       	ldi	r19, 0xFF	; 255
     ec0:	4f e7       	ldi	r20, 0x7F	; 127
     ec2:	57 e4       	ldi	r21, 0x47	; 71
     ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec8:	18 16       	cp	r1, r24
     eca:	4c f5       	brge	.+82     	; 0xf1e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ece:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	51 e4       	ldi	r21, 0x41	; 65
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	0f c0       	rjmp	.+30     	; 0xf14 <CLCD_voidInit+0xc6>
     ef6:	88 ec       	ldi	r24, 0xC8	; 200
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9c 83       	std	Y+4, r25	; 0x04
     efc:	8b 83       	std	Y+3, r24	; 0x03
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <CLCD_voidInit+0xb4>
     f06:	9c 83       	std	Y+4, r25	; 0x04
     f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	69 f7       	brne	.-38     	; 0xef6 <CLCD_voidInit+0xa8>
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1e:	6f 81       	ldd	r22, Y+7	; 0x07
     f20:	78 85       	ldd	r23, Y+8	; 0x08
     f22:	89 85       	ldd	r24, Y+9	; 0x09
     f24:	9a 85       	ldd	r25, Y+10	; 0x0a
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <CLCD_voidInit+0xf0>
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
	/*1 => (5*11)(columns of pixels)*(Rows of pixels) bigger font  */
	/*X => don not care choose any value*/
	/*the R/s and r/w have been chosen before*/

	/*we choose two lines and 5*8 Font size */
	CLCD_voidSendCommand(0b00111100);
     f46:	8c e3       	ldi	r24, 0x3C	; 60
     f48:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/* 0 |  0  |  0  |  0  |  0  |  0  |  1  |  D  |  C  |  B  */
	/*D => Display enable 0=> disable & 1=> enable*/
	/*C => cursor enable 0=> disable & 1=> enable */
	/*B => blink cursor 0=> don't blink & 1=> blink*/
	/*Display(screen) on/off command & the cursor state*/
	CLCD_voidSendCommand(0b00001100);
     f4c:	8c e0       	ldi	r24, 0x0C	; 12
     f4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*clear screen it is a fixed command */
	CLCD_voidSendCommand(0b00000001);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f58:	2e 96       	adiw	r28, 0x0e	; 14
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <CLCD_voidWriteSpecialCharacter>:

/*CGRAM => charchater gerenator ram */


void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	27 97       	sbiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	6d 83       	std	Y+5, r22	; 0x05
     f84:	4e 83       	std	Y+6, r20	; 0x06
     f86:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8Iterator;
     f88:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	80 5c       	subi	r24, 0xC0	; 192
     fa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	80 81       	ld	r24, Z
     fbc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 30       	cpi	r24, 0x08	; 8
     fca:	78 f3       	brcs	.-34     	; 0xfaa <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*go to the target pos*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	0e 94 08 07 	call	0xe10	; 0xe10 <CLCD_voidGoToXY>

	/*display the pattern */
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

}
     fda:	27 96       	adiw	r28, 0x07	; 7
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <CLCD_voidDisplayNumber>:

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	65 97       	sbiw	r28, 0x15	; 21
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	6a 87       	std	Y+10, r22	; 0x0a
    1002:	7b 87       	std	Y+11, r23	; 0x0b
    1004:	8c 87       	std	Y+12, r24	; 0x0c
    1006:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1008:	2d b7       	in	r18, 0x3d	; 61
    100a:	3e b7       	in	r19, 0x3e	; 62
    100c:	3d 8b       	std	Y+21, r19	; 0x15
    100e:	2c 8b       	std	Y+20, r18	; 0x14

}

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    1010:	8a 85       	ldd	r24, Y+10	; 0x0a
    1012:	9b 85       	ldd	r25, Y+11	; 0x0b
    1014:	ac 85       	ldd	r26, Y+12	; 0x0c
    1016:	bd 85       	ldd	r27, Y+13	; 0x0d
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	a1 05       	cpc	r26, r1
    101c:	b1 05       	cpc	r27, r1
    101e:	21 f4       	brne	.+8      	; 0x1028 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1026:	13 c1       	rjmp	.+550    	; 0x124e <CLCD_voidDisplayNumber+0x262>
    1028:	8d b7       	in	r24, 0x3d	; 61
    102a:	9e b7       	in	r25, 0x3e	; 62
    102c:	9f 87       	std	Y+15, r25	; 0x0f
    102e:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;
    1030:	1f 82       	std	Y+7, r1	; 0x07
    1032:	1e 82       	std	Y+6, r1	; 0x06
    1034:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    1036:	8a 85       	ldd	r24, Y+10	; 0x0a
    1038:	9b 85       	ldd	r25, Y+11	; 0x0b
    103a:	ac 85       	ldd	r26, Y+12	; 0x0c
    103c:	bd 85       	ldd	r27, Y+13	; 0x0d
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	ab 83       	std	Y+3, r26	; 0x03
    1044:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	ab 81       	ldd	r26, Y+3	; 0x03
    1052:	bc 81       	ldd	r27, Y+4	; 0x04
    1054:	2a e0       	ldi	r18, 0x0A	; 10
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodsi4>
    1064:	da 01       	movw	r26, r20
    1066:	c9 01       	movw	r24, r18
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	ab 83       	std	Y+3, r26	; 0x03
    106e:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	ab 81       	ldd	r26, Y+3	; 0x03
    1076:	bc 81       	ldd	r27, Y+4	; 0x04
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	a1 05       	cpc	r26, r1
    107c:	b1 05       	cpc	r27, r1
    107e:	19 f7       	brne	.-58     	; 0x1046 <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	2d b7       	in	r18, 0x3d	; 61
    1088:	3e b7       	in	r19, 0x3e	; 62
    108a:	28 1b       	sub	r18, r24
    108c:	39 0b       	sbc	r19, r25
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	3e bf       	out	0x3e, r19	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	2d bf       	out	0x3d, r18	; 61
    1098:	8d b7       	in	r24, 0x3d	; 61
    109a:	9e b7       	in	r25, 0x3e	; 62
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9b 8b       	std	Y+19, r25	; 0x13
    10a0:	8a 8b       	std	Y+18, r24	; 0x12
    10a2:	8a 89       	ldd	r24, Y+18	; 0x12
    10a4:	9b 89       	ldd	r25, Y+19	; 0x13
    10a6:	00 96       	adiw	r24, 0x00	; 0
    10a8:	9b 8b       	std	Y+19, r25	; 0x13
    10aa:	8a 8b       	std	Y+18, r24	; 0x12
    10ac:	2a 89       	ldd	r18, Y+18	; 0x12
    10ae:	3b 89       	ldd	r19, Y+19	; 0x13
    10b0:	39 87       	std	Y+9, r19	; 0x09
    10b2:	28 87       	std	Y+8, r18	; 0x08
    10b4:	2e c0       	rjmp	.+92     	; 0x1112 <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    10b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    10bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    10be:	2a e0       	ldi	r18, 0x0A	; 10
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodsi4>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    10d4:	8e 81       	ldd	r24, Y+6	; 0x06
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	88 85       	ldd	r24, Y+8	; 0x08
    10dc:	99 85       	ldd	r25, Y+9	; 0x09
    10de:	fc 01       	movw	r30, r24
    10e0:	e2 0f       	add	r30, r18
    10e2:	f3 1f       	adc	r31, r19
    10e4:	8f 81       	ldd	r24, Y+7	; 0x07
    10e6:	80 83       	st	Z, r24
		Local_u8Counter++;
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    10ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f2:	ac 85       	ldd	r26, Y+12	; 0x0c
    10f4:	bd 85       	ldd	r27, Y+13	; 0x0d
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodsi4>
    1106:	da 01       	movw	r26, r20
    1108:	c9 01       	movw	r24, r18
    110a:	8a 87       	std	Y+10, r24	; 0x0a
    110c:	9b 87       	std	Y+11, r25	; 0x0b
    110e:	ac 87       	std	Y+12, r26	; 0x0c
    1110:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    1112:	8a 85       	ldd	r24, Y+10	; 0x0a
    1114:	9b 85       	ldd	r25, Y+11	; 0x0b
    1116:	ac 85       	ldd	r26, Y+12	; 0x0c
    1118:	bd 85       	ldd	r27, Y+13	; 0x0d
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	a1 05       	cpc	r26, r1
    111e:	b1 05       	cpc	r27, r1
    1120:	21 f0       	breq	.+8      	; 0x112a <CLCD_voidDisplayNumber+0x13e>
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	98 17       	cp	r25, r24
    1128:	30 f2       	brcs	.-116    	; 0x10b6 <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1130:	1e 82       	std	Y+6, r1	; 0x06
    1132:	81 c0       	rjmp	.+258    	; 0x1236 <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	28 1b       	sub	r18, r24
    1142:	39 0b       	sbc	r19, r25
    1144:	88 85       	ldd	r24, Y+8	; 0x08
    1146:	99 85       	ldd	r25, Y+9	; 0x09
    1148:	fc 01       	movw	r30, r24
    114a:	e2 0f       	add	r30, r18
    114c:	f3 1f       	adc	r31, r19
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	39 8b       	std	Y+17, r19	; 0x11
    1156:	28 8b       	std	Y+16, r18	; 0x10
    1158:	88 89       	ldd	r24, Y+16	; 0x10
    115a:	99 89       	ldd	r25, Y+17	; 0x11
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <CLCD_voidDisplayNumber+0x178>
    1162:	4f c0       	rjmp	.+158    	; 0x1202 <CLCD_voidDisplayNumber+0x216>
    1164:	28 89       	ldd	r18, Y+16	; 0x10
    1166:	39 89       	ldd	r19, Y+17	; 0x11
    1168:	25 30       	cpi	r18, 0x05	; 5
    116a:	31 05       	cpc	r19, r1
    116c:	d4 f4       	brge	.+52     	; 0x11a2 <CLCD_voidDisplayNumber+0x1b6>
    116e:	88 89       	ldd	r24, Y+16	; 0x10
    1170:	99 89       	ldd	r25, Y+17	; 0x11
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	c9 f1       	breq	.+114    	; 0x11ea <CLCD_voidDisplayNumber+0x1fe>
    1178:	28 89       	ldd	r18, Y+16	; 0x10
    117a:	39 89       	ldd	r19, Y+17	; 0x11
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <CLCD_voidDisplayNumber+0x1a0>
    1182:	88 89       	ldd	r24, Y+16	; 0x10
    1184:	99 89       	ldd	r25, Y+17	; 0x11
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	61 f1       	breq	.+88     	; 0x11e2 <CLCD_voidDisplayNumber+0x1f6>
    118a:	52 c0       	rjmp	.+164    	; 0x1230 <CLCD_voidDisplayNumber+0x244>
    118c:	28 89       	ldd	r18, Y+16	; 0x10
    118e:	39 89       	ldd	r19, Y+17	; 0x11
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	71 f1       	breq	.+92     	; 0x11f2 <CLCD_voidDisplayNumber+0x206>
    1196:	88 89       	ldd	r24, Y+16	; 0x10
    1198:	99 89       	ldd	r25, Y+17	; 0x11
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	91 05       	cpc	r25, r1
    119e:	69 f1       	breq	.+90     	; 0x11fa <CLCD_voidDisplayNumber+0x20e>
    11a0:	47 c0       	rjmp	.+142    	; 0x1230 <CLCD_voidDisplayNumber+0x244>
    11a2:	28 89       	ldd	r18, Y+16	; 0x10
    11a4:	39 89       	ldd	r19, Y+17	; 0x11
    11a6:	27 30       	cpi	r18, 0x07	; 7
    11a8:	31 05       	cpc	r19, r1
    11aa:	b9 f1       	breq	.+110    	; 0x121a <CLCD_voidDisplayNumber+0x22e>
    11ac:	88 89       	ldd	r24, Y+16	; 0x10
    11ae:	99 89       	ldd	r25, Y+17	; 0x11
    11b0:	88 30       	cpi	r24, 0x08	; 8
    11b2:	91 05       	cpc	r25, r1
    11b4:	5c f4       	brge	.+22     	; 0x11cc <CLCD_voidDisplayNumber+0x1e0>
    11b6:	28 89       	ldd	r18, Y+16	; 0x10
    11b8:	39 89       	ldd	r19, Y+17	; 0x11
    11ba:	25 30       	cpi	r18, 0x05	; 5
    11bc:	31 05       	cpc	r19, r1
    11be:	29 f1       	breq	.+74     	; 0x120a <CLCD_voidDisplayNumber+0x21e>
    11c0:	88 89       	ldd	r24, Y+16	; 0x10
    11c2:	99 89       	ldd	r25, Y+17	; 0x11
    11c4:	86 30       	cpi	r24, 0x06	; 6
    11c6:	91 05       	cpc	r25, r1
    11c8:	21 f1       	breq	.+72     	; 0x1212 <CLCD_voidDisplayNumber+0x226>
    11ca:	32 c0       	rjmp	.+100    	; 0x1230 <CLCD_voidDisplayNumber+0x244>
    11cc:	28 89       	ldd	r18, Y+16	; 0x10
    11ce:	39 89       	ldd	r19, Y+17	; 0x11
    11d0:	28 30       	cpi	r18, 0x08	; 8
    11d2:	31 05       	cpc	r19, r1
    11d4:	31 f1       	breq	.+76     	; 0x1222 <CLCD_voidDisplayNumber+0x236>
    11d6:	88 89       	ldd	r24, Y+16	; 0x10
    11d8:	99 89       	ldd	r25, Y+17	; 0x11
    11da:	89 30       	cpi	r24, 0x09	; 9
    11dc:	91 05       	cpc	r25, r1
    11de:	29 f1       	breq	.+74     	; 0x122a <CLCD_voidDisplayNumber+0x23e>
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11e8:	23 c0       	rjmp	.+70     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    11ea:	81 e3       	ldi	r24, 0x31	; 49
    11ec:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11f0:	1f c0       	rjmp	.+62     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    11f2:	82 e3       	ldi	r24, 0x32	; 50
    11f4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    11f8:	1b c0       	rjmp	.+54     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    11fa:	83 e3       	ldi	r24, 0x33	; 51
    11fc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1200:	17 c0       	rjmp	.+46     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    1202:	84 e3       	ldi	r24, 0x34	; 52
    1204:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    120a:	85 e3       	ldi	r24, 0x35	; 53
    120c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    1212:	86 e3       	ldi	r24, 0x36	; 54
    1214:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    121a:	87 e3       	ldi	r24, 0x37	; 55
    121c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    1222:	88 e3       	ldi	r24, 0x38	; 56
    1224:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    122a:	89 e3       	ldi	r24, 0x39	; 57
    122c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1230:	8e 81       	ldd	r24, Y+6	; 0x06
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	8e 83       	std	Y+6, r24	; 0x06
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	89 17       	cp	r24, r25
    123c:	08 f0       	brcs	.+2      	; 0x1240 <CLCD_voidDisplayNumber+0x254>
    123e:	7a cf       	rjmp	.-268    	; 0x1134 <CLCD_voidDisplayNumber+0x148>
    1240:	2e 85       	ldd	r18, Y+14	; 0x0e
    1242:	3f 85       	ldd	r19, Y+15	; 0x0f
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	3e bf       	out	0x3e, r19	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    124e:	8c 89       	ldd	r24, Y+20	; 0x14
    1250:	9d 89       	ldd	r25, Y+21	; 0x15
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	9e bf       	out	0x3e, r25	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	8d bf       	out	0x3d, r24	; 61
    125c:	65 96       	adiw	r28, 0x15	; 21
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <CLCD_voidClearScreen>:

//=======================================================================================================

void CLCD_voidClearScreen(void)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	2e 97       	sbiw	r28, 0x0e	; 14
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x01);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 e2       	ldi	r26, 0x20	; 32
    128e:	b1 e4       	ldi	r27, 0x41	; 65
    1290:	8b 87       	std	Y+11, r24	; 0x0b
    1292:	9c 87       	std	Y+12, r25	; 0x0c
    1294:	ad 87       	std	Y+13, r26	; 0x0d
    1296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1298:	6b 85       	ldd	r22, Y+11	; 0x0b
    129a:	7c 85       	ldd	r23, Y+12	; 0x0c
    129c:	8d 85       	ldd	r24, Y+13	; 0x0d
    129e:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a ef       	ldi	r20, 0xFA	; 250
    12a6:	54 e4       	ldi	r21, 0x44	; 68
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	98 87       	std	Y+8, r25	; 0x08
    12b4:	a9 87       	std	Y+9, r26	; 0x09
    12b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	5f e3       	ldi	r21, 0x3F	; 63
    12c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	2c f4       	brge	.+10     	; 0x12da <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
    12d8:	3f c0       	rjmp	.+126    	; 0x1358 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	4c f5       	brge	.+82     	; 0x1344 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 83       	std	Y+5, r24	; 0x05
    131a:	0f c0       	rjmp	.+30     	; 0x133a <CLCD_voidClearScreen+0xcc>
    131c:	88 ec       	ldi	r24, 0xC8	; 200
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 83       	std	Y+4, r25	; 0x04
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <CLCD_voidClearScreen+0xba>
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f7       	brne	.-38     	; 0x131c <CLCD_voidClearScreen+0xae>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <CLCD_voidClearScreen+0xf6>
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //wait more than 1.53 ms
}
    136c:	2e 96       	adiw	r28, 0x0e	; 14
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	28 97       	sbiw	r28, 0x08	; 8
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	6b 83       	std	Y+3, r22	; 0x03
    1396:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1398:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <DIO_u8SetPinValue+0x24>
    13a0:	f4 c0       	rjmp	.+488    	; 0x158a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	09 f0       	breq	.+2      	; 0x13aa <DIO_u8SetPinValue+0x2c>
    13a8:	72 c0       	rjmp	.+228    	; 0x148e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	38 87       	std	Y+8, r19	; 0x08
    13b2:	2f 83       	std	Y+7, r18	; 0x07
    13b4:	8f 81       	ldd	r24, Y+7	; 0x07
    13b6:	98 85       	ldd	r25, Y+8	; 0x08
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	49 f1       	breq	.+82     	; 0x1410 <DIO_u8SetPinValue+0x92>
    13be:	2f 81       	ldd	r18, Y+7	; 0x07
    13c0:	38 85       	ldd	r19, Y+8	; 0x08
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <DIO_u8SetPinValue+0x54>
    13c8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ca:	98 85       	ldd	r25, Y+8	; 0x08
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <DIO_u8SetPinValue+0x6a>
    13d0:	5b c0       	rjmp	.+182    	; 0x1488 <DIO_u8SetPinValue+0x10a>
    13d2:	2f 81       	ldd	r18, Y+7	; 0x07
    13d4:	38 85       	ldd	r19, Y+8	; 0x08
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	71 f1       	breq	.+92     	; 0x1438 <DIO_u8SetPinValue+0xba>
    13dc:	8f 81       	ldd	r24, Y+7	; 0x07
    13de:	98 85       	ldd	r25, Y+8	; 0x08
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	e9 f1       	breq	.+122    	; 0x1460 <DIO_u8SetPinValue+0xe2>
    13e6:	50 c0       	rjmp	.+160    	; 0x1488 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
    13e8:	ab e3       	ldi	r26, 0x3B	; 59
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	eb e3       	ldi	r30, 0x3B	; 59
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8SetPinValue+0x88>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_u8SetPinValue+0x84>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	bf c0       	rjmp	.+382    	; 0x158e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
    1410:	a8 e3       	ldi	r26, 0x38	; 56
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e8 e3       	ldi	r30, 0x38	; 56
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8SetPinValue+0xb0>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8SetPinValue+0xac>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	ab c0       	rjmp	.+342    	; 0x158e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8SetPinValue+0xd8>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8SetPinValue+0xd4>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	97 c0       	rjmp	.+302    	; 0x158e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
    1460:	a2 e3       	ldi	r26, 0x32	; 50
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e2 e3       	ldi	r30, 0x32	; 50
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_u8SetPinValue+0x100>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_u8SetPinValue+0xfc>
    1482:	84 2b       	or	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	83 c0       	rjmp	.+262    	; 0x158e <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	80 c0       	rjmp	.+256    	; 0x158e <DIO_u8SetPinValue+0x210>

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	88 23       	and	r24, r24
    1492:	09 f0       	breq	.+2      	; 0x1496 <DIO_u8SetPinValue+0x118>
    1494:	77 c0       	rjmp	.+238    	; 0x1584 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3e 83       	std	Y+6, r19	; 0x06
    149e:	2d 83       	std	Y+5, r18	; 0x05
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	59 f1       	breq	.+86     	; 0x1500 <DIO_u8SetPinValue+0x182>
    14aa:	2d 81       	ldd	r18, Y+5	; 0x05
    14ac:	3e 81       	ldd	r19, Y+6	; 0x06
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <DIO_u8SetPinValue+0x140>
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	69 f0       	breq	.+26     	; 0x14d6 <DIO_u8SetPinValue+0x158>
    14bc:	60 c0       	rjmp	.+192    	; 0x157e <DIO_u8SetPinValue+0x200>
    14be:	2d 81       	ldd	r18, Y+5	; 0x05
    14c0:	3e 81       	ldd	r19, Y+6	; 0x06
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	89 f1       	breq	.+98     	; 0x152a <DIO_u8SetPinValue+0x1ac>
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_u8SetPinValue+0x156>
    14d2:	40 c0       	rjmp	.+128    	; 0x1554 <DIO_u8SetPinValue+0x1d6>
    14d4:	54 c0       	rjmp	.+168    	; 0x157e <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
    14d6:	ab e3       	ldi	r26, 0x3B	; 59
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_u8SetPinValue+0x176>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_u8SetPinValue+0x172>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	47 c0       	rjmp	.+142    	; 0x158e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
    1500:	a8 e3       	ldi	r26, 0x38	; 56
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e8 e3       	ldi	r30, 0x38	; 56
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_u8SetPinValue+0x1a0>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_u8SetPinValue+0x19c>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	32 c0       	rjmp	.+100    	; 0x158e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
    152a:	a5 e3       	ldi	r26, 0x35	; 53
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e3       	ldi	r30, 0x35	; 53
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8SetPinValue+0x1ca>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8SetPinValue+0x1c6>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	1d c0       	rjmp	.+58     	; 0x158e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
    1554:	a2 e3       	ldi	r26, 0x32	; 50
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e2 e3       	ldi	r30, 0x32	; 50
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_u8SetPinValue+0x1f4>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_u8SetPinValue+0x1f0>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	08 c0       	rjmp	.+16     	; 0x158e <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	05 c0       	rjmp	.+10     	; 0x158e <DIO_u8SetPinValue+0x210>
			}
		}

		else
		{
			Local_u8ErrorState=1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	28 96       	adiw	r28, 0x08	; 8
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_u8SetPortValue+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <DIO_u8SetPortValue+0x8>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    15b4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <DIO_u8SetPortValue+0x5c>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <DIO_u8SetPortValue+0x3c>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <DIO_u8SetPortValue+0x52>
    15dc:	1f c0       	rjmp	.+62     	; 0x161c <DIO_u8SetPortValue+0x7a>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <DIO_u8SetPortValue+0x66>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <DIO_u8SetPortValue+0x70>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	80 83       	st	Z, r24
    15fc:	11 c0       	rjmp	.+34     	; 0x1620 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	80 83       	st	Z, r24
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	80 83       	st	Z, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState=1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	27 97       	sbiw	r28, 0x07	; 7
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
    164a:	5d 83       	std	Y+5, r21	; 0x05
    164c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    164e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	09 f4       	brne	.+2      	; 0x165a <DIO_u8GetPinValue+0x28>
    1658:	78 c0       	rjmp	.+240    	; 0x174a <DIO_u8GetPinValue+0x118>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	88 30       	cpi	r24, 0x08	; 8
    165e:	08 f0       	brcs	.+2      	; 0x1662 <DIO_u8GetPinValue+0x30>
    1660:	74 c0       	rjmp	.+232    	; 0x174a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3f 83       	std	Y+7, r19	; 0x07
    166a:	2e 83       	std	Y+6, r18	; 0x06
    166c:	4e 81       	ldd	r20, Y+6	; 0x06
    166e:	5f 81       	ldd	r21, Y+7	; 0x07
    1670:	41 30       	cpi	r20, 0x01	; 1
    1672:	51 05       	cpc	r21, r1
    1674:	59 f1       	breq	.+86     	; 0x16cc <DIO_u8GetPinValue+0x9a>
    1676:	8e 81       	ldd	r24, Y+6	; 0x06
    1678:	9f 81       	ldd	r25, Y+7	; 0x07
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	91 05       	cpc	r25, r1
    167e:	34 f4       	brge	.+12     	; 0x168c <DIO_u8GetPinValue+0x5a>
    1680:	2e 81       	ldd	r18, Y+6	; 0x06
    1682:	3f 81       	ldd	r19, Y+7	; 0x07
    1684:	21 15       	cp	r18, r1
    1686:	31 05       	cpc	r19, r1
    1688:	69 f0       	breq	.+26     	; 0x16a4 <DIO_u8GetPinValue+0x72>
    168a:	5c c0       	rjmp	.+184    	; 0x1744 <DIO_u8GetPinValue+0x112>
    168c:	4e 81       	ldd	r20, Y+6	; 0x06
    168e:	5f 81       	ldd	r21, Y+7	; 0x07
    1690:	42 30       	cpi	r20, 0x02	; 2
    1692:	51 05       	cpc	r21, r1
    1694:	79 f1       	breq	.+94     	; 0x16f4 <DIO_u8GetPinValue+0xc2>
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9f 81       	ldd	r25, Y+7	; 0x07
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <DIO_u8GetPinValue+0x70>
    16a0:	3d c0       	rjmp	.+122    	; 0x171c <DIO_u8GetPinValue+0xea>
    16a2:	50 c0       	rjmp	.+160    	; 0x1744 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
    16a4:	e9 e3       	ldi	r30, 0x39	; 57
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_u8GetPinValue+0x8a>
    16b8:	55 95       	asr	r21
    16ba:	47 95       	ror	r20
    16bc:	8a 95       	dec	r24
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_u8GetPinValue+0x86>
    16c0:	ca 01       	movw	r24, r20
    16c2:	81 70       	andi	r24, 0x01	; 1
    16c4:	ec 81       	ldd	r30, Y+4	; 0x04
    16c6:	fd 81       	ldd	r31, Y+5	; 0x05
    16c8:	80 83       	st	Z, r24
    16ca:	41 c0       	rjmp	.+130    	; 0x174e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
    16cc:	e6 e3       	ldi	r30, 0x36	; 54
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a9 01       	movw	r20, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_u8GetPinValue+0xb2>
    16e0:	55 95       	asr	r21
    16e2:	47 95       	ror	r20
    16e4:	8a 95       	dec	r24
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_u8GetPinValue+0xae>
    16e8:	ca 01       	movw	r24, r20
    16ea:	81 70       	andi	r24, 0x01	; 1
    16ec:	ec 81       	ldd	r30, Y+4	; 0x04
    16ee:	fd 81       	ldd	r31, Y+5	; 0x05
    16f0:	80 83       	st	Z, r24
    16f2:	2d c0       	rjmp	.+90     	; 0x174e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
    16f4:	e3 e3       	ldi	r30, 0x33	; 51
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a9 01       	movw	r20, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_u8GetPinValue+0xda>
    1708:	55 95       	asr	r21
    170a:	47 95       	ror	r20
    170c:	8a 95       	dec	r24
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_u8GetPinValue+0xd6>
    1710:	ca 01       	movw	r24, r20
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	ec 81       	ldd	r30, Y+4	; 0x04
    1716:	fd 81       	ldd	r31, Y+5	; 0x05
    1718:	80 83       	st	Z, r24
    171a:	19 c0       	rjmp	.+50     	; 0x174e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
    171c:	e0 e3       	ldi	r30, 0x30	; 48
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a9 01       	movw	r20, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_u8GetPinValue+0x102>
    1730:	55 95       	asr	r21
    1732:	47 95       	ror	r20
    1734:	8a 95       	dec	r24
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_u8GetPinValue+0xfe>
    1738:	ca 01       	movw	r24, r20
    173a:	81 70       	andi	r24, 0x01	; 1
    173c:	ec 81       	ldd	r30, Y+4	; 0x04
    173e:	fd 81       	ldd	r31, Y+5	; 0x05
    1740:	80 83       	st	Z, r24
    1742:	05 c0       	rjmp	.+10     	; 0x174e <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorState=1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1750:	27 96       	adiw	r28, 0x07	; 7
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <EXTI_voidInt0Init>:
/*global pointer to function*/
void (*EXTI_pvInt0Func)(void) = NULL;


void EXTI_voidInt0Init(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	#elif INT0_SENSE == FALLING_EDGE
		SET_BIT(MCUCR,MCUCR_ISC01);
		CLR_BIT(MCUCR,MCUCR_ISC00);

	#elif INT0_SENSE == RISING_EDGE
		SET_BIT(MCUCR,MCUCR_ISC01);
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	82 60       	ori	r24, 0x02	; 2
    1776:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    1778:	a5 e5       	ldi	r26, 0x55	; 85
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e5       	ldi	r30, 0x55	; 85
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	81 60       	ori	r24, 0x01	; 1
    1784:	8c 93       	st	X, r24
	#endif

	/*configure the SEI for INT0*/

	#if INT0_INITIAL_STATUS == ENABLED
		SET_BIT(GICR ,GICR_INT0);
    1786:	ab e5       	ldi	r26, 0x5B	; 91
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	eb e5       	ldi	r30, 0x5B	; 91
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	80 64       	ori	r24, 0x40	; 64
    1792:	8c 93       	st	X, r24

	#else
	#error "wrong configuration for SEI INT0"

	#endif
}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <EXTI_voidInt1Init>:


void EXTI_voidInt1Init(void)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	#elif INT1_SENSE == ON_CHANGE
		SET_BIT(MCUCR,MCUCR_ISC10);
		CLR_BIT(MCUCR,MCUCR_ISC11);

	#elif INT1_SENSE == FALLING_EDGE
		CLR_BIT(MCUCR,MCUCR_ISC10);
    17a2:	a5 e5       	ldi	r26, 0x55	; 85
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e5       	ldi	r30, 0x55	; 85
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8b 7f       	andi	r24, 0xFB	; 251
    17ae:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
    17b0:	a5 e5       	ldi	r26, 0x55	; 85
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e5 e5       	ldi	r30, 0x55	; 85
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	88 60       	ori	r24, 0x08	; 8
    17bc:	8c 93       	st	X, r24

		#if INT1_INITIAL_STATUS == ENABLED
			SET_BIT(GICR ,GICR_INT1);

		#elif INT1_INITIAL_STATUS == DISABLED
			CLR_BIT(GICR ,GICR_INT1);
    17be:	ab e5       	ldi	r26, 0x5B	; 91
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e5       	ldi	r30, 0x5B	; 91
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 77       	andi	r24, 0x7F	; 127
    17ca:	8c 93       	st	X, r24

		#else
		#error "wrong configuration for SEI INT0"

		#endif
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	/*set sense CTRL for INT2 to falling edge*/
	#if INT2_SENSE == FALLING_EDGE
		CLR_BIT(MCUCSR,MCUCSR_INT2);

	#elif INT2_SENSE == RISING_EDGE
		SET_BIT(MCUCSR,MCUCSR_INT2);
    17da:	a4 e5       	ldi	r26, 0x54	; 84
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e4 e5       	ldi	r30, 0x54	; 84
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24

		#if INT2_INITIAL_STATUS == ENABLED
			SET_BIT(GICR ,GICR_INT2);

		#elif INT2_INITIAL_STATUS == DISABLED
			CLR_BIT(GICR ,GICR_INT2);
    17e8:	ab e5       	ldi	r26, 0x5B	; 91
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	eb e5       	ldi	r30, 0x5B	; 91
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7d       	andi	r24, 0xDF	; 223
    17f4:	8c 93       	st	X, r24

		#else
		#error "wrong configuration for SEI INT0"

		#endif
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <EXTI_u8Int0SetSenseCotrol>:



u8 EXTI_u8Int0SetSenseCotrol(u8 Copy_u8Sense)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EXTI_u8Int0SetSenseCotrol+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <EXTI_u8Int0SetSenseCotrol+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = OK;
    180a:	85 e0       	ldi	r24, 0x05	; 5
    180c:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8Sense)
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3c 83       	std	Y+4, r19	; 0x04
    1816:	2b 83       	std	Y+3, r18	; 0x03
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	29 f1       	breq	.+74     	; 0x186c <EXTI_u8Int0SetSenseCotrol+0x70>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	23 30       	cpi	r18, 0x03	; 3
    1828:	31 05       	cpc	r19, r1
    182a:	34 f4       	brge	.+12     	; 0x1838 <EXTI_u8Int0SetSenseCotrol+0x3c>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	61 f0       	breq	.+24     	; 0x184e <EXTI_u8Int0SetSenseCotrol+0x52>
    1836:	47 c0       	rjmp	.+142    	; 0x18c6 <EXTI_u8Int0SetSenseCotrol+0xca>
    1838:	2b 81       	ldd	r18, Y+3	; 0x03
    183a:	3c 81       	ldd	r19, Y+4	; 0x04
    183c:	23 30       	cpi	r18, 0x03	; 3
    183e:	31 05       	cpc	r19, r1
    1840:	21 f1       	breq	.+72     	; 0x188a <EXTI_u8Int0SetSenseCotrol+0x8e>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	91 05       	cpc	r25, r1
    184a:	71 f1       	breq	.+92     	; 0x18a8 <EXTI_u8Int0SetSenseCotrol+0xac>
    184c:	3c c0       	rjmp	.+120    	; 0x18c6 <EXTI_u8Int0SetSenseCotrol+0xca>
		{
			case LOW_LEVEL:		CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00);break;
    184e:	a5 e5       	ldi	r26, 0x55	; 85
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e5 e5       	ldi	r30, 0x55	; 85
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8d 7f       	andi	r24, 0xFD	; 253
    185a:	8c 93       	st	X, r24
    185c:	a5 e5       	ldi	r26, 0x55	; 85
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e5       	ldi	r30, 0x55	; 85
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8e 7f       	andi	r24, 0xFE	; 254
    1868:	8c 93       	st	X, r24
    186a:	2f c0       	rjmp	.+94     	; 0x18ca <EXTI_u8Int0SetSenseCotrol+0xce>
			case ON_CHANGE: 	CLR_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00);break;
    186c:	a5 e5       	ldi	r26, 0x55	; 85
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e5 e5       	ldi	r30, 0x55	; 85
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8d 7f       	andi	r24, 0xFD	; 253
    1878:	8c 93       	st	X, r24
    187a:	a5 e5       	ldi	r26, 0x55	; 85
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e5       	ldi	r30, 0x55	; 85
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	8c 93       	st	X, r24
    1888:	20 c0       	rjmp	.+64     	; 0x18ca <EXTI_u8Int0SetSenseCotrol+0xce>
			case FALLING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00);break;
    188a:	a5 e5       	ldi	r26, 0x55	; 85
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e5 e5       	ldi	r30, 0x55	; 85
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	82 60       	ori	r24, 0x02	; 2
    1896:	8c 93       	st	X, r24
    1898:	a5 e5       	ldi	r26, 0x55	; 85
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e5       	ldi	r30, 0x55	; 85
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	8c 93       	st	X, r24
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <EXTI_u8Int0SetSenseCotrol+0xce>
			case RISING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00);break;
    18a8:	a5 e5       	ldi	r26, 0x55	; 85
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e5 e5       	ldi	r30, 0x55	; 85
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	82 60       	ori	r24, 0x02	; 2
    18b4:	8c 93       	st	X, r24
    18b6:	a5 e5       	ldi	r26, 0x55	; 85
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e5       	ldi	r30, 0x55	; 85
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	8c 93       	st	X, r24
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <EXTI_u8Int0SetSenseCotrol+0xce>
			default:			Local_u8Error = NOK;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8Error;
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <EXTI_u8Int1SetSenseCotrol>:

u8 EXTI_u8Int1SetSenseCotrol(u8 Copy_u8Sense)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <EXTI_u8Int1SetSenseCotrol+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <EXTI_u8Int1SetSenseCotrol+0x8>
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = OK;
    18e8:	85 e0       	ldi	r24, 0x05	; 5
    18ea:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8Sense)
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	3c 83       	std	Y+4, r19	; 0x04
    18f4:	2b 83       	std	Y+3, r18	; 0x03
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	91 05       	cpc	r25, r1
    18fe:	29 f1       	breq	.+74     	; 0x194a <EXTI_u8Int1SetSenseCotrol+0x70>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	23 30       	cpi	r18, 0x03	; 3
    1906:	31 05       	cpc	r19, r1
    1908:	34 f4       	brge	.+12     	; 0x1916 <EXTI_u8Int1SetSenseCotrol+0x3c>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	61 f0       	breq	.+24     	; 0x192c <EXTI_u8Int1SetSenseCotrol+0x52>
    1914:	47 c0       	rjmp	.+142    	; 0x19a4 <EXTI_u8Int1SetSenseCotrol+0xca>
    1916:	2b 81       	ldd	r18, Y+3	; 0x03
    1918:	3c 81       	ldd	r19, Y+4	; 0x04
    191a:	23 30       	cpi	r18, 0x03	; 3
    191c:	31 05       	cpc	r19, r1
    191e:	21 f1       	breq	.+72     	; 0x1968 <EXTI_u8Int1SetSenseCotrol+0x8e>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	91 05       	cpc	r25, r1
    1928:	71 f1       	breq	.+92     	; 0x1986 <EXTI_u8Int1SetSenseCotrol+0xac>
    192a:	3c c0       	rjmp	.+120    	; 0x19a4 <EXTI_u8Int1SetSenseCotrol+0xca>
		{
			case LOW_LEVEL:		CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11);break;
    192c:	a5 e5       	ldi	r26, 0x55	; 85
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e5 e5       	ldi	r30, 0x55	; 85
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8b 7f       	andi	r24, 0xFB	; 251
    1938:	8c 93       	st	X, r24
    193a:	a5 e5       	ldi	r26, 0x55	; 85
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e5       	ldi	r30, 0x55	; 85
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	87 7f       	andi	r24, 0xF7	; 247
    1946:	8c 93       	st	X, r24
    1948:	2f c0       	rjmp	.+94     	; 0x19a8 <EXTI_u8Int1SetSenseCotrol+0xce>
			case ON_CHANGE: 	SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11);break;
    194a:	a5 e5       	ldi	r26, 0x55	; 85
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e5 e5       	ldi	r30, 0x55	; 85
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	84 60       	ori	r24, 0x04	; 4
    1956:	8c 93       	st	X, r24
    1958:	a5 e5       	ldi	r26, 0x55	; 85
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e5       	ldi	r30, 0x55	; 85
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	87 7f       	andi	r24, 0xF7	; 247
    1964:	8c 93       	st	X, r24
    1966:	20 c0       	rjmp	.+64     	; 0x19a8 <EXTI_u8Int1SetSenseCotrol+0xce>
			case FALLING_EDGE: 	CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11);break;
    1968:	a5 e5       	ldi	r26, 0x55	; 85
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e5 e5       	ldi	r30, 0x55	; 85
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8b 7f       	andi	r24, 0xFB	; 251
    1974:	8c 93       	st	X, r24
    1976:	a5 e5       	ldi	r26, 0x55	; 85
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e5       	ldi	r30, 0x55	; 85
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	88 60       	ori	r24, 0x08	; 8
    1982:	8c 93       	st	X, r24
    1984:	11 c0       	rjmp	.+34     	; 0x19a8 <EXTI_u8Int1SetSenseCotrol+0xce>
			case RISING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11);break;
    1986:	a5 e5       	ldi	r26, 0x55	; 85
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e5 e5       	ldi	r30, 0x55	; 85
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	8c 93       	st	X, r24
    1994:	a5 e5       	ldi	r26, 0x55	; 85
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e5 e5       	ldi	r30, 0x55	; 85
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	88 60       	ori	r24, 0x08	; 8
    19a0:	8c 93       	st	X, r24
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <EXTI_u8Int1SetSenseCotrol+0xce>
			default:			Local_u8Error = NOK;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8Error;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <EXTI_u8Int2SetSenseCotrol>:


u8 EXTI_u8Int2SetSenseCotrol(u8 Copy_u8Sense)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <EXTI_u8Int2SetSenseCotrol+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <EXTI_u8Int2SetSenseCotrol+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = OK;
    19c6:	85 e0       	ldi	r24, 0x05	; 5
    19c8:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Sense)
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3c 83       	std	Y+4, r19	; 0x04
    19d2:	2b 83       	std	Y+3, r18	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	91 05       	cpc	r25, r1
    19dc:	31 f0       	breq	.+12     	; 0x19ea <EXTI_u8Int2SetSenseCotrol+0x32>
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	24 30       	cpi	r18, 0x04	; 4
    19e4:	31 05       	cpc	r19, r1
    19e6:	49 f0       	breq	.+18     	; 0x19fa <EXTI_u8Int2SetSenseCotrol+0x42>
    19e8:	10 c0       	rjmp	.+32     	; 0x1a0a <EXTI_u8Int2SetSenseCotrol+0x52>
		{

		case FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_INT2);;break;
    19ea:	a4 e5       	ldi	r26, 0x54	; 84
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e4 e5       	ldi	r30, 0x54	; 84
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8f 7b       	andi	r24, 0xBF	; 191
    19f6:	8c 93       	st	X, r24
    19f8:	0a c0       	rjmp	.+20     	; 0x1a0e <EXTI_u8Int2SetSenseCotrol+0x56>
		case RISING_EDGE: 	SET_BIT(MCUCSR,MCUCSR_INT2);;break;
    19fa:	a4 e5       	ldi	r26, 0x54	; 84
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e4 e5       	ldi	r30, 0x54	; 84
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	80 64       	ori	r24, 0x40	; 64
    1a06:	8c 93       	st	X, r24
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <EXTI_u8Int2SetSenseCotrol+0x56>
		default:			Local_u8Error = NOK;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01

		}
	return Local_u8Error;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <EXTI_u8IntEnable>:

u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <EXTI_u8IntEnable+0x6>
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <EXTI_u8IntEnable+0x8>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = OK;
    1a2c:	85 e0       	ldi	r24, 0x05	; 5
    1a2e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Int)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3c 83       	std	Y+4, r19	; 0x04
    1a38:	2b 83       	std	Y+3, r18	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	82 30       	cpi	r24, 0x02	; 2
    1a40:	91 05       	cpc	r25, r1
    1a42:	91 f0       	breq	.+36     	; 0x1a68 <EXTI_u8IntEnable+0x4a>
    1a44:	2b 81       	ldd	r18, Y+3	; 0x03
    1a46:	3c 81       	ldd	r19, Y+4	; 0x04
    1a48:	23 30       	cpi	r18, 0x03	; 3
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	a9 f0       	breq	.+42     	; 0x1a78 <EXTI_u8IntEnable+0x5a>
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	c1 f4       	brne	.+48     	; 0x1a88 <EXTI_u8IntEnable+0x6a>
	{
	case INT0 :SET_BIT(GICR ,GICR_INT0);break;
    1a58:	ab e5       	ldi	r26, 0x5B	; 91
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	eb e5       	ldi	r30, 0x5B	; 91
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 64       	ori	r24, 0x40	; 64
    1a64:	8c 93       	st	X, r24
    1a66:	12 c0       	rjmp	.+36     	; 0x1a8c <EXTI_u8IntEnable+0x6e>
	case INT1 :SET_BIT(GICR ,GICR_INT1);break;
    1a68:	ab e5       	ldi	r26, 0x5B	; 91
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	eb e5       	ldi	r30, 0x5B	; 91
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	80 68       	ori	r24, 0x80	; 128
    1a74:	8c 93       	st	X, r24
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <EXTI_u8IntEnable+0x6e>
	case INT2 :SET_BIT(GICR ,GICR_INT2);break;
    1a78:	ab e5       	ldi	r26, 0x5B	; 91
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e5       	ldi	r30, 0x5B	; 91
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	80 62       	ori	r24, 0x20	; 32
    1a84:	8c 93       	st	X, r24
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <EXTI_u8IntEnable+0x6e>
	default   :Local_u8Error = NOK;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <EXTI_u8IntDisable>:



u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <EXTI_u8IntDisable+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <EXTI_u8IntDisable+0x8>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error = OK;
    1aaa:	85 e0       	ldi	r24, 0x05	; 5
    1aac:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8Int)
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3c 83       	std	Y+4, r19	; 0x04
    1ab6:	2b 83       	std	Y+3, r18	; 0x03
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	91 05       	cpc	r25, r1
    1ac0:	91 f0       	breq	.+36     	; 0x1ae6 <EXTI_u8IntDisable+0x4a>
    1ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac6:	23 30       	cpi	r18, 0x03	; 3
    1ac8:	31 05       	cpc	r19, r1
    1aca:	a9 f0       	breq	.+42     	; 0x1af6 <EXTI_u8IntDisable+0x5a>
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	c1 f4       	brne	.+48     	; 0x1b06 <EXTI_u8IntDisable+0x6a>
		{
		case INT0 :CLR_BIT(GICR ,GICR_INT0);break;
    1ad6:	ab e5       	ldi	r26, 0x5B	; 91
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	eb e5       	ldi	r30, 0x5B	; 91
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 7b       	andi	r24, 0xBF	; 191
    1ae2:	8c 93       	st	X, r24
    1ae4:	12 c0       	rjmp	.+36     	; 0x1b0a <EXTI_u8IntDisable+0x6e>
		case INT1 :CLR_BIT(GICR ,GICR_INT1);break;
    1ae6:	ab e5       	ldi	r26, 0x5B	; 91
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	eb e5       	ldi	r30, 0x5B	; 91
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 77       	andi	r24, 0x7F	; 127
    1af2:	8c 93       	st	X, r24
    1af4:	0a c0       	rjmp	.+20     	; 0x1b0a <EXTI_u8IntDisable+0x6e>
		case INT2 :CLR_BIT(GICR ,GICR_INT2);break;
    1af6:	ab e5       	ldi	r26, 0x5B	; 91
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	eb e5       	ldi	r30, 0x5B	; 91
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 7d       	andi	r24, 0xDF	; 223
    1b02:	8c 93       	st	X, r24
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <EXTI_u8IntDisable+0x6e>
		default   :Local_u8Error = NOK;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8Error;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <EXTI_u8SetCallBack>:

u8 EXTI_u8SetCallBack(void(*Copy_pvInt0Func)(void))
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <EXTI_u8SetCallBack+0x6>
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvInt0Func != NULL)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	39 f0       	breq	.+14     	; 0x1b44 <EXTI_u8SetCallBack+0x2a>
	{
		EXTI_pvInt0Func = Copy_pvInt0Func;
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3a:	90 93 7f 00 	sts	0x007F, r25
    1b3e:	80 93 7e 00 	sts	0x007E, r24
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <EXTI_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1b56:	1f 92       	push	r1
    1b58:	0f 92       	push	r0
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	0f 92       	push	r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	2f 93       	push	r18
    1b62:	3f 93       	push	r19
    1b64:	4f 93       	push	r20
    1b66:	5f 93       	push	r21
    1b68:	6f 93       	push	r22
    1b6a:	7f 93       	push	r23
    1b6c:	8f 93       	push	r24
    1b6e:	9f 93       	push	r25
    1b70:	af 93       	push	r26
    1b72:	bf 93       	push	r27
    1b74:	ef 93       	push	r30
    1b76:	ff 93       	push	r31
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!= NULL)
    1b80:	80 91 7e 00 	lds	r24, 0x007E
    1b84:	90 91 7f 00 	lds	r25, 0x007F
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	29 f0       	breq	.+10     	; 0x1b96 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    1b8c:	e0 91 7e 00 	lds	r30, 0x007E
    1b90:	f0 91 7f 00 	lds	r31, 0x007F
    1b94:	09 95       	icall
	}
}
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	ff 91       	pop	r31
    1b9c:	ef 91       	pop	r30
    1b9e:	bf 91       	pop	r27
    1ba0:	af 91       	pop	r26
    1ba2:	9f 91       	pop	r25
    1ba4:	8f 91       	pop	r24
    1ba6:	7f 91       	pop	r23
    1ba8:	6f 91       	pop	r22
    1baa:	5f 91       	pop	r21
    1bac:	4f 91       	pop	r20
    1bae:	3f 91       	pop	r19
    1bb0:	2f 91       	pop	r18
    1bb2:	0f 90       	pop	r0
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	0f 90       	pop	r0
    1bb8:	1f 90       	pop	r1
    1bba:	18 95       	reti

00001bbc <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,SREG_I);
    1bc4:	af e5       	ldi	r26, 0x5F	; 95
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ef e5       	ldi	r30, 0x5F	; 95
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 68       	ori	r24, 0x80	; 128
    1bd0:	8c 93       	st	X, r24
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,SREG_I);
    1be0:	af e5       	ldi	r26, 0x5F	; 95
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ef e5       	ldi	r30, 0x5F	; 95
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 77       	andi	r24, 0x7F	; 127
    1bec:	8c 93       	st	X, r24
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <main>:
#include "CLCD_interface.h"

void Response(void);

void main()
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInIt();
    1bfc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <PORT_voidInIt>
	EXTI_u8SetCallBack(&Response);
    1c00:	80 e1       	ldi	r24, 0x10	; 16
    1c02:	9e e0       	ldi	r25, 0x0E	; 14
    1c04:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <EXTI_u8SetCallBack>
	EXTI_u8IntEnable(INT0);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <EXTI_u8IntEnable>
	TIMER1_voidInit();
    1c0e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <TIMER1_voidInit>
	CLCD_voidInit();
    1c12:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidInit>
	TIMER0_voidInit();
    1c16:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <TIMER0_voidInit>
	GIE_voidEnable();
    1c1a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GIE_voidEnable>
    1c1e:	ff cf       	rjmp	.-2      	; 0x1c1e <main+0x2a>

00001c20 <Response>:
	{
	}
}

void Response(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	static u16 cnt = 0, Period_Time , On_Time;
	if(cnt == 0)
    1c28:	80 91 84 00 	lds	r24, 0x0084
    1c2c:	90 91 85 00 	lds	r25, 0x0085
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <Response+0x1e>
	{
		TIMER1_voidSetPreload(0);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <TIMER1_voidSetPreload>
    1c3c:	4c c0       	rjmp	.+152    	; 0x1cd6 <Response+0xb6>
	}
	else if(cnt == 1)
    1c3e:	80 91 84 00 	lds	r24, 0x0084
    1c42:	90 91 85 00 	lds	r25, 0x0085
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	51 f4       	brne	.+20     	; 0x1c60 <Response+0x40>
	{
		EXTI_u8Int0SetSenseCotrol(FALLING_EDGE);
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <EXTI_u8Int0SetSenseCotrol>
		Period_Time = TIMER1_u16GetTimerCounterValue();
    1c52:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TIMER1_u16GetTimerCounterValue>
    1c56:	90 93 83 00 	sts	0x0083, r25
    1c5a:	80 93 82 00 	sts	0x0082, r24
    1c5e:	3b c0       	rjmp	.+118    	; 0x1cd6 <Response+0xb6>
	}
	else if(cnt == 2)
    1c60:	80 91 84 00 	lds	r24, 0x0084
    1c64:	90 91 85 00 	lds	r25, 0x0085
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	a1 f5       	brne	.+104    	; 0x1cd6 <Response+0xb6>
	{
		On_Time = (TIMER1_u16GetTimerCounterValue() - Period_Time );
    1c6e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TIMER1_u16GetTimerCounterValue>
    1c72:	9c 01       	movw	r18, r24
    1c74:	80 91 82 00 	lds	r24, 0x0082
    1c78:	90 91 83 00 	lds	r25, 0x0083
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	48 1b       	sub	r20, r24
    1c80:	59 0b       	sbc	r21, r25
    1c82:	ca 01       	movw	r24, r20
    1c84:	90 93 81 00 	sts	0x0081, r25
    1c88:	80 93 80 00 	sts	0x0080, r24
		EXTI_u8IntDisable(INT0);
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <EXTI_u8IntDisable>
		CLCD_voidSendString("Period Time=");
    1c92:	80 e6       	ldi	r24, 0x60	; 96
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
		CLCD_voidDisplayNumber(Period_Time);
    1c9a:	80 91 82 00 	lds	r24, 0x0082
    1c9e:	90 91 83 00 	lds	r25, 0x0083
    1ca2:	cc 01       	movw	r24, r24
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidDisplayNumber>
		CLCD_voidGoToXY(1,0);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	0e 94 08 07 	call	0xe10	; 0xe10 <CLCD_voidGoToXY>
		CLCD_voidSendString("On Time=");
    1cb8:	8d e6       	ldi	r24, 0x6D	; 109
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
		CLCD_voidDisplayNumber(On_Time);
    1cc0:	80 91 80 00 	lds	r24, 0x0080
    1cc4:	90 91 81 00 	lds	r25, 0x0081
    1cc8:	cc 01       	movw	r24, r24
    1cca:	a0 e0       	ldi	r26, 0x00	; 0
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidDisplayNumber>
	}
	cnt++;
    1cd6:	80 91 84 00 	lds	r24, 0x0084
    1cda:	90 91 85 00 	lds	r25, 0x0085
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	90 93 85 00 	sts	0x0085, r25
    1ce4:	80 93 84 00 	sts	0x0084, r24
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <PORT_voidInIt>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
    1cf6:	ea e3       	ldi	r30, 0x3A	; 58
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 ee       	ldi	r24, 0xE0	; 224
    1cfc:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    1cfe:	e7 e3       	ldi	r30, 0x37	; 55
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	88 e0       	ldi	r24, 0x08	; 8
    1d04:	80 83       	st	Z, r24
    DDRC = PORTC_DIR;
    1d06:	e4 e3       	ldi	r30, 0x34	; 52
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
    1d0e:	e1 e3       	ldi	r30, 0x31	; 49
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	10 82       	st	Z, r1

    PORTA = PORTA_INITIAL_VALUE;
    1d14:	eb e3       	ldi	r30, 0x3B	; 59
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	10 82       	st	Z, r1
    PORTB = PORTB_INITIAL_VALUE;
    1d1a:	e8 e3       	ldi	r30, 0x38	; 56
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	10 82       	st	Z, r1
    PORTC = PORTC_INITIAL_VALUE;
    1d20:	e5 e3       	ldi	r30, 0x35	; 53
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	10 82       	st	Z, r1
    PORTD = PORTD_INITIAL_VALUE;
    1d26:	e2 e3       	ldi	r30, 0x32	; 50
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	10 82       	st	Z, r1
}
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
//..................................................................................
//..................................................................................

	#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
	/*Initialize Waveform Generation Mode as Fast PWM Mode*/
		SET_BIT(TCCR0 , TCCR0_WGM00) ;
    1d3a:	a3 e5       	ldi	r26, 0x53	; 83
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 e5       	ldi	r30, 0x53	; 83
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	80 64       	ori	r24, 0x40	; 64
    1d46:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , TCCR0_WGM01) ;
    1d48:	a3 e5       	ldi	r26, 0x53	; 83
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e3 e5       	ldi	r30, 0x53	; 83
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	88 60       	ori	r24, 0x08	; 8
    1d54:	8c 93       	st	X, r24
		/*Set CTC Fast PWM MODE*/
	#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR0 , TCCR0_COM00) ;
		CLR_BIT(TCCR0 , TCCR0_COM01) ;
	#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR0 , TCCR0_COM00) ;
    1d56:	a3 e5       	ldi	r26, 0x53	; 83
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e3 e5       	ldi	r30, 0x53	; 83
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7e       	andi	r24, 0xEF	; 239
    1d62:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , TCCR0_COM01) ;
    1d64:	a3 e5       	ldi	r26, 0x53	; 83
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e3 e5       	ldi	r30, 0x53	; 83
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 62       	ori	r24, 0x20	; 32
    1d70:	8c 93       	st	X, r24
	#else
	#error "Wrong TIMER0_CTC_PWM_MODE Config"
	#endif

		/*Set the Required CTC Value*/
		OCR0 = TIMER0_CTC_VAL ;
    1d72:	ec e5       	ldi	r30, 0x5C	; 92
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 e4       	ldi	r24, 0x40	; 64
    1d78:	80 83       	st	Z, r24
	#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"
	#endif
//..................................................................................

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1d7a:	a3 e5       	ldi	r26, 0x53	; 83
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 e5       	ldi	r30, 0x53	; 83
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	88 7f       	andi	r24, 0xF8	; 248
    1d86:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1d88:	a3 e5       	ldi	r26, 0x53	; 83
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e3 e5       	ldi	r30, 0x53	; 83
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	82 60       	ori	r24, 0x02	; 2
    1d94:	8c 93       	st	X, r24
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <TIMER1_voidInit>:

//..................................................................................
//..................................................................................
void TIMER1_voidInit(void)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/

	#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_NORMAL_MODE

		/*Set Waveform generation mode as Normal mode */
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1da4:	af e4       	ldi	r26, 0x4F	; 79
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ef e4       	ldi	r30, 0x4F	; 79
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8e 7f       	andi	r24, 0xFE	; 254
    1db0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1db2:	af e4       	ldi	r26, 0x4F	; 79
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ef e4       	ldi	r30, 0x4F	; 79
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8d 7f       	andi	r24, 0xFD	; 253
    1dbe:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1dc0:	ae e4       	ldi	r26, 0x4E	; 78
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ee e4       	ldi	r30, 0x4E	; 78
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	87 7f       	andi	r24, 0xF7	; 247
    1dcc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1dce:	ae e4       	ldi	r26, 0x4E	; 78
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	ee e4       	ldi	r30, 0x4E	; 78
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 7e       	andi	r24, 0xEF	; 239
    1dda:	8c 93       	st	X, r24

		/*Set the require Preload Value*/
		TCNT1 = TIMER1_PRELOAD_VAL ;
    1ddc:	ec e4       	ldi	r30, 0x4C	; 76
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	11 82       	std	Z+1, r1	; 0x01
    1de2:	10 82       	st	Z, r1

		/*Timer1 Overflow Interrupt Enable*/
	#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1de4:	a9 e5       	ldi	r26, 0x59	; 89
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e9 e5       	ldi	r30, 0x59	; 89
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8b 7f       	andi	r24, 0xFB	; 251
    1df0:	8c 93       	st	X, r24
	#else
	#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
	#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1df2:	ae e4       	ldi	r26, 0x4E	; 78
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ee e4       	ldi	r30, 0x4E	; 78
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 7f       	andi	r24, 0xF8	; 248
    1dfe:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1e00:	ae e4       	ldi	r26, 0x4E	; 78
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ee e4       	ldi	r30, 0x4E	; 78
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	8c 93       	st	X, r24


}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
		OCR2 = TIMER2_CTC_VAL ;

	#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

		/*Initialize Waveform Generation Mode as CTC Mode*/
		CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1e1c:	a5 e4       	ldi	r26, 0x45	; 69
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e4       	ldi	r30, 0x45	; 69
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7b       	andi	r24, 0xBF	; 191
    1e28:	8c 93       	st	X, r24
		SET_BIT(TCCR2 , TCCR2_WGM21) ;
    1e2a:	a5 e4       	ldi	r26, 0x45	; 69
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e5 e4       	ldi	r30, 0x45	; 69
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	88 60       	ori	r24, 0x08	; 8
    1e36:	8c 93       	st	X, r24

		/*Set the Required CTC Value*/
		OCR2 = TIMER2_CTC_VAL ;
    1e38:	e3 e4       	ldi	r30, 0x43	; 67
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8d e7       	ldi	r24, 0x7D	; 125
    1e3e:	80 83       	st	Z, r24

		/*Timer2 Compare Match Interrupt Enable*/
	#if TIMER2_CTC_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE2) ;
	#elif TIMER2_CTC_INTERRUPT == ENABLE
		SET_BIT(TIMSK , TIMSK_OCIE2) ;
    1e40:	a9 e5       	ldi	r26, 0x59	; 89
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e9 e5       	ldi	r30, 0x59	; 89
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 68       	ori	r24, 0x80	; 128
    1e4c:	8c 93       	st	X, r24
	#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

	#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1e4e:	a5 e4       	ldi	r26, 0x45	; 69
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e4       	ldi	r30, 0x45	; 69
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 7f       	andi	r24, 0xF8	; 248
    1e5a:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1e5c:	a5 e4       	ldi	r26, 0x45	; 69
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e4       	ldi	r30, 0x45	; 69
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	83 60       	ori	r24, 0x03	; 3
    1e68:	8c 93       	st	X, r24
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1e7c:	e2 e5       	ldi	r30, 0x52	; 82
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	80 83       	st	Z, r24
}
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <TIMER1_voidSetPreload+0x6>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1e9a:	ec e4       	ldi	r30, 0x4C	; 76
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1ebc:	e4 e4       	ldi	r30, 0x44	; 68
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	80 83       	st	Z, r24
}
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	0f 92       	push	r0
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1ed8:	ec e5       	ldi	r30, 0x5C	; 92
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	80 83       	st	Z, r24
}
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <TIMER1_voidSetCTCA+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1ef6:	ea e4       	ldi	r30, 0x4A	; 74
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <TIMER1_voidSetCTCB+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1f1a:	e8 e4       	ldi	r30, 0x48	; 72
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1f3c:	e3 e4       	ldi	r30, 0x43	; 67
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	80 83       	st	Z, r24
}
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <TIMER1_voidSetICR1+0x6>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1f5a:	e6 e4       	ldi	r30, 0x46	; 70
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1f78:	e2 e5       	ldi	r30, 0x52	; 82
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1f8c:	ec e4       	ldi	r30, 0x4C	; 76
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1fa2:	e4 e4       	ldi	r30, 0x44	; 68
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
}
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <TIMER_voidSetPWM+0x6>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1fbc:	ea e4       	ldi	r30, 0x4A	; 74
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
 */
void TIMER_voidICUInitEnable(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    1fda:	ae e4       	ldi	r26, 0x4E	; 78
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	ee e4       	ldi	r30, 0x4E	; 78
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 64       	ori	r24, 0x40	; 64
    1fe6:	8c 93       	st	X, r24
#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
	CLR_BIT(TCCR1B,TCCR1B_ICES1);
#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1fe8:	a9 e5       	ldi	r26, 0x59	; 89
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e9 e5       	ldi	r30, 0x59	; 89
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	8c 93       	st	X, r24
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <TIMER_voidICUSetTriggerEdge>:
		Options :-
		 1- TIMER_u8_ICP_RAISING_EDGE
		 2- TIMER_u8_ICP_FALLING_EDGE
	 */
	u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
	{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <TIMER_voidICUSetTriggerEdge+0x6>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8ErrorStatus = OK ;
    2008:	85 e0       	ldi	r24, 0x05	; 5
    200a:	89 83       	std	Y+1, r24	; 0x01

		/* Change The trigger source as Rising edge or Falling edge */
		if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	41 f4       	brne	.+16     	; 0x2022 <TIMER_voidICUSetTriggerEdge+0x26>
		{
			SET_BIT(TCCR1B,TCCR1B_ICES1);
    2012:	ae e4       	ldi	r26, 0x4E	; 78
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	ee e4       	ldi	r30, 0x4E	; 78
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 64       	ori	r24, 0x40	; 64
    201e:	8c 93       	st	X, r24
    2020:	0d c0       	rjmp	.+26     	; 0x203c <TIMER_voidICUSetTriggerEdge+0x40>
		}
		else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	88 23       	and	r24, r24
    2026:	41 f4       	brne	.+16     	; 0x2038 <TIMER_voidICUSetTriggerEdge+0x3c>
		{
			CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2028:	ae e4       	ldi	r26, 0x4E	; 78
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ee e4       	ldi	r30, 0x4E	; 78
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7b       	andi	r24, 0xBF	; 191
    2034:	8c 93       	st	X, r24
    2036:	02 c0       	rjmp	.+4      	; 0x203c <TIMER_voidICUSetTriggerEdge+0x40>
		}
		else
		{
			Local_u8ErrorStatus = NOK ;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8ErrorStatus;
    203c:	89 81       	ldd	r24, Y+1	; 0x01

	}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

	void TIMER_voidICUEnableInterrupt(void)
	{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TICIE1);
    2050:	a9 e5       	ldi	r26, 0x59	; 89
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e9 e5       	ldi	r30, 0x59	; 89
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	80 62       	ori	r24, 0x20	; 32
    205c:	8c 93       	st	X, r24
	}
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

	void TIMER_voidICUDisableInterrupt(void)
	{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    206c:	a9 e5       	ldi	r26, 0x59	; 89
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e9 e5       	ldi	r30, 0x59	; 89
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8f 7d       	andi	r24, 0xDF	; 223
    2078:	8c 93       	st	X, r24
	}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

	u16 TIMER_u16GetICR(void)
	{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
		return ICR1;
    2088:	e6 e4       	ldi	r30, 0x46	; 70
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
	}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <TIMER_voidWDTSleep>:
	 */

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
	void TIMER_voidWDTSleep(void)
	{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
		/* CLear The Prescaler bits  */
		WDTCR &= WDT_PS_MASKING ;
    209e:	a1 e4       	ldi	r26, 0x41	; 65
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e1 e4       	ldi	r30, 0x41	; 65
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	88 7f       	andi	r24, 0xF8	; 248
    20aa:	8c 93       	st	X, r24
		/* Set The required prescaller */
		WDTCR |= WDT_PRESCALER ;
    20ac:	a1 e4       	ldi	r26, 0x41	; 65
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e1 e4       	ldi	r30, 0x41	; 65
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	86 60       	ori	r24, 0x06	; 6
    20b8:	8c 93       	st	X, r24
	}
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

	void TIMER_voidWDTEnable (void)
	{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
		SET_BIT (WDTCR , WDTCR_WDE);
    20c8:	a1 e4       	ldi	r26, 0x41	; 65
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e1 e4       	ldi	r30, 0x41	; 65
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	88 60       	ori	r24, 0x08	; 8
    20d4:	8c 93       	st	X, r24
	}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

	void TIMER_voidWDTDisable (void)
	{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
		/* Set Bit 3&4 at the same CLK cycle  */
		WDTCR |= 0b00011000 ;
    20e4:	a1 e4       	ldi	r26, 0x41	; 65
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e1 e4       	ldi	r30, 0x41	; 65
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	88 61       	ori	r24, 0x18	; 24
    20f0:	8c 93       	st	X, r24
		/* WDTCR_WDE = 0 */
		/* I don't care for any value in this Reg Cuz I want to Disable */
		WDTCR = 0 ;
    20f2:	e1 e4       	ldi	r30, 0x41	; 65
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	10 82       	st	Z, r1
	}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

	u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
	{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <TIMER_u8SetCallBack+0x6>
    2104:	00 d0       	rcall	.+0      	; 0x2106 <TIMER_u8SetCallBack+0x8>
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	9b 83       	std	Y+3, r25	; 0x03
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	6c 83       	std	Y+4, r22	; 0x04
		u8 Local_u8ErrorState = OK ;
    2110:	85 e0       	ldi	r24, 0x05	; 5
    2112:	89 83       	std	Y+1, r24	; 0x01

		if (Copy_pvCallBackFunc != NULL)
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f0       	breq	.+26     	; 0x2136 <TIMER_u8SetCallBack+0x38>
		{
			TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	fc 01       	movw	r30, r24
    2128:	ea 57       	subi	r30, 0x7A	; 122
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	02 c0       	rjmp	.+4      	; 0x213a <TIMER_u8SetCallBack+0x3c>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER ;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErrorState ;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <__vector_11>:

	/*TIMER0 Normal Mode ISR*/
	void __vector_11 (void)		__attribute__((signal)) ;
	void __vector_11 (void)
	{
    214a:	1f 92       	push	r1
    214c:	0f 92       	push	r0
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	0f 92       	push	r0
    2152:	11 24       	eor	r1, r1
    2154:	2f 93       	push	r18
    2156:	3f 93       	push	r19
    2158:	4f 93       	push	r20
    215a:	5f 93       	push	r21
    215c:	6f 93       	push	r22
    215e:	7f 93       	push	r23
    2160:	8f 93       	push	r24
    2162:	9f 93       	push	r25
    2164:	af 93       	push	r26
    2166:	bf 93       	push	r27
    2168:	ef 93       	push	r30
    216a:	ff 93       	push	r31
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    2174:	80 91 9c 00 	lds	r24, 0x009C
    2178:	90 91 9d 00 	lds	r25, 0x009D
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	29 f0       	breq	.+10     	; 0x218a <__vector_11+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    2180:	e0 91 9c 00 	lds	r30, 0x009C
    2184:	f0 91 9d 00 	lds	r31, 0x009D
    2188:	09 95       	icall
		}
	}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	ff 91       	pop	r31
    2190:	ef 91       	pop	r30
    2192:	bf 91       	pop	r27
    2194:	af 91       	pop	r26
    2196:	9f 91       	pop	r25
    2198:	8f 91       	pop	r24
    219a:	7f 91       	pop	r23
    219c:	6f 91       	pop	r22
    219e:	5f 91       	pop	r21
    21a0:	4f 91       	pop	r20
    21a2:	3f 91       	pop	r19
    21a4:	2f 91       	pop	r18
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	0f 90       	pop	r0
    21ac:	1f 90       	pop	r1
    21ae:	18 95       	reti

000021b0 <__vector_10>:

	/*TIMER0 CTC Mode ISR*/
	void __vector_10 (void)		__attribute__((signal)) ;
	void __vector_10 (void)
	{
    21b0:	1f 92       	push	r1
    21b2:	0f 92       	push	r0
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	0f 92       	push	r0
    21b8:	11 24       	eor	r1, r1
    21ba:	2f 93       	push	r18
    21bc:	3f 93       	push	r19
    21be:	4f 93       	push	r20
    21c0:	5f 93       	push	r21
    21c2:	6f 93       	push	r22
    21c4:	7f 93       	push	r23
    21c6:	8f 93       	push	r24
    21c8:	9f 93       	push	r25
    21ca:	af 93       	push	r26
    21cc:	bf 93       	push	r27
    21ce:	ef 93       	push	r30
    21d0:	ff 93       	push	r31
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    21da:	80 91 9a 00 	lds	r24, 0x009A
    21de:	90 91 9b 00 	lds	r25, 0x009B
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	29 f0       	breq	.+10     	; 0x21f0 <__vector_10+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    21e6:	e0 91 9a 00 	lds	r30, 0x009A
    21ea:	f0 91 9b 00 	lds	r31, 0x009B
    21ee:	09 95       	icall
		}
	}
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	ff 91       	pop	r31
    21f6:	ef 91       	pop	r30
    21f8:	bf 91       	pop	r27
    21fa:	af 91       	pop	r26
    21fc:	9f 91       	pop	r25
    21fe:	8f 91       	pop	r24
    2200:	7f 91       	pop	r23
    2202:	6f 91       	pop	r22
    2204:	5f 91       	pop	r21
    2206:	4f 91       	pop	r20
    2208:	3f 91       	pop	r19
    220a:	2f 91       	pop	r18
    220c:	0f 90       	pop	r0
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	0f 90       	pop	r0
    2212:	1f 90       	pop	r1
    2214:	18 95       	reti

00002216 <__vector_9>:

	/*TIMER1 Normal Mode ISR*/
	void __vector_9 (void)		__attribute__((signal)) ;
	void __vector_9 (void)
	{
    2216:	1f 92       	push	r1
    2218:	0f 92       	push	r0
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	0f 92       	push	r0
    221e:	11 24       	eor	r1, r1
    2220:	2f 93       	push	r18
    2222:	3f 93       	push	r19
    2224:	4f 93       	push	r20
    2226:	5f 93       	push	r21
    2228:	6f 93       	push	r22
    222a:	7f 93       	push	r23
    222c:	8f 93       	push	r24
    222e:	9f 93       	push	r25
    2230:	af 93       	push	r26
    2232:	bf 93       	push	r27
    2234:	ef 93       	push	r30
    2236:	ff 93       	push	r31
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    2240:	80 91 98 00 	lds	r24, 0x0098
    2244:	90 91 99 00 	lds	r25, 0x0099
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	29 f0       	breq	.+10     	; 0x2256 <__vector_9+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    224c:	e0 91 98 00 	lds	r30, 0x0098
    2250:	f0 91 99 00 	lds	r31, 0x0099
    2254:	09 95       	icall
		}
	}
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	ff 91       	pop	r31
    225c:	ef 91       	pop	r30
    225e:	bf 91       	pop	r27
    2260:	af 91       	pop	r26
    2262:	9f 91       	pop	r25
    2264:	8f 91       	pop	r24
    2266:	7f 91       	pop	r23
    2268:	6f 91       	pop	r22
    226a:	5f 91       	pop	r21
    226c:	4f 91       	pop	r20
    226e:	3f 91       	pop	r19
    2270:	2f 91       	pop	r18
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <__vector_8>:

	/*TIMER1 CTCB Mode ISR*/
	void __vector_8 (void)		__attribute__((signal)) ;
	void __vector_8 (void)
	{
    227c:	1f 92       	push	r1
    227e:	0f 92       	push	r0
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	0f 92       	push	r0
    2284:	11 24       	eor	r1, r1
    2286:	2f 93       	push	r18
    2288:	3f 93       	push	r19
    228a:	4f 93       	push	r20
    228c:	5f 93       	push	r21
    228e:	6f 93       	push	r22
    2290:	7f 93       	push	r23
    2292:	8f 93       	push	r24
    2294:	9f 93       	push	r25
    2296:	af 93       	push	r26
    2298:	bf 93       	push	r27
    229a:	ef 93       	push	r30
    229c:	ff 93       	push	r31
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    22a6:	80 91 96 00 	lds	r24, 0x0096
    22aa:	90 91 97 00 	lds	r25, 0x0097
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	29 f0       	breq	.+10     	; 0x22bc <__vector_8+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    22b2:	e0 91 96 00 	lds	r30, 0x0096
    22b6:	f0 91 97 00 	lds	r31, 0x0097
    22ba:	09 95       	icall
		}
	}
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	0f 90       	pop	r0
    22de:	1f 90       	pop	r1
    22e0:	18 95       	reti

000022e2 <__vector_7>:

	/*TIMER1 CTCA Mode ISR*/
	void __vector_7 (void)		__attribute__((signal)) ;
	void __vector_7 (void)
	{
    22e2:	1f 92       	push	r1
    22e4:	0f 92       	push	r0
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	0f 92       	push	r0
    22ea:	11 24       	eor	r1, r1
    22ec:	2f 93       	push	r18
    22ee:	3f 93       	push	r19
    22f0:	4f 93       	push	r20
    22f2:	5f 93       	push	r21
    22f4:	6f 93       	push	r22
    22f6:	7f 93       	push	r23
    22f8:	8f 93       	push	r24
    22fa:	9f 93       	push	r25
    22fc:	af 93       	push	r26
    22fe:	bf 93       	push	r27
    2300:	ef 93       	push	r30
    2302:	ff 93       	push	r31
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    230c:	80 91 94 00 	lds	r24, 0x0094
    2310:	90 91 95 00 	lds	r25, 0x0095
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	29 f0       	breq	.+10     	; 0x2322 <__vector_7+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    2318:	e0 91 94 00 	lds	r30, 0x0094
    231c:	f0 91 95 00 	lds	r31, 0x0095
    2320:	09 95       	icall
		}
	}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	7f 91       	pop	r23
    2334:	6f 91       	pop	r22
    2336:	5f 91       	pop	r21
    2338:	4f 91       	pop	r20
    233a:	3f 91       	pop	r19
    233c:	2f 91       	pop	r18
    233e:	0f 90       	pop	r0
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	0f 90       	pop	r0
    2344:	1f 90       	pop	r1
    2346:	18 95       	reti

00002348 <__vector_6>:

	/*TIMER1 ICU ISR*/
	void __vector_6 (void)		__attribute__((signal)) ;
	void __vector_6 (void)
	{
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	2f 93       	push	r18
    2354:	3f 93       	push	r19
    2356:	4f 93       	push	r20
    2358:	5f 93       	push	r21
    235a:	6f 93       	push	r22
    235c:	7f 93       	push	r23
    235e:	8f 93       	push	r24
    2360:	9f 93       	push	r25
    2362:	af 93       	push	r26
    2364:	bf 93       	push	r27
    2366:	ef 93       	push	r30
    2368:	ff 93       	push	r31
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    2372:	80 91 92 00 	lds	r24, 0x0092
    2376:	90 91 93 00 	lds	r25, 0x0093
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	29 f0       	breq	.+10     	; 0x2388 <__vector_6+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    237e:	e0 91 92 00 	lds	r30, 0x0092
    2382:	f0 91 93 00 	lds	r31, 0x0093
    2386:	09 95       	icall
		}
	}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	ff 91       	pop	r31
    238e:	ef 91       	pop	r30
    2390:	bf 91       	pop	r27
    2392:	af 91       	pop	r26
    2394:	9f 91       	pop	r25
    2396:	8f 91       	pop	r24
    2398:	7f 91       	pop	r23
    239a:	6f 91       	pop	r22
    239c:	5f 91       	pop	r21
    239e:	4f 91       	pop	r20
    23a0:	3f 91       	pop	r19
    23a2:	2f 91       	pop	r18
    23a4:	0f 90       	pop	r0
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	0f 90       	pop	r0
    23aa:	1f 90       	pop	r1
    23ac:	18 95       	reti

000023ae <__vector_5>:

	/*TIMER2 Normal Mode ISR*/
	void __vector_5 (void)		__attribute__((signal)) ;
	void __vector_5 (void)
	{
    23ae:	1f 92       	push	r1
    23b0:	0f 92       	push	r0
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	0f 92       	push	r0
    23b6:	11 24       	eor	r1, r1
    23b8:	2f 93       	push	r18
    23ba:	3f 93       	push	r19
    23bc:	4f 93       	push	r20
    23be:	5f 93       	push	r21
    23c0:	6f 93       	push	r22
    23c2:	7f 93       	push	r23
    23c4:	8f 93       	push	r24
    23c6:	9f 93       	push	r25
    23c8:	af 93       	push	r26
    23ca:	bf 93       	push	r27
    23cc:	ef 93       	push	r30
    23ce:	ff 93       	push	r31
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    23d8:	80 91 90 00 	lds	r24, 0x0090
    23dc:	90 91 91 00 	lds	r25, 0x0091
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	29 f0       	breq	.+10     	; 0x23ee <__vector_5+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    23e4:	e0 91 90 00 	lds	r30, 0x0090
    23e8:	f0 91 91 00 	lds	r31, 0x0091
    23ec:	09 95       	icall
		}
	}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	bf 91       	pop	r27
    23f8:	af 91       	pop	r26
    23fa:	9f 91       	pop	r25
    23fc:	8f 91       	pop	r24
    23fe:	7f 91       	pop	r23
    2400:	6f 91       	pop	r22
    2402:	5f 91       	pop	r21
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <__vector_4>:

	/*TIMER2 CTC Mode ISR*/
	void __vector_4 (void)		__attribute__((signal)) ;
	void __vector_4 (void)
	{
    2414:	1f 92       	push	r1
    2416:	0f 92       	push	r0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	0f 92       	push	r0
    241c:	11 24       	eor	r1, r1
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	5f 93       	push	r21
    2426:	6f 93       	push	r22
    2428:	7f 93       	push	r23
    242a:	8f 93       	push	r24
    242c:	9f 93       	push	r25
    242e:	af 93       	push	r26
    2430:	bf 93       	push	r27
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
		if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    243e:	80 91 8e 00 	lds	r24, 0x008E
    2442:	90 91 8f 00 	lds	r25, 0x008F
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	29 f0       	breq	.+10     	; 0x2454 <__vector_4+0x40>
		{
			TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    244a:	e0 91 8e 00 	lds	r30, 0x008E
    244e:	f0 91 8f 00 	lds	r31, 0x008F
    2452:	09 95       	icall
		}
	}
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	ff 91       	pop	r31
    245a:	ef 91       	pop	r30
    245c:	bf 91       	pop	r27
    245e:	af 91       	pop	r26
    2460:	9f 91       	pop	r25
    2462:	8f 91       	pop	r24
    2464:	7f 91       	pop	r23
    2466:	6f 91       	pop	r22
    2468:	5f 91       	pop	r21
    246a:	4f 91       	pop	r20
    246c:	3f 91       	pop	r19
    246e:	2f 91       	pop	r18
    2470:	0f 90       	pop	r0
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	0f 90       	pop	r0
    2476:	1f 90       	pop	r1
    2478:	18 95       	reti

0000247a <__udivmodsi4>:
    247a:	a1 e2       	ldi	r26, 0x21	; 33
    247c:	1a 2e       	mov	r1, r26
    247e:	aa 1b       	sub	r26, r26
    2480:	bb 1b       	sub	r27, r27
    2482:	fd 01       	movw	r30, r26
    2484:	0d c0       	rjmp	.+26     	; 0x24a0 <__udivmodsi4_ep>

00002486 <__udivmodsi4_loop>:
    2486:	aa 1f       	adc	r26, r26
    2488:	bb 1f       	adc	r27, r27
    248a:	ee 1f       	adc	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	a2 17       	cp	r26, r18
    2490:	b3 07       	cpc	r27, r19
    2492:	e4 07       	cpc	r30, r20
    2494:	f5 07       	cpc	r31, r21
    2496:	20 f0       	brcs	.+8      	; 0x24a0 <__udivmodsi4_ep>
    2498:	a2 1b       	sub	r26, r18
    249a:	b3 0b       	sbc	r27, r19
    249c:	e4 0b       	sbc	r30, r20
    249e:	f5 0b       	sbc	r31, r21

000024a0 <__udivmodsi4_ep>:
    24a0:	66 1f       	adc	r22, r22
    24a2:	77 1f       	adc	r23, r23
    24a4:	88 1f       	adc	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	1a 94       	dec	r1
    24aa:	69 f7       	brne	.-38     	; 0x2486 <__udivmodsi4_loop>
    24ac:	60 95       	com	r22
    24ae:	70 95       	com	r23
    24b0:	80 95       	com	r24
    24b2:	90 95       	com	r25
    24b4:	9b 01       	movw	r18, r22
    24b6:	ac 01       	movw	r20, r24
    24b8:	bd 01       	movw	r22, r26
    24ba:	cf 01       	movw	r24, r30
    24bc:	08 95       	ret

000024be <__prologue_saves__>:
    24be:	2f 92       	push	r2
    24c0:	3f 92       	push	r3
    24c2:	4f 92       	push	r4
    24c4:	5f 92       	push	r5
    24c6:	6f 92       	push	r6
    24c8:	7f 92       	push	r7
    24ca:	8f 92       	push	r8
    24cc:	9f 92       	push	r9
    24ce:	af 92       	push	r10
    24d0:	bf 92       	push	r11
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	ca 1b       	sub	r28, r26
    24e8:	db 0b       	sbc	r29, r27
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	09 94       	ijmp

000024f6 <__epilogue_restores__>:
    24f6:	2a 88       	ldd	r2, Y+18	; 0x12
    24f8:	39 88       	ldd	r3, Y+17	; 0x11
    24fa:	48 88       	ldd	r4, Y+16	; 0x10
    24fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    24fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2500:	7d 84       	ldd	r7, Y+13	; 0x0d
    2502:	8c 84       	ldd	r8, Y+12	; 0x0c
    2504:	9b 84       	ldd	r9, Y+11	; 0x0b
    2506:	aa 84       	ldd	r10, Y+10	; 0x0a
    2508:	b9 84       	ldd	r11, Y+9	; 0x09
    250a:	c8 84       	ldd	r12, Y+8	; 0x08
    250c:	df 80       	ldd	r13, Y+7	; 0x07
    250e:	ee 80       	ldd	r14, Y+6	; 0x06
    2510:	fd 80       	ldd	r15, Y+5	; 0x05
    2512:	0c 81       	ldd	r16, Y+4	; 0x04
    2514:	1b 81       	ldd	r17, Y+3	; 0x03
    2516:	aa 81       	ldd	r26, Y+2	; 0x02
    2518:	b9 81       	ldd	r27, Y+1	; 0x01
    251a:	ce 0f       	add	r28, r30
    251c:	d1 1d       	adc	r29, r1
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	ed 01       	movw	r28, r26
    252a:	08 95       	ret

0000252c <_exit>:
    252c:	f8 94       	cli

0000252e <__stop_program>:
    252e:	ff cf       	rjmp	.-2      	; 0x252e <__stop_program>
