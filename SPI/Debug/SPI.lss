
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  00000ca0  2**0
                  ALLOC
  2 .stab         00000fe4  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000794  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  74:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	72 c0       	rjmp	.+228    	; 0x18c <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	49 f1       	breq	.+82     	; 0x10e <DIO_u8SetPinValue+0x92>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	61 f0       	breq	.+24     	; 0xe6 <DIO_u8SetPinValue+0x6a>
  ce:	5b c0       	rjmp	.+182    	; 0x186 <DIO_u8SetPinValue+0x10a>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	71 f1       	breq	.+92     	; 0x136 <DIO_u8SetPinValue+0xba>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	e9 f1       	breq	.+122    	; 0x15e <DIO_u8SetPinValue+0xe2>
  e4:	50 c0       	rjmp	.+160    	; 0x186 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
  e6:	ab e3       	ldi	r26, 0x3B	; 59
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	eb e3       	ldi	r30, 0x3B	; 59
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x88>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x84>
 108:	84 2b       	or	r24, r20
 10a:	8c 93       	st	X, r24
 10c:	bf c0       	rjmp	.+382    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
 10e:	a8 e3       	ldi	r26, 0x38	; 56
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e8 e3       	ldi	r30, 0x38	; 56
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8SetPinValue+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8SetPinValue+0xac>
 130:	84 2b       	or	r24, r20
 132:	8c 93       	st	X, r24
 134:	ab c0       	rjmp	.+342    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
 136:	a5 e3       	ldi	r26, 0x35	; 53
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e5 e3       	ldi	r30, 0x35	; 53
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinValue+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinValue+0xd4>
 158:	84 2b       	or	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	97 c0       	rjmp	.+302    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
 15e:	a2 e3       	ldi	r26, 0x32	; 50
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e2 e3       	ldi	r30, 0x32	; 50
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinValue+0x100>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinValue+0xfc>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	83 c0       	rjmp	.+262    	; 0x28c <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	80 c0       	rjmp	.+256    	; 0x28c <DIO_u8SetPinValue+0x210>

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	88 23       	and	r24, r24
 190:	09 f0       	breq	.+2      	; 0x194 <DIO_u8SetPinValue+0x118>
 192:	77 c0       	rjmp	.+238    	; 0x282 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	3e 83       	std	Y+6, r19	; 0x06
 19c:	2d 83       	std	Y+5, r18	; 0x05
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	9e 81       	ldd	r25, Y+6	; 0x06
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	59 f1       	breq	.+86     	; 0x1fe <DIO_u8SetPinValue+0x182>
 1a8:	2d 81       	ldd	r18, Y+5	; 0x05
 1aa:	3e 81       	ldd	r19, Y+6	; 0x06
 1ac:	22 30       	cpi	r18, 0x02	; 2
 1ae:	31 05       	cpc	r19, r1
 1b0:	2c f4       	brge	.+10     	; 0x1bc <DIO_u8SetPinValue+0x140>
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	9e 81       	ldd	r25, Y+6	; 0x06
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <DIO_u8SetPinValue+0x158>
 1ba:	60 c0       	rjmp	.+192    	; 0x27c <DIO_u8SetPinValue+0x200>
 1bc:	2d 81       	ldd	r18, Y+5	; 0x05
 1be:	3e 81       	ldd	r19, Y+6	; 0x06
 1c0:	22 30       	cpi	r18, 0x02	; 2
 1c2:	31 05       	cpc	r19, r1
 1c4:	89 f1       	breq	.+98     	; 0x228 <DIO_u8SetPinValue+0x1ac>
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	91 05       	cpc	r25, r1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_u8SetPinValue+0x156>
 1d0:	40 c0       	rjmp	.+128    	; 0x252 <DIO_u8SetPinValue+0x1d6>
 1d2:	54 c0       	rjmp	.+168    	; 0x27c <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
 1d4:	ab e3       	ldi	r26, 0x3B	; 59
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	eb e3       	ldi	r30, 0x3B	; 59
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x176>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x172>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	47 c0       	rjmp	.+142    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
 1fe:	a8 e3       	ldi	r26, 0x38	; 56
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e8 e3       	ldi	r30, 0x38	; 56
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_u8SetPinValue+0x1a0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_u8SetPinValue+0x19c>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
 226:	32 c0       	rjmp	.+100    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
 228:	a5 e3       	ldi	r26, 0x35	; 53
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e5 e3       	ldi	r30, 0x35	; 53
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_u8SetPinValue+0x1c6>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
 250:	1d c0       	rjmp	.+58     	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
 252:	a2 e3       	ldi	r26, 0x32	; 50
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e2 e3       	ldi	r30, 0x32	; 50
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_u8SetPinValue+0x1f4>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_u8SetPinValue+0x1f0>
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}

		else
		{
			Local_u8ErrorState=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortValue+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_u8SetPortValue+0x5c>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_u8SetPortValue+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_u8SetPortValue+0x52>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_u8SetPortValue+0x7a>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8SetPortValue+0x66>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_u8SetPortValue+0x70>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 2fc:	e8 e3       	ldi	r30, 0x38	; 56
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 306:	e5 e3       	ldi	r30, 0x35	; 53
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
 30e:	07 c0       	rjmp	.+14     	; 0x31e <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 310:	e2 e3       	ldi	r30, 0x32	; 50
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	80 83       	st	Z, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState=1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	27 97       	sbiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	6b 83       	std	Y+3, r22	; 0x03
 348:	5d 83       	std	Y+5, r21	; 0x05
 34a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 34c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	9d 81       	ldd	r25, Y+5	; 0x05
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_u8GetPinValue+0x28>
 356:	78 c0       	rjmp	.+240    	; 0x448 <DIO_u8GetPinValue+0x118>
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	88 30       	cpi	r24, 0x08	; 8
 35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_u8GetPinValue+0x30>
 35e:	74 c0       	rjmp	.+232    	; 0x448 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3f 83       	std	Y+7, r19	; 0x07
 368:	2e 83       	std	Y+6, r18	; 0x06
 36a:	4e 81       	ldd	r20, Y+6	; 0x06
 36c:	5f 81       	ldd	r21, Y+7	; 0x07
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	51 05       	cpc	r21, r1
 372:	59 f1       	breq	.+86     	; 0x3ca <DIO_u8GetPinValue+0x9a>
 374:	8e 81       	ldd	r24, Y+6	; 0x06
 376:	9f 81       	ldd	r25, Y+7	; 0x07
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	34 f4       	brge	.+12     	; 0x38a <DIO_u8GetPinValue+0x5a>
 37e:	2e 81       	ldd	r18, Y+6	; 0x06
 380:	3f 81       	ldd	r19, Y+7	; 0x07
 382:	21 15       	cp	r18, r1
 384:	31 05       	cpc	r19, r1
 386:	69 f0       	breq	.+26     	; 0x3a2 <DIO_u8GetPinValue+0x72>
 388:	5c c0       	rjmp	.+184    	; 0x442 <DIO_u8GetPinValue+0x112>
 38a:	4e 81       	ldd	r20, Y+6	; 0x06
 38c:	5f 81       	ldd	r21, Y+7	; 0x07
 38e:	42 30       	cpi	r20, 0x02	; 2
 390:	51 05       	cpc	r21, r1
 392:	79 f1       	breq	.+94     	; 0x3f2 <DIO_u8GetPinValue+0xc2>
 394:	8e 81       	ldd	r24, Y+6	; 0x06
 396:	9f 81       	ldd	r25, Y+7	; 0x07
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	91 05       	cpc	r25, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_u8GetPinValue+0x70>
 39e:	3d c0       	rjmp	.+122    	; 0x41a <DIO_u8GetPinValue+0xea>
 3a0:	50 c0       	rjmp	.+160    	; 0x442 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
 3a2:	e9 e3       	ldi	r30, 0x39	; 57
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a9 01       	movw	r20, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_u8GetPinValue+0x8a>
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_u8GetPinValue+0x86>
 3be:	ca 01       	movw	r24, r20
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	ec 81       	ldd	r30, Y+4	; 0x04
 3c4:	fd 81       	ldd	r31, Y+5	; 0x05
 3c6:	80 83       	st	Z, r24
 3c8:	41 c0       	rjmp	.+130    	; 0x44c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
 3ca:	e6 e3       	ldi	r30, 0x36	; 54
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8GetPinValue+0xb2>
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8GetPinValue+0xae>
 3e6:	ca 01       	movw	r24, r20
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	ec 81       	ldd	r30, Y+4	; 0x04
 3ec:	fd 81       	ldd	r31, Y+5	; 0x05
 3ee:	80 83       	st	Z, r24
 3f0:	2d c0       	rjmp	.+90     	; 0x44c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
 3f2:	e3 e3       	ldi	r30, 0x33	; 51
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a9 01       	movw	r20, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8GetPinValue+0xda>
 406:	55 95       	asr	r21
 408:	47 95       	ror	r20
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8GetPinValue+0xd6>
 40e:	ca 01       	movw	r24, r20
 410:	81 70       	andi	r24, 0x01	; 1
 412:	ec 81       	ldd	r30, Y+4	; 0x04
 414:	fd 81       	ldd	r31, Y+5	; 0x05
 416:	80 83       	st	Z, r24
 418:	19 c0       	rjmp	.+50     	; 0x44c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
 41a:	e0 e3       	ldi	r30, 0x30	; 48
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a9 01       	movw	r20, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8GetPinValue+0x102>
 42e:	55 95       	asr	r21
 430:	47 95       	ror	r20
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8GetPinValue+0xfe>
 436:	ca 01       	movw	r24, r20
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	ec 81       	ldd	r30, Y+4	; 0x04
 43c:	fd 81       	ldd	r31, Y+5	; 0x05
 43e:	80 83       	st	Z, r24
 440:	05 c0       	rjmp	.+10     	; 0x44c <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorState=1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	27 96       	adiw	r28, 0x07	; 7
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,SREG_I);
 468:	af e5       	ldi	r26, 0x5F	; 95
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	ef e5       	ldi	r30, 0x5F	; 95
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 68       	ori	r24, 0x80	; 128
 474:	8c 93       	st	X, r24
}
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <GIE_voidDisable>:

void GIE_voidDisable(void)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,SREG_I);
 484:	af e5       	ldi	r26, 0x5F	; 95
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	ef e5       	ldi	r30, 0x5F	; 95
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8f 77       	andi	r24, 0x7F	; 127
 490:	8c 93       	st	X, r24
}
 492:	cf 91       	pop	r28
 494:	df 91       	pop	r29
 496:	08 95       	ret

00000498 <PORT_voidInIt>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
 4a0:	ea e3       	ldi	r30, 0x3A	; 58
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 ee       	ldi	r24, 0xE0	; 224
 4a6:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
 4a8:	e7 e3       	ldi	r30, 0x37	; 55
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	10 82       	st	Z, r1
    DDRC = PORTC_DIR;
 4ae:	e4 e3       	ldi	r30, 0x34	; 52
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
 4b6:	e1 e3       	ldi	r30, 0x31	; 49
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	80 83       	st	Z, r24

    PORTA = PORTA_INITIAL_VALUE;
 4be:	eb e3       	ldi	r30, 0x3B	; 59
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	10 82       	st	Z, r1
    PORTB = PORTB_INITIAL_VALUE;
 4c4:	e8 e3       	ldi	r30, 0x38	; 56
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	10 82       	st	Z, r1
    PORTC = PORTC_INITIAL_VALUE;
 4ca:	e5 e3       	ldi	r30, 0x35	; 53
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	10 82       	st	Z, r1
    PORTD = PORTD_INITIAL_VALUE;
 4d0:	e2 e3       	ldi	r30, 0x32	; 50
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	10 82       	st	Z, r1
}
 4d6:	cf 91       	pop	r28
 4d8:	df 91       	pop	r29
 4da:	08 95       	ret

000004dc <main>:
 *      Author: moali
 */


void main(void)
{
 4dc:	df 93       	push	r29
 4de:	cf 93       	push	r28
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <main+0x8>

000004e6 <SPI_VoidInit>:


//-------------------------------------------------------------------------------------------------------------------------------

void SPI_VoidInit(void)
{
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD);
 4ee:	ad e2       	ldi	r26, 0x2D	; 45
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ed e2       	ldi	r30, 0x2D	; 45
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	8f 7d       	andi	r24, 0xDF	; 223
 4fa:	8c 93       	st	X, r24
		#error "wrong SPI_DATA_ORDER config"
	#endif

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
 4fc:	ad e2       	ldi	r26, 0x2D	; 45
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	ed e2       	ldi	r30, 0x2D	; 45
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	80 61       	ori	r24, 0x10	; 16
 508:	8c 93       	st	X, r24
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
 50a:	ad e2       	ldi	r26, 0x2D	; 45
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	ed e2       	ldi	r30, 0x2D	; 45
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	87 7f       	andi	r24, 0xF7	; 247
 516:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
 518:	ad e2       	ldi	r26, 0x2D	; 45
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	ed e2       	ldi	r30, 0x2D	; 45
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	8b 7f       	andi	r24, 0xFB	; 251
 524:	8c 93       	st	X, r24
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
 526:	ad e2       	ldi	r26, 0x2D	; 45
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	ed e2       	ldi	r30, 0x2D	; 45
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	81 60       	ori	r24, 0x01	; 1
 532:	8c 93       	st	X, r24
		CLR_BIT(SPCR , SPCR_SPR1) ;
 534:	ad e2       	ldi	r26, 0x2D	; 45
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	ed e2       	ldi	r30, 0x2D	; 45
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8d 7f       	andi	r24, 0xFD	; 253
 540:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X) ;
 542:	ae e2       	ldi	r26, 0x2E	; 46
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	ee e2       	ldi	r30, 0x2E	; 46
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	8e 7f       	andi	r24, 0xFE	; 254
 54e:	8c 93       	st	X, r24
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
 550:	ad e2       	ldi	r26, 0x2D	; 45
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	ed e2       	ldi	r30, 0x2D	; 45
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	8f 77       	andi	r24, 0x7F	; 127
 55c:	8c 93       	st	X, r24

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
 55e:	ad e2       	ldi	r26, 0x2D	; 45
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	ed e2       	ldi	r30, 0x2D	; 45
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	80 64       	ori	r24, 0x40	; 64
 56a:	8c 93       	st	X, r24
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
 56c:	cf 91       	pop	r28
 56e:	df 91       	pop	r29
 570:	08 95       	ret

00000572 <SPI_u8InitConfig>:
			
		
*/

u8 SPI_u8InitConfig (SPI_CONFIG * spi)
{
 572:	df 93       	push	r29
 574:	cf 93       	push	r28
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	61 97       	sbiw	r28, 0x11	; 17
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	de bf       	out	0x3e, r29	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	cd bf       	out	0x3d, r28	; 61
 586:	9b 83       	std	Y+3, r25	; 0x03
 588:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
 58a:	85 e0       	ldi	r24, 0x05	; 5
 58c:	89 83       	std	Y+1, r24	; 0x01

	if ((spi != NULL) && (spi->SPI_u8ClockPhase != NULL) && (spi->SPI_u8ClockPolarity != NULL) && (spi->SPI_u8ClockRate != NULL) && (spi->SPI_u8DataOrder != NULL) && (spi->SPI_u8InterruptEnable != NULL) && (spi->SPI_u8MasterSlaveSelect != NULL) && (spi->SPI_u8SPIEnable != NULL))
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	9b 81       	ldd	r25, Y+3	; 0x03
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	09 f4       	brne	.+2      	; 0x598 <SPI_u8InitConfig+0x26>
 596:	cd c1       	rjmp	.+922    	; 0x932 <__stack+0xd3>
 598:	ea 81       	ldd	r30, Y+2	; 0x02
 59a:	fb 81       	ldd	r31, Y+3	; 0x03
 59c:	85 81       	ldd	r24, Z+5	; 0x05
 59e:	88 23       	and	r24, r24
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <SPI_u8InitConfig+0x32>
 5a2:	c7 c1       	rjmp	.+910    	; 0x932 <__stack+0xd3>
 5a4:	ea 81       	ldd	r30, Y+2	; 0x02
 5a6:	fb 81       	ldd	r31, Y+3	; 0x03
 5a8:	84 81       	ldd	r24, Z+4	; 0x04
 5aa:	88 23       	and	r24, r24
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <SPI_u8InitConfig+0x3e>
 5ae:	c1 c1       	rjmp	.+898    	; 0x932 <__stack+0xd3>
 5b0:	ea 81       	ldd	r30, Y+2	; 0x02
 5b2:	fb 81       	ldd	r31, Y+3	; 0x03
 5b4:	86 81       	ldd	r24, Z+6	; 0x06
 5b6:	88 23       	and	r24, r24
 5b8:	09 f4       	brne	.+2      	; 0x5bc <SPI_u8InitConfig+0x4a>
 5ba:	bb c1       	rjmp	.+886    	; 0x932 <__stack+0xd3>
 5bc:	ea 81       	ldd	r30, Y+2	; 0x02
 5be:	fb 81       	ldd	r31, Y+3	; 0x03
 5c0:	82 81       	ldd	r24, Z+2	; 0x02
 5c2:	88 23       	and	r24, r24
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <SPI_u8InitConfig+0x56>
 5c6:	b5 c1       	rjmp	.+874    	; 0x932 <__stack+0xd3>
 5c8:	ea 81       	ldd	r30, Y+2	; 0x02
 5ca:	fb 81       	ldd	r31, Y+3	; 0x03
 5cc:	80 81       	ld	r24, Z
 5ce:	88 23       	and	r24, r24
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <SPI_u8InitConfig+0x62>
 5d2:	af c1       	rjmp	.+862    	; 0x932 <__stack+0xd3>
 5d4:	ea 81       	ldd	r30, Y+2	; 0x02
 5d6:	fb 81       	ldd	r31, Y+3	; 0x03
 5d8:	83 81       	ldd	r24, Z+3	; 0x03
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <SPI_u8InitConfig+0x6e>
 5de:	a9 c1       	rjmp	.+850    	; 0x932 <__stack+0xd3>
 5e0:	ea 81       	ldd	r30, Y+2	; 0x02
 5e2:	fb 81       	ldd	r31, Y+3	; 0x03
 5e4:	81 81       	ldd	r24, Z+1	; 0x01
 5e6:	88 23       	and	r24, r24
 5e8:	09 f4       	brne	.+2      	; 0x5ec <SPI_u8InitConfig+0x7a>
 5ea:	a3 c1       	rjmp	.+838    	; 0x932 <__stack+0xd3>
	{
		switch (spi->SPI_u8ClockPhase)
 5ec:	ea 81       	ldd	r30, Y+2	; 0x02
 5ee:	fb 81       	ldd	r31, Y+3	; 0x03
 5f0:	85 81       	ldd	r24, Z+5	; 0x05
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	39 8b       	std	Y+17, r19	; 0x11
 5f8:	28 8b       	std	Y+16, r18	; 0x10
 5fa:	88 89       	ldd	r24, Y+16	; 0x10
 5fc:	99 89       	ldd	r25, Y+17	; 0x11
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	31 f0       	breq	.+12     	; 0x60e <SPI_u8InitConfig+0x9c>
 602:	28 89       	ldd	r18, Y+16	; 0x10
 604:	39 89       	ldd	r19, Y+17	; 0x11
 606:	21 30       	cpi	r18, 0x01	; 1
 608:	31 05       	cpc	r19, r1
 60a:	49 f0       	breq	.+18     	; 0x61e <SPI_u8InitConfig+0xac>
 60c:	10 c0       	rjmp	.+32     	; 0x62e <SPI_u8InitConfig+0xbc>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING: CLR_BIT(SPCR , SPCR_CPHA) ; break ;
 60e:	ad e2       	ldi	r26, 0x2D	; 45
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ed e2       	ldi	r30, 0x2D	; 45
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	8b 7f       	andi	r24, 0xFB	; 251
 61a:	8c 93       	st	X, r24
 61c:	0a c0       	rjmp	.+20     	; 0x632 <SPI_u8InitConfig+0xc0>
		case SPI_SETUP_LEADING_SAMPLE_TRAILING: SET_BIT(SPCR , SPCR_CPHA) ; break ;
 61e:	ad e2       	ldi	r26, 0x2D	; 45
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	ed e2       	ldi	r30, 0x2D	; 45
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	84 60       	ori	r24, 0x04	; 4
 62a:	8c 93       	st	X, r24
 62c:	02 c0       	rjmp	.+4      	; 0x632 <SPI_u8InitConfig+0xc0>
		default: 								Local_u8ErrorState = NOK ; break ;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	89 83       	std	Y+1, r24	; 0x01
		}
		switch (spi->SPI_u8ClockPolarity)
 632:	ea 81       	ldd	r30, Y+2	; 0x02
 634:	fb 81       	ldd	r31, Y+3	; 0x03
 636:	84 81       	ldd	r24, Z+4	; 0x04
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	3f 87       	std	Y+15, r19	; 0x0f
 63e:	2e 87       	std	Y+14, r18	; 0x0e
 640:	8e 85       	ldd	r24, Y+14	; 0x0e
 642:	9f 85       	ldd	r25, Y+15	; 0x0f
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	31 f0       	breq	.+12     	; 0x654 <SPI_u8InitConfig+0xe2>
 648:	2e 85       	ldd	r18, Y+14	; 0x0e
 64a:	3f 85       	ldd	r19, Y+15	; 0x0f
 64c:	21 30       	cpi	r18, 0x01	; 1
 64e:	31 05       	cpc	r19, r1
 650:	49 f0       	breq	.+18     	; 0x664 <SPI_u8InitConfig+0xf2>
 652:	10 c0       	rjmp	.+32     	; 0x674 <SPI_u8InitConfig+0x102>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING: CLR_BIT(SPCR , SPCR_CPOL) ; break ;
 654:	ad e2       	ldi	r26, 0x2D	; 45
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	ed e2       	ldi	r30, 0x2D	; 45
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	87 7f       	andi	r24, 0xF7	; 247
 660:	8c 93       	st	X, r24
 662:	0a c0       	rjmp	.+20     	; 0x678 <SPI_u8InitConfig+0x106>
		case SPI_FALLING_LEADING_RISING_TRAILING: SET_BIT(SPCR , SPCR_CPOL) ; break ;
 664:	ad e2       	ldi	r26, 0x2D	; 45
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	ed e2       	ldi	r30, 0x2D	; 45
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	88 60       	ori	r24, 0x08	; 8
 670:	8c 93       	st	X, r24
 672:	02 c0       	rjmp	.+4      	; 0x678 <SPI_u8InitConfig+0x106>
		default:								  Local_u8ErrorState = NOK ; break ;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	89 83       	std	Y+1, r24	; 0x01
		}
		switch (spi->SPI_u8ClockRate)
 678:	ea 81       	ldd	r30, Y+2	; 0x02
 67a:	fb 81       	ldd	r31, Y+3	; 0x03
 67c:	86 81       	ldd	r24, Z+6	; 0x06
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	3d 87       	std	Y+13, r19	; 0x0d
 684:	2c 87       	std	Y+12, r18	; 0x0c
 686:	8c 85       	ldd	r24, Y+12	; 0x0c
 688:	9d 85       	ldd	r25, Y+13	; 0x0d
 68a:	83 30       	cpi	r24, 0x03	; 3
 68c:	91 05       	cpc	r25, r1
 68e:	09 f4       	brne	.+2      	; 0x692 <SPI_u8InitConfig+0x120>
 690:	6a c0       	rjmp	.+212    	; 0x766 <SPI_u8InitConfig+0x1f4>
 692:	2c 85       	ldd	r18, Y+12	; 0x0c
 694:	3d 85       	ldd	r19, Y+13	; 0x0d
 696:	24 30       	cpi	r18, 0x04	; 4
 698:	31 05       	cpc	r19, r1
 69a:	84 f4       	brge	.+32     	; 0x6bc <SPI_u8InitConfig+0x14a>
 69c:	8c 85       	ldd	r24, Y+12	; 0x0c
 69e:	9d 85       	ldd	r25, Y+13	; 0x0d
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	91 05       	cpc	r25, r1
 6a4:	a1 f1       	breq	.+104    	; 0x70e <SPI_u8InitConfig+0x19c>
 6a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 6a8:	3d 85       	ldd	r19, Y+13	; 0x0d
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	0c f0       	brlt	.+2      	; 0x6b2 <SPI_u8InitConfig+0x140>
 6b0:	44 c0       	rjmp	.+136    	; 0x73a <SPI_u8InitConfig+0x1c8>
 6b2:	8c 85       	ldd	r24, Y+12	; 0x0c
 6b4:	9d 85       	ldd	r25, Y+13	; 0x0d
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	a1 f0       	breq	.+40     	; 0x6e2 <SPI_u8InitConfig+0x170>
 6ba:	ad c0       	rjmp	.+346    	; 0x816 <SPI_u8InitConfig+0x2a4>
 6bc:	2c 85       	ldd	r18, Y+12	; 0x0c
 6be:	3d 85       	ldd	r19, Y+13	; 0x0d
 6c0:	25 30       	cpi	r18, 0x05	; 5
 6c2:	31 05       	cpc	r19, r1
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <SPI_u8InitConfig+0x156>
 6c6:	7b c0       	rjmp	.+246    	; 0x7be <SPI_u8InitConfig+0x24c>
 6c8:	8c 85       	ldd	r24, Y+12	; 0x0c
 6ca:	9d 85       	ldd	r25, Y+13	; 0x0d
 6cc:	85 30       	cpi	r24, 0x05	; 5
 6ce:	91 05       	cpc	r25, r1
 6d0:	0c f4       	brge	.+2      	; 0x6d4 <SPI_u8InitConfig+0x162>
 6d2:	5f c0       	rjmp	.+190    	; 0x792 <SPI_u8InitConfig+0x220>
 6d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d6:	3d 85       	ldd	r19, Y+13	; 0x0d
 6d8:	26 30       	cpi	r18, 0x06	; 6
 6da:	31 05       	cpc	r19, r1
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <SPI_u8InitConfig+0x16e>
 6de:	85 c0       	rjmp	.+266    	; 0x7ea <SPI_u8InitConfig+0x278>
 6e0:	9a c0       	rjmp	.+308    	; 0x816 <SPI_u8InitConfig+0x2a4>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR , SPCR_SPR0) ;
 6e2:	ad e2       	ldi	r26, 0x2D	; 45
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	ed e2       	ldi	r30, 0x2D	; 45
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	8e 7f       	andi	r24, 0xFE	; 254
 6ee:	8c 93       	st	X, r24
			CLR_BIT(SPCR , SPCR_SPR1) ;
 6f0:	ad e2       	ldi	r26, 0x2D	; 45
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	ed e2       	ldi	r30, 0x2D	; 45
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	8d 7f       	andi	r24, 0xFD	; 253
 6fc:	8c 93       	st	X, r24
			SET_BIT(SPSR , SPSR_SPI2X) ;
 6fe:	ae e2       	ldi	r26, 0x2E	; 46
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	ee e2       	ldi	r30, 0x2E	; 46
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	8c 93       	st	X, r24
 70c:	86 c0       	rjmp	.+268    	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR , SPCR_SPR0) ;
 70e:	ad e2       	ldi	r26, 0x2D	; 45
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	ed e2       	ldi	r30, 0x2D	; 45
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	8e 7f       	andi	r24, 0xFE	; 254
 71a:	8c 93       	st	X, r24
			CLR_BIT(SPCR , SPCR_SPR1) ;
 71c:	ad e2       	ldi	r26, 0x2D	; 45
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	ed e2       	ldi	r30, 0x2D	; 45
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	8d 7f       	andi	r24, 0xFD	; 253
 728:	8c 93       	st	X, r24
			CLR_BIT(SPSR , SPSR_SPI2X) ;
 72a:	ae e2       	ldi	r26, 0x2E	; 46
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	ee e2       	ldi	r30, 0x2E	; 46
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8e 7f       	andi	r24, 0xFE	; 254
 736:	8c 93       	st	X, r24
 738:	70 c0       	rjmp	.+224    	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR , SPCR_SPR0) ;
 73a:	ad e2       	ldi	r26, 0x2D	; 45
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	ed e2       	ldi	r30, 0x2D	; 45
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	81 60       	ori	r24, 0x01	; 1
 746:	8c 93       	st	X, r24
			CLR_BIT(SPCR , SPCR_SPR1) ;
 748:	ad e2       	ldi	r26, 0x2D	; 45
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	ed e2       	ldi	r30, 0x2D	; 45
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	8d 7f       	andi	r24, 0xFD	; 253
 754:	8c 93       	st	X, r24
			SET_BIT(SPSR , SPSR_SPI2X) ;
 756:	ae e2       	ldi	r26, 0x2E	; 46
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	ee e2       	ldi	r30, 0x2E	; 46
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	81 60       	ori	r24, 0x01	; 1
 762:	8c 93       	st	X, r24
 764:	5a c0       	rjmp	.+180    	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR , SPCR_SPR0) ;
 766:	ad e2       	ldi	r26, 0x2D	; 45
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	ed e2       	ldi	r30, 0x2D	; 45
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	81 60       	ori	r24, 0x01	; 1
 772:	8c 93       	st	X, r24
			CLR_BIT(SPCR , SPCR_SPR1) ;
 774:	ad e2       	ldi	r26, 0x2D	; 45
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	ed e2       	ldi	r30, 0x2D	; 45
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8d 7f       	andi	r24, 0xFD	; 253
 780:	8c 93       	st	X, r24
			CLR_BIT(SPSR , SPSR_SPI2X) ;
 782:	ae e2       	ldi	r26, 0x2E	; 46
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	ee e2       	ldi	r30, 0x2E	; 46
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	8e 7f       	andi	r24, 0xFE	; 254
 78e:	8c 93       	st	X, r24
 790:	44 c0       	rjmp	.+136    	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR , SPCR_SPR0) ;
 792:	ad e2       	ldi	r26, 0x2D	; 45
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	ed e2       	ldi	r30, 0x2D	; 45
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	8e 7f       	andi	r24, 0xFE	; 254
 79e:	8c 93       	st	X, r24
			SET_BIT(SPCR , SPCR_SPR1) ;
 7a0:	ad e2       	ldi	r26, 0x2D	; 45
 7a2:	b0 e0       	ldi	r27, 0x00	; 0
 7a4:	ed e2       	ldi	r30, 0x2D	; 45
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	82 60       	ori	r24, 0x02	; 2
 7ac:	8c 93       	st	X, r24
			SET_BIT(SPSR , SPSR_SPI2X) ;
 7ae:	ae e2       	ldi	r26, 0x2E	; 46
 7b0:	b0 e0       	ldi	r27, 0x00	; 0
 7b2:	ee e2       	ldi	r30, 0x2E	; 46
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	81 60       	ori	r24, 0x01	; 1
 7ba:	8c 93       	st	X, r24
 7bc:	2e c0       	rjmp	.+92     	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR , SPCR_SPR0) ;
 7be:	ad e2       	ldi	r26, 0x2D	; 45
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	ed e2       	ldi	r30, 0x2D	; 45
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	8e 7f       	andi	r24, 0xFE	; 254
 7ca:	8c 93       	st	X, r24
			SET_BIT(SPCR , SPCR_SPR1) ;
 7cc:	ad e2       	ldi	r26, 0x2D	; 45
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	ed e2       	ldi	r30, 0x2D	; 45
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	82 60       	ori	r24, 0x02	; 2
 7d8:	8c 93       	st	X, r24
			CLR_BIT(SPSR , SPSR_SPI2X) ;
 7da:	ae e2       	ldi	r26, 0x2E	; 46
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	ee e2       	ldi	r30, 0x2E	; 46
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	8e 7f       	andi	r24, 0xFE	; 254
 7e6:	8c 93       	st	X, r24
 7e8:	18 c0       	rjmp	.+48     	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR , SPCR_SPR0) ;
 7ea:	ad e2       	ldi	r26, 0x2D	; 45
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	ed e2       	ldi	r30, 0x2D	; 45
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	8c 93       	st	X, r24
			SET_BIT(SPCR , SPCR_SPR1) ;
 7f8:	ad e2       	ldi	r26, 0x2D	; 45
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	ed e2       	ldi	r30, 0x2D	; 45
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	82 60       	ori	r24, 0x02	; 2
 804:	8c 93       	st	X, r24
			CLR_BIT(SPSR , SPSR_SPI2X) ;
 806:	ae e2       	ldi	r26, 0x2E	; 46
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	ee e2       	ldi	r30, 0x2E	; 46
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	8e 7f       	andi	r24, 0xFE	; 254
 812:	8c 93       	st	X, r24
 814:	02 c0       	rjmp	.+4      	; 0x81a <SPI_u8InitConfig+0x2a8>
			break ;
		default:
			Local_u8ErrorState = NOK ;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	89 83       	std	Y+1, r24	; 0x01
			break ;
		}
		switch (spi->SPI_u8DataOrder)
 81a:	ea 81       	ldd	r30, Y+2	; 0x02
 81c:	fb 81       	ldd	r31, Y+3	; 0x03
 81e:	82 81       	ldd	r24, Z+2	; 0x02
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	3b 87       	std	Y+11, r19	; 0x0b
 826:	2a 87       	std	Y+10, r18	; 0x0a
 828:	8a 85       	ldd	r24, Y+10	; 0x0a
 82a:	9b 85       	ldd	r25, Y+11	; 0x0b
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	69 f0       	breq	.+26     	; 0x84a <SPI_u8InitConfig+0x2d8>
 830:	2a 85       	ldd	r18, Y+10	; 0x0a
 832:	3b 85       	ldd	r19, Y+11	; 0x0b
 834:	21 30       	cpi	r18, 0x01	; 1
 836:	31 05       	cpc	r19, r1
 838:	81 f4       	brne	.+32     	; 0x85a <SPI_u8InitConfig+0x2e8>
		{
		case SPI_DATA_MSP_FIRST: CLR_BIT(SPCR , SPCR_DORD) ; break ;
 83a:	ad e2       	ldi	r26, 0x2D	; 45
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	ed e2       	ldi	r30, 0x2D	; 45
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	8f 7d       	andi	r24, 0xDF	; 223
 846:	8c 93       	st	X, r24
 848:	0a c0       	rjmp	.+20     	; 0x85e <SPI_u8InitConfig+0x2ec>
		case SPI_DATA_LSB_FIRST: SET_BIT(SPCR , SPCR_DORD) ; break ;
 84a:	ad e2       	ldi	r26, 0x2D	; 45
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	ed e2       	ldi	r30, 0x2D	; 45
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	80 62       	ori	r24, 0x20	; 32
 856:	8c 93       	st	X, r24
 858:	02 c0       	rjmp	.+4      	; 0x85e <SPI_u8InitConfig+0x2ec>
		default:				 Local_u8ErrorState = NOK ; break ;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	89 83       	std	Y+1, r24	; 0x01
		}
		switch (spi->SPI_u8MasterSlaveSelect)
 85e:	ea 81       	ldd	r30, Y+2	; 0x02
 860:	fb 81       	ldd	r31, Y+3	; 0x03
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	28 2f       	mov	r18, r24
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	39 87       	std	Y+9, r19	; 0x09
 86a:	28 87       	std	Y+8, r18	; 0x08
 86c:	88 85       	ldd	r24, Y+8	; 0x08
 86e:	99 85       	ldd	r25, Y+9	; 0x09
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	31 f0       	breq	.+12     	; 0x880 <__stack+0x21>
 874:	28 85       	ldd	r18, Y+8	; 0x08
 876:	39 85       	ldd	r19, Y+9	; 0x09
 878:	21 30       	cpi	r18, 0x01	; 1
 87a:	31 05       	cpc	r19, r1
 87c:	49 f0       	breq	.+18     	; 0x890 <__stack+0x31>
 87e:	10 c0       	rjmp	.+32     	; 0x8a0 <__stack+0x41>
		{
		case SPI_MASTER: SET_BIT(SPCR , SPCR_MSTR) ; break ;
 880:	ad e2       	ldi	r26, 0x2D	; 45
 882:	b0 e0       	ldi	r27, 0x00	; 0
 884:	ed e2       	ldi	r30, 0x2D	; 45
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	80 61       	ori	r24, 0x10	; 16
 88c:	8c 93       	st	X, r24
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <__stack+0x45>
		case SPI_SLAVE:  CLR_BIT(SPCR , SPCR_MSTR) ; break ;
 890:	ad e2       	ldi	r26, 0x2D	; 45
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	ed e2       	ldi	r30, 0x2D	; 45
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	8f 7e       	andi	r24, 0xEF	; 239
 89c:	8c 93       	st	X, r24
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
		default:		 Local_u8ErrorState = NOK ; break ;
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	89 83       	std	Y+1, r24	; 0x01
		}
		switch (spi->SPI_u8InterruptEnable)
 8a4:	ea 81       	ldd	r30, Y+2	; 0x02
 8a6:	fb 81       	ldd	r31, Y+3	; 0x03
 8a8:	80 81       	ld	r24, Z
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	3f 83       	std	Y+7, r19	; 0x07
 8b0:	2e 83       	std	Y+6, r18	; 0x06
 8b2:	8e 81       	ldd	r24, Y+6	; 0x06
 8b4:	9f 81       	ldd	r25, Y+7	; 0x07
 8b6:	00 97       	sbiw	r24, 0x00	; 0
 8b8:	31 f0       	breq	.+12     	; 0x8c6 <__stack+0x67>
 8ba:	2e 81       	ldd	r18, Y+6	; 0x06
 8bc:	3f 81       	ldd	r19, Y+7	; 0x07
 8be:	21 30       	cpi	r18, 0x01	; 1
 8c0:	31 05       	cpc	r19, r1
 8c2:	49 f0       	breq	.+18     	; 0x8d6 <__stack+0x77>
 8c4:	10 c0       	rjmp	.+32     	; 0x8e6 <__stack+0x87>
		{
		case SPI_INTERRUPT_DISABLE: CLR_BIT(SPCR , SPCR_SPIE) ; break ;
 8c6:	ad e2       	ldi	r26, 0x2D	; 45
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	ed e2       	ldi	r30, 0x2D	; 45
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	8f 77       	andi	r24, 0x7F	; 127
 8d2:	8c 93       	st	X, r24
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <__stack+0x8b>
		case SPI_INTERRUPT_ENABLE:  SET_BIT(SPCR , SPCR_SPIE) ; break ;
 8d6:	ad e2       	ldi	r26, 0x2D	; 45
 8d8:	b0 e0       	ldi	r27, 0x00	; 0
 8da:	ed e2       	ldi	r30, 0x2D	; 45
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	80 68       	ori	r24, 0x80	; 128
 8e2:	8c 93       	st	X, r24
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
		default:		 			Local_u8ErrorState = NOK ; break ;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	89 83       	std	Y+1, r24	; 0x01
		}
		switch (spi->SPI_u8SPIEnable)
 8ea:	ea 81       	ldd	r30, Y+2	; 0x02
 8ec:	fb 81       	ldd	r31, Y+3	; 0x03
 8ee:	81 81       	ldd	r24, Z+1	; 0x01
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	3d 83       	std	Y+5, r19	; 0x05
 8f6:	2c 83       	std	Y+4, r18	; 0x04
 8f8:	8c 81       	ldd	r24, Y+4	; 0x04
 8fa:	9d 81       	ldd	r25, Y+5	; 0x05
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	31 f0       	breq	.+12     	; 0x90c <__stack+0xad>
 900:	2c 81       	ldd	r18, Y+4	; 0x04
 902:	3d 81       	ldd	r19, Y+5	; 0x05
 904:	21 30       	cpi	r18, 0x01	; 1
 906:	31 05       	cpc	r19, r1
 908:	49 f0       	breq	.+18     	; 0x91c <__stack+0xbd>
 90a:	10 c0       	rjmp	.+32     	; 0x92c <__stack+0xcd>
		{
		case SPI_DISABLE: CLR_BIT(SPCR , SPCR_SPE) ; break ;
 90c:	ad e2       	ldi	r26, 0x2D	; 45
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	ed e2       	ldi	r30, 0x2D	; 45
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8f 7b       	andi	r24, 0xBF	; 191
 918:	8c 93       	st	X, r24
 91a:	0d c0       	rjmp	.+26     	; 0x936 <__stack+0xd7>
		case SPI_ENABLE:  SET_BIT(SPCR , SPCR_SPE) ; break ;
 91c:	ad e2       	ldi	r26, 0x2D	; 45
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	ed e2       	ldi	r30, 0x2D	; 45
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	80 64       	ori	r24, 0x40	; 64
 928:	8c 93       	st	X, r24
 92a:	05 c0       	rjmp	.+10     	; 0x936 <__stack+0xd7>
		default:		  Local_u8ErrorState = NOK ; break ;
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	89 83       	std	Y+1, r24	; 0x01
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 936:	89 81       	ldd	r24, Y+1	; 0x01
}
 938:	61 96       	adiw	r28, 0x11	; 17
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	cf 91       	pop	r28
 946:	df 91       	pop	r29
 948:	08 95       	ret

0000094a <SPI_u8Tranceive>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8Tranceive (u8 Copy_u8TData , u8 * Copy_u8RData)
{
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
 952:	28 97       	sbiw	r28, 0x08	; 8
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	f8 94       	cli
 958:	de bf       	out	0x3e, r29	; 62
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	cd bf       	out	0x3d, r28	; 61
 95e:	8e 83       	std	Y+6, r24	; 0x06
 960:	78 87       	std	Y+8, r23	; 0x08
 962:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK ;
 964:	85 e0       	ldi	r24, 0x05	; 5
 966:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_uint32TimeoutCounter = 0 ;
 968:	19 82       	std	Y+1, r1	; 0x01
 96a:	1a 82       	std	Y+2, r1	; 0x02
 96c:	1b 82       	std	Y+3, r1	; 0x03
 96e:	1c 82       	std	Y+4, r1	; 0x04

	if (SPI_u8State == IDLE)
 970:	80 91 66 00 	lds	r24, 0x0066
 974:	88 23       	and	r24, r24
 976:	e1 f5       	brne	.+120    	; 0x9f0 <SPI_u8Tranceive+0xa6>
	{
		SPI_u8State = BUSY ;
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	80 93 66 00 	sts	0x0066, r24

		SPDR = Copy_u8TData ;
 97e:	ef e2       	ldi	r30, 0x2F	; 47
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	8e 81       	ldd	r24, Y+6	; 0x06
 984:	80 83       	st	Z, r24
 986:	0b c0       	rjmp	.+22     	; 0x99e <SPI_u8Tranceive+0x54>

		while (((GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT))
		{
			Local_uint32TimeoutCounter++ ;
 988:	89 81       	ldd	r24, Y+1	; 0x01
 98a:	9a 81       	ldd	r25, Y+2	; 0x02
 98c:	ab 81       	ldd	r26, Y+3	; 0x03
 98e:	bc 81       	ldd	r27, Y+4	; 0x04
 990:	01 96       	adiw	r24, 0x01	; 1
 992:	a1 1d       	adc	r26, r1
 994:	b1 1d       	adc	r27, r1
 996:	89 83       	std	Y+1, r24	; 0x01
 998:	9a 83       	std	Y+2, r25	; 0x02
 99a:	ab 83       	std	Y+3, r26	; 0x03
 99c:	bc 83       	std	Y+4, r27	; 0x04
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8TData ;

		while (((GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT))
 99e:	ee e2       	ldi	r30, 0x2E	; 46
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	88 23       	and	r24, r24
 9a6:	64 f0       	brlt	.+24     	; 0x9c0 <SPI_u8Tranceive+0x76>
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	9a 81       	ldd	r25, Y+2	; 0x02
 9ac:	ab 81       	ldd	r26, Y+3	; 0x03
 9ae:	bc 81       	ldd	r27, Y+4	; 0x04
 9b0:	80 31       	cpi	r24, 0x10	; 16
 9b2:	27 e2       	ldi	r18, 0x27	; 39
 9b4:	92 07       	cpc	r25, r18
 9b6:	20 e0       	ldi	r18, 0x00	; 0
 9b8:	a2 07       	cpc	r26, r18
 9ba:	20 e0       	ldi	r18, 0x00	; 0
 9bc:	b2 07       	cpc	r27, r18
 9be:	20 f3       	brcs	.-56     	; 0x988 <SPI_u8Tranceive+0x3e>
		{
			Local_uint32TimeoutCounter++ ;
		}
		if (Local_uint32TimeoutCounter == SPI_uint32TIMEOUT)
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	9a 81       	ldd	r25, Y+2	; 0x02
 9c4:	ab 81       	ldd	r26, Y+3	; 0x03
 9c6:	bc 81       	ldd	r27, Y+4	; 0x04
 9c8:	80 31       	cpi	r24, 0x10	; 16
 9ca:	27 e2       	ldi	r18, 0x27	; 39
 9cc:	92 07       	cpc	r25, r18
 9ce:	20 e0       	ldi	r18, 0x00	; 0
 9d0:	a2 07       	cpc	r26, r18
 9d2:	20 e0       	ldi	r18, 0x00	; 0
 9d4:	b2 07       	cpc	r27, r18
 9d6:	19 f4       	brne	.+6      	; 0x9de <SPI_u8Tranceive+0x94>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	8d 83       	std	Y+5, r24	; 0x05
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <SPI_u8Tranceive+0xa0>
		}
		else
		{
			* Copy_u8RData = SPDR ;
 9de:	ef e2       	ldi	r30, 0x2F	; 47
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	ef 81       	ldd	r30, Y+7	; 0x07
 9e6:	f8 85       	ldd	r31, Y+8	; 0x08
 9e8:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE ;
 9ea:	10 92 66 00 	sts	0x0066, r1
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <SPI_u8Tranceive+0xaa>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 9f0:	83 e0       	ldi	r24, 0x03	; 3
 9f2:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState ;
 9f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
 9f6:	28 96       	adiw	r28, 0x08	; 8
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	cf 91       	pop	r28
 a04:	df 91       	pop	r29
 a06:	08 95       	ret

00000a08 <SPI_u8BufferTranceiverSynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverSynch (u8 * Copy_u8TData , u8 * Copy_u8RData , u8 Copy_u8BufferSize)
{
 a08:	df 93       	push	r29
 a0a:	cf 93       	push	r28
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
 a10:	27 97       	sbiw	r28, 0x07	; 7
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	9c 83       	std	Y+4, r25	; 0x04
 a1e:	8b 83       	std	Y+3, r24	; 0x03
 a20:	7e 83       	std	Y+6, r23	; 0x06
 a22:	6d 83       	std	Y+5, r22	; 0x05
 a24:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8ErrorState = OK ;
 a26:	85 e0       	ldi	r24, 0x05	; 5
 a28:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0 ;
 a2a:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	9c 81       	ldd	r25, Y+4	; 0x04
 a30:	00 97       	sbiw	r24, 0x00	; 0
 a32:	09 f1       	breq	.+66     	; 0xa76 <SPI_u8BufferTranceiverSynch+0x6e>
 a34:	8d 81       	ldd	r24, Y+5	; 0x05
 a36:	9e 81       	ldd	r25, Y+6	; 0x06
 a38:	00 97       	sbiw	r24, 0x00	; 0
 a3a:	e9 f0       	breq	.+58     	; 0xa76 <SPI_u8BufferTranceiverSynch+0x6e>
 a3c:	17 c0       	rjmp	.+46     	; 0xa6c <SPI_u8BufferTranceiverSynch+0x64>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter] , &Copy_u8RData[Local_u8Counter]) ;
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
 a40:	28 2f       	mov	r18, r24
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	8b 81       	ldd	r24, Y+3	; 0x03
 a46:	9c 81       	ldd	r25, Y+4	; 0x04
 a48:	fc 01       	movw	r30, r24
 a4a:	e2 0f       	add	r30, r18
 a4c:	f3 1f       	adc	r31, r19
 a4e:	40 81       	ld	r20, Z
 a50:	89 81       	ldd	r24, Y+1	; 0x01
 a52:	28 2f       	mov	r18, r24
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	8d 81       	ldd	r24, Y+5	; 0x05
 a58:	9e 81       	ldd	r25, Y+6	; 0x06
 a5a:	28 0f       	add	r18, r24
 a5c:	39 1f       	adc	r19, r25
 a5e:	84 2f       	mov	r24, r20
 a60:	b9 01       	movw	r22, r18
 a62:	0e 94 a5 04 	call	0x94a	; 0x94a <SPI_u8Tranceive>
			Local_u8Counter++ ;
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	8f 5f       	subi	r24, 0xFF	; 255
 a6a:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Local_u8ErrorState = OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
 a6c:	99 81       	ldd	r25, Y+1	; 0x01
 a6e:	8f 81       	ldd	r24, Y+7	; 0x07
 a70:	98 17       	cp	r25, r24
 a72:	28 f3       	brcs	.-54     	; 0xa3e <SPI_u8BufferTranceiverSynch+0x36>
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <SPI_u8BufferTranceiverSynch+0x72>
			Local_u8Counter++ ;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState ;
 a7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a7c:	27 96       	adiw	r28, 0x07	; 7
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	cd bf       	out	0x3d, r28	; 61
 a88:	cf 91       	pop	r28
 a8a:	df 91       	pop	r29
 a8c:	08 95       	ret

00000a8e <SPI_u8BufferTranceiverAsynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverAsynch (SPI_BUFFER * spi_buffer)
{
 a8e:	df 93       	push	r29
 a90:	cf 93       	push	r28
 a92:	00 d0       	rcall	.+0      	; 0xa94 <SPI_u8BufferTranceiverAsynch+0x6>
 a94:	0f 92       	push	r0
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	9b 83       	std	Y+3, r25	; 0x03
 a9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
 a9e:	85 e0       	ldi	r24, 0x05	; 5
 aa0:	89 83       	std	Y+1, r24	; 0x01

	if (SPI_u8State == IDLE)
 aa2:	80 91 66 00 	lds	r24, 0x0066
 aa6:	88 23       	and	r24, r24
 aa8:	09 f0       	breq	.+2      	; 0xaac <SPI_u8BufferTranceiverAsynch+0x1e>
 aaa:	55 c0       	rjmp	.+170    	; 0xb56 <SPI_u8BufferTranceiverAsynch+0xc8>
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
 aac:	8a 81       	ldd	r24, Y+2	; 0x02
 aae:	9b 81       	ldd	r25, Y+3	; 0x03
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	09 f4       	brne	.+2      	; 0xab6 <SPI_u8BufferTranceiverAsynch+0x28>
 ab4:	4d c0       	rjmp	.+154    	; 0xb50 <SPI_u8BufferTranceiverAsynch+0xc2>
 ab6:	ea 81       	ldd	r30, Y+2	; 0x02
 ab8:	fb 81       	ldd	r31, Y+3	; 0x03
 aba:	80 81       	ld	r24, Z
 abc:	91 81       	ldd	r25, Z+1	; 0x01
 abe:	00 97       	sbiw	r24, 0x00	; 0
 ac0:	09 f4       	brne	.+2      	; 0xac4 <SPI_u8BufferTranceiverAsynch+0x36>
 ac2:	46 c0       	rjmp	.+140    	; 0xb50 <SPI_u8BufferTranceiverAsynch+0xc2>
 ac4:	ea 81       	ldd	r30, Y+2	; 0x02
 ac6:	fb 81       	ldd	r31, Y+3	; 0x03
 ac8:	82 81       	ldd	r24, Z+2	; 0x02
 aca:	93 81       	ldd	r25, Z+3	; 0x03
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	09 f4       	brne	.+2      	; 0xad2 <SPI_u8BufferTranceiverAsynch+0x44>
 ad0:	3f c0       	rjmp	.+126    	; 0xb50 <SPI_u8BufferTranceiverAsynch+0xc2>
 ad2:	ea 81       	ldd	r30, Y+2	; 0x02
 ad4:	fb 81       	ldd	r31, Y+3	; 0x03
 ad6:	85 81       	ldd	r24, Z+5	; 0x05
 ad8:	96 81       	ldd	r25, Z+6	; 0x06
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	c9 f1       	breq	.+114    	; 0xb50 <SPI_u8BufferTranceiverAsynch+0xc2>
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY ;
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	80 93 66 00 	sts	0x0066, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData = spi_buffer->Copy_u8TData ;
 ae4:	ea 81       	ldd	r30, Y+2	; 0x02
 ae6:	fb 81       	ldd	r31, Y+3	; 0x03
 ae8:	80 81       	ld	r24, Z
 aea:	91 81       	ldd	r25, Z+1	; 0x01
 aec:	90 93 61 00 	sts	0x0061, r25
 af0:	80 93 60 00 	sts	0x0060, r24
			SPI_pu8RData = spi_buffer->Copy_u8RData ;
 af4:	ea 81       	ldd	r30, Y+2	; 0x02
 af6:	fb 81       	ldd	r31, Y+3	; 0x03
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	90 93 63 00 	sts	0x0063, r25
 b00:	80 93 62 00 	sts	0x0062, r24
			SPI_u8BufferSize = spi_buffer->Copy_u8BufferSize ;
 b04:	ea 81       	ldd	r30, Y+2	; 0x02
 b06:	fb 81       	ldd	r31, Y+3	; 0x03
 b08:	84 81       	ldd	r24, Z+4	; 0x04
 b0a:	80 93 67 00 	sts	0x0067, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn ;
 b0e:	ea 81       	ldd	r30, Y+2	; 0x02
 b10:	fb 81       	ldd	r31, Y+3	; 0x03
 b12:	85 81       	ldd	r24, Z+5	; 0x05
 b14:	96 81       	ldd	r25, Z+6	; 0x06
 b16:	90 93 65 00 	sts	0x0065, r25
 b1a:	80 93 64 00 	sts	0x0064, r24

			/*Set Index to first element*/
			SPI_u8Index = 0 ;
 b1e:	10 92 68 00 	sts	0x0068, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index] ;
 b22:	af e2       	ldi	r26, 0x2F	; 47
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	20 91 60 00 	lds	r18, 0x0060
 b2a:	30 91 61 00 	lds	r19, 0x0061
 b2e:	80 91 68 00 	lds	r24, 0x0068
 b32:	88 2f       	mov	r24, r24
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	f9 01       	movw	r30, r18
 b38:	e8 0f       	add	r30, r24
 b3a:	f9 1f       	adc	r31, r25
 b3c:	80 81       	ld	r24, Z
 b3e:	8c 93       	st	X, r24

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR , SPCR_SPIE) ;
 b40:	ad e2       	ldi	r26, 0x2D	; 45
 b42:	b0 e0       	ldi	r27, 0x00	; 0
 b44:	ed e2       	ldi	r30, 0x2D	; 45
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	80 81       	ld	r24, Z
 b4a:	80 68       	ori	r24, 0x80	; 128
 b4c:	8c 93       	st	X, r24
 b4e:	05 c0       	rjmp	.+10     	; 0xb5a <SPI_u8BufferTranceiverAsynch+0xcc>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER ;
 b50:	82 e0       	ldi	r24, 0x02	; 2
 b52:	89 83       	std	Y+1, r24	; 0x01
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <SPI_u8BufferTranceiverAsynch+0xcc>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
 b56:	83 e0       	ldi	r24, 0x03	; 3
 b58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
 b5c:	0f 90       	pop	r0
 b5e:	0f 90       	pop	r0
 b60:	0f 90       	pop	r0
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	08 95       	ret

00000b68 <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12 (void)		__attribute__ ((signal)) ;
void __vector_12 (void)
{
 b68:	1f 92       	push	r1
 b6a:	0f 92       	push	r0
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	0f 92       	push	r0
 b70:	11 24       	eor	r1, r1
 b72:	2f 93       	push	r18
 b74:	3f 93       	push	r19
 b76:	4f 93       	push	r20
 b78:	5f 93       	push	r21
 b7a:	6f 93       	push	r22
 b7c:	7f 93       	push	r23
 b7e:	8f 93       	push	r24
 b80:	9f 93       	push	r25
 b82:	af 93       	push	r26
 b84:	bf 93       	push	r27
 b86:	ef 93       	push	r30
 b88:	ff 93       	push	r31
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	cd b7       	in	r28, 0x3d	; 61
 b90:	de b7       	in	r29, 0x3e	; 62
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR ;
 b92:	20 91 62 00 	lds	r18, 0x0062
 b96:	30 91 63 00 	lds	r19, 0x0063
 b9a:	80 91 68 00 	lds	r24, 0x0068
 b9e:	88 2f       	mov	r24, r24
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	d9 01       	movw	r26, r18
 ba4:	a8 0f       	add	r26, r24
 ba6:	b9 1f       	adc	r27, r25
 ba8:	ef e2       	ldi	r30, 0x2F	; 47
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	80 81       	ld	r24, Z
 bae:	8c 93       	st	X, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++ ;
 bb0:	80 91 68 00 	lds	r24, 0x0068
 bb4:	8f 5f       	subi	r24, 0xFF	; 255
 bb6:	80 93 68 00 	sts	0x0068, r24

	if (SPI_u8Index == SPI_u8BufferSize)
 bba:	90 91 68 00 	lds	r25, 0x0068
 bbe:	80 91 67 00 	lds	r24, 0x0067
 bc2:	98 17       	cp	r25, r24
 bc4:	79 f4       	brne	.+30     	; 0xbe4 <__vector_12+0x7c>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE ;
 bc6:	10 92 66 00 	sts	0x0066, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR , SPCR_SPIE) ;
 bca:	ad e2       	ldi	r26, 0x2D	; 45
 bcc:	b0 e0       	ldi	r27, 0x00	; 0
 bce:	ed e2       	ldi	r30, 0x2D	; 45
 bd0:	f0 e0       	ldi	r31, 0x00	; 0
 bd2:	80 81       	ld	r24, Z
 bd4:	8f 77       	andi	r24, 0x7F	; 127
 bd6:	8c 93       	st	X, r24

		/*Call Notification Function*/
		SPI_pvNotificationFunc() ;
 bd8:	e0 91 64 00 	lds	r30, 0x0064
 bdc:	f0 91 65 00 	lds	r31, 0x0065
 be0:	09 95       	icall
 be2:	0f c0       	rjmp	.+30     	; 0xc02 <__vector_12+0x9a>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index] ;
 be4:	af e2       	ldi	r26, 0x2F	; 47
 be6:	b0 e0       	ldi	r27, 0x00	; 0
 be8:	20 91 60 00 	lds	r18, 0x0060
 bec:	30 91 61 00 	lds	r19, 0x0061
 bf0:	80 91 68 00 	lds	r24, 0x0068
 bf4:	88 2f       	mov	r24, r24
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	f9 01       	movw	r30, r18
 bfa:	e8 0f       	add	r30, r24
 bfc:	f9 1f       	adc	r31, r25
 bfe:	80 81       	ld	r24, Z
 c00:	8c 93       	st	X, r24
	}
}
 c02:	cf 91       	pop	r28
 c04:	df 91       	pop	r29
 c06:	ff 91       	pop	r31
 c08:	ef 91       	pop	r30
 c0a:	bf 91       	pop	r27
 c0c:	af 91       	pop	r26
 c0e:	9f 91       	pop	r25
 c10:	8f 91       	pop	r24
 c12:	7f 91       	pop	r23
 c14:	6f 91       	pop	r22
 c16:	5f 91       	pop	r21
 c18:	4f 91       	pop	r20
 c1a:	3f 91       	pop	r19
 c1c:	2f 91       	pop	r18
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	0f 90       	pop	r0
 c24:	1f 90       	pop	r1
 c26:	18 95       	reti

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
