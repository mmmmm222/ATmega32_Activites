
switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000009a8  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000875  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  64:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
	if(Copy_u8Pin<=DIO_u8PIN7)
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_u8SetPinValue+0x6>
  70:	8e c0       	rjmp	.+284    	; 0x18e <DIO_u8SetPinValue+0x122>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
  72:	41 30       	cpi	r20, 0x01	; 1
  74:	09 f0       	breq	.+2      	; 0x78 <DIO_u8SetPinValue+0xc>
  76:	42 c0       	rjmp	.+132    	; 0xfc <DIO_u8SetPinValue+0x90>
		{
			switch(Copy_u8Port)
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	b1 f0       	breq	.+44     	; 0xa8 <DIO_u8SetPinValue+0x3c>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	30 f0       	brcs	.+12     	; 0x8c <DIO_u8SetPinValue+0x20>
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	01 f1       	breq	.+64     	; 0xc4 <DIO_u8SetPinValue+0x58>
  84:	83 30       	cpi	r24, 0x03	; 3
  86:	09 f0       	breq	.+2      	; 0x8a <DIO_u8SetPinValue+0x1e>
  88:	82 c0       	rjmp	.+260    	; 0x18e <DIO_u8SetPinValue+0x122>
  8a:	2a c0       	rjmp	.+84     	; 0xe0 <DIO_u8SetPinValue+0x74>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
  8c:	eb e3       	ldi	r30, 0x3B	; 59
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	20 81       	ld	r18, Z
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <DIO_u8SetPinValue+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <DIO_u8SetPinValue+0x2c>
  a0:	28 2b       	or	r18, r24
  a2:	20 83       	st	Z, r18
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	08 95       	ret
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
  a8:	e8 e3       	ldi	r30, 0x38	; 56
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	20 81       	ld	r18, Z
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_u8SetPinValue+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_u8SetPinValue+0x48>
  bc:	28 2b       	or	r18, r24
  be:	20 83       	st	Z, r18
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	08 95       	ret
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
  c4:	e5 e3       	ldi	r30, 0x35	; 53
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	20 81       	ld	r18, Z
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_u8SetPinValue+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_u8SetPinValue+0x64>
  d8:	28 2b       	or	r18, r24
  da:	20 83       	st	Z, r18
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
  e0:	e2 e3       	ldi	r30, 0x32	; 50
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	20 81       	ld	r18, Z
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_u8SetPinValue+0x84>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_u8SetPinValue+0x80>
  f4:	28 2b       	or	r18, r24
  f6:	20 83       	st	Z, r18
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 95       	ret
				default : Local_u8ErrorState=1;

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
  fc:	44 23       	and	r20, r20
  fe:	09 f0       	breq	.+2      	; 0x102 <DIO_u8SetPinValue+0x96>
 100:	46 c0       	rjmp	.+140    	; 0x18e <DIO_u8SetPinValue+0x122>
		{
			switch(Copy_u8Port)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	b9 f0       	breq	.+46     	; 0x134 <DIO_u8SetPinValue+0xc8>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	30 f0       	brcs	.+12     	; 0x116 <DIO_u8SetPinValue+0xaa>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	11 f1       	breq	.+68     	; 0x152 <DIO_u8SetPinValue+0xe6>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	09 f0       	breq	.+2      	; 0x114 <DIO_u8SetPinValue+0xa8>
 112:	3d c0       	rjmp	.+122    	; 0x18e <DIO_u8SetPinValue+0x122>
 114:	2d c0       	rjmp	.+90     	; 0x170 <DIO_u8SetPinValue+0x104>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
 116:	eb e3       	ldi	r30, 0x3B	; 59
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	20 81       	ld	r18, Z
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_u8SetPinValue+0xba>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_u8SetPinValue+0xb6>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	80 83       	st	Z, r24
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
 134:	e8 e3       	ldi	r30, 0x38	; 56
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	20 81       	ld	r18, Z
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_u8SetPinValue+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_u8SetPinValue+0xd4>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	80 83       	st	Z, r24
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
 152:	e5 e3       	ldi	r30, 0x35	; 53
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	20 81       	ld	r18, Z
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_u8SetPinValue+0xf6>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_u8SetPinValue+0xf2>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	80 83       	st	Z, r24
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
 170:	e2 e3       	ldi	r30, 0x32	; 50
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	20 81       	ld	r18, Z
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_u8SetPinValue+0x114>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_u8SetPinValue+0x110>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	80 83       	st	Z, r24
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret
 18e:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 190:	08 95       	ret

00000192 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
	switch(Copy_u8Port)
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	59 f0       	breq	.+22     	; 0x1ac <DIO_u8SetPortValue+0x1a>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	30 f0       	brcs	.+12     	; 0x1a6 <DIO_u8SetPortValue+0x14>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_u8SetPortValue+0x20>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <DIO_u8SetPortValue+0x26>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 1a6:	6b bb       	out	0x1b, r22	; 27
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 1ac:	68 bb       	out	0x18, r22	; 24
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 1b2:	65 bb       	out	0x15, r22	; 21
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 1b8:	62 bb       	out	0x12, r22	; 18
 1ba:	80 e0       	ldi	r24, 0x00	; 0
		default : Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 1bc:	08 95       	ret

000001be <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 1be:	fa 01       	movw	r30, r20
	u8 Local_u8ErrorState=0;
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
 1c0:	41 15       	cp	r20, r1
 1c2:	51 05       	cpc	r21, r1
 1c4:	b9 f1       	breq	.+110    	; 0x234 <DIO_u8GetPinValue+0x76>
 1c6:	68 30       	cpi	r22, 0x08	; 8
 1c8:	a8 f5       	brcc	.+106    	; 0x234 <DIO_u8GetPinValue+0x76>
	{
		switch(Copy_u8Port)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 f0       	breq	.+36     	; 0x1f2 <DIO_u8GetPinValue+0x34>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	28 f0       	brcs	.+10     	; 0x1dc <DIO_u8GetPinValue+0x1e>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	c9 f0       	breq	.+50     	; 0x208 <DIO_u8GetPinValue+0x4a>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	69 f5       	brne	.+90     	; 0x234 <DIO_u8GetPinValue+0x76>
 1da:	21 c0       	rjmp	.+66     	; 0x21e <DIO_u8GetPinValue+0x60>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
 1dc:	89 b3       	in	r24, 0x19	; 25
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_u8GetPinValue+0x28>
 1e2:	95 95       	asr	r25
 1e4:	87 95       	ror	r24
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_u8GetPinValue+0x24>
 1ea:	81 70       	andi	r24, 0x01	; 1
 1ec:	80 83       	st	Z, r24
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
 1f2:	86 b3       	in	r24, 0x16	; 22
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_u8GetPinValue+0x3e>
 1f8:	95 95       	asr	r25
 1fa:	87 95       	ror	r24
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_u8GetPinValue+0x3a>
 200:	81 70       	andi	r24, 0x01	; 1
 202:	80 83       	st	Z, r24
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
 208:	83 b3       	in	r24, 0x13	; 19
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8GetPinValue+0x54>
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8GetPinValue+0x50>
 216:	81 70       	andi	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
 21e:	80 b3       	in	r24, 0x10	; 16
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_u8GetPinValue+0x6a>
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_u8GetPinValue+0x66>
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	80 83       	st	Z, r24
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
 234:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 236:	08 95       	ret

00000238 <PORT_voidInIt>:
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
    DDRA = PORTA_DIR;
 238:	1a ba       	out	0x1a, r1	; 26
    DDRB = PORTB_DIR;
 23a:	17 ba       	out	0x17, r1	; 23
    DDRC = PORTC_DIR;
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	84 bb       	out	0x14, r24	; 20
    DDRD = PORTD_DIR;
 240:	11 ba       	out	0x11, r1	; 17

    PORTA = PORTA_INITIAL_VALUE;
 242:	1b ba       	out	0x1b, r1	; 27
    PORTB = PORTB_INITIAL_VALUE;
 244:	18 ba       	out	0x18, r1	; 24
    PORTC = PORTC_INITIAL_VALUE;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	85 bb       	out	0x15, r24	; 21
    PORTD = PORTD_INITIAL_VALUE;
 24a:	12 ba       	out	0x12, r1	; 18
}
 24c:	08 95       	ret

0000024e <main>:
#include "PORT_interface.h"
#include "DIO_interface.h"
#include <util/delay.h>

void main(void)
{
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	PORT_voidInIt();
 256:	0e 94 1c 01 	call	0x238	; 0x238 <PORT_voidInIt>
	while(1)
	{
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_LOW);
 25a:	00 e1       	ldi	r16, 0x10	; 16
 25c:	17 e2       	ldi	r17, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25e:	c8 ec       	ldi	r28, 0xC8	; 200
 260:	d0 e0       	ldi	r29, 0x00	; 0
void main(void)
{
	PORT_voidInIt();
	while(1)
	{
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_LOW);
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 280:	98 01       	movw	r18, r16
 282:	ce 01       	movw	r24, r28
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28c:	d1 f7       	brne	.-12     	; 0x282 <main+0x34>
		_delay_ms(1000);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_HIGH);
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 2ac:	98 01       	movw	r18, r16
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b8:	d1 f7       	brne	.-12     	; 0x2ae <main+0x60>
 2ba:	d3 cf       	rjmp	.-90     	; 0x262 <main+0x14>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
