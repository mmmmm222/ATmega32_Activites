
Mini_Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00001e5a  00001eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000bc  008000bc  00001f4a  2**0
                  ALLOC
  3 .stab         00001be4  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ee3  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000690c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000077f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000085a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008991  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000915f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <main>
      8a:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u16 *ADC_globalptru16Result = NULL;

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Voltage Reference */
	#if VREF == AVCC
		SET_BIT(ADMUX, ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	#else
	#error "Wrong VREF choice"
	#endif

		/* Prescaller */
		ADCSRA &= ADC_PRE_MASK;
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 7f       	andi	r24, 0xF8	; 248
     b76:	8c 93       	st	X, r24
		ADCSRA |= ADC_PRESCALLER;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8c 93       	st	X, r24
		/* Adjust Result */
	#if ADC_ADJUSTMENT == LEFT_ADJUST
			SET_BIT(ADMUX, ADMUX_ADLAR);

	#elif ADC_ADJUSTMENT == RIGHT_ADJUST
			CLR_BIT(ADMUX, ADMUX_ADLAR);
     b84:	a7 e2       	ldi	r26, 0x27	; 39
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e7 e2       	ldi	r30, 0x27	; 39
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 7d       	andi	r24, 0xDF	; 223
     b90:	8c 93       	st	X, r24
	#error "Wrong Adjust choice"
	#endif

		/* ADC State */
	#if ADC_STATE == ADC_ENABLE
			SET_BIT(ADCSRA, ADCSRA_ADEN);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24
	#endif

		/* Interrupt State */

	#if INT_STATUS == INT_DISABLE
			SET_BIT(ADCSRA, ADCSRA_ADEN);
     ba0:	a6 e2       	ldi	r26, 0x26	; 38
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 e2       	ldi	r30, 0x26	; 38
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA, ADCSRA_ADEN);
	#else
	#error "Wrong Interrupt choice"
	#endif

}
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <ADC_voidEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidEnable(void)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     bbc:	a6 e2       	ldi	r26, 0x26	; 38
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e6 e2       	ldi	r30, 0x26	; 38
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	8c 93       	st	X, r24
}
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <ADC_voidDisable>:

void ADC_voidDisable(void)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADCSRA_ADEN);
     bd8:	a6 e2       	ldi	r26, 0x26	; 38
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e6 e2       	ldi	r30, 0x26	; 38
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 77       	andi	r24, 0x7F	; 127
     be4:	8c 93       	st	X, r24
}
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <ADC_voidInterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptEnable(void)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADCSRA_ADIE);
     bf4:	a6 e2       	ldi	r26, 0x26	; 38
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e6 e2       	ldi	r30, 0x26	; 38
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	8c 93       	st	X, r24
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <ADC_voidInterruptDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptDisable(void)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, ADCSRA_ADIE);
     c10:	a6 e2       	ldi	r26, 0x26	; 38
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	87 7f       	andi	r24, 0xF7	; 247
     c1c:	8c 93       	st	X, r24
}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <ADC_u8SetPrescaller>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8SetPrescaller(u8 Copy_u8Prescaller)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <ADC_u8SetPrescaller+0x6>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     c30:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &= ADC_PRE_MASK;
     c32:	a6 e2       	ldi	r26, 0x26	; 38
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e6 e2       	ldi	r30, 0x26	; 38
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	88 7f       	andi	r24, 0xF8	; 248
     c3e:	8c 93       	st	X, r24
	ADCSRA |= Copy_u8Prescaller;
     c40:	a6 e2       	ldi	r26, 0x26	; 38
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e6 e2       	ldi	r30, 0x26	; 38
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	90 81       	ld	r25, Z
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	89 2b       	or	r24, r25
     c4e:	8c 93       	st	X, r24

	return Local_u8ErrorState;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <ADC_u8GetResultSync>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8GetResultSync (u8 Copy_u8Channel , u16 * Copy_pu16Result)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	28 97       	sbiw	r28, 0x08	; 8
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	8e 83       	std	Y+6, r24	; 0x06
     c72:	78 87       	std	Y+8, r23	; 0x08
     c74:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
     c76:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
     c78:	19 82       	std	Y+1, r1	; 0x01
     c7a:	1a 82       	std	Y+2, r1	; 0x02
     c7c:	1b 82       	std	Y+3, r1	; 0x03
     c7e:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pu16Result != NULL)
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	09 f4       	brne	.+2      	; 0xc8a <ADC_u8GetResultSync+0x2e>
     c88:	73 c0       	rjmp	.+230    	; 0xd70 <ADC_u8GetResultSync+0x114>
	{
		if(ADC_u8State == IDEL)
     c8a:	80 91 9d 00 	lds	r24, 0x009D
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <ADC_u8GetResultSync+0x38>
     c92:	6b c0       	rjmp	.+214    	; 0xd6a <ADC_u8GetResultSync+0x10e>
			{
				ADC_u8State = BUSY;
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	80 93 9d 00 	sts	0x009D, r24

				/* Set The Required Channel */
				ADMUX &= ADC_CHANNEL_MASK;
     c9a:	a7 e2       	ldi	r26, 0x27	; 39
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e2       	ldi	r30, 0x27	; 39
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	88 7f       	andi	r24, 0xF8	; 248
     ca6:	8c 93       	st	X, r24
				ADMUX |= Copy_u8Channel;
     ca8:	a7 e2       	ldi	r26, 0x27	; 39
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e2       	ldi	r30, 0x27	; 39
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	90 81       	ld	r25, Z
     cb2:	8e 81       	ldd	r24, Y+6	; 0x06
     cb4:	89 2b       	or	r24, r25
     cb6:	8c 93       	st	X, r24

				/* Start Conversion */
				SET_BIT(ADCSRA, ADCSRA_ADSC);
     cb8:	a6 e2       	ldi	r26, 0x26	; 38
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e6 e2       	ldi	r30, 0x26	; 38
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	8c 93       	st	X, r24
     cc6:	0b c0       	rjmp	.+22     	; 0xcde <ADC_u8GetResultSync+0x82>

				/* Polling Till The Conversion Complete */
				while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 1 && Local_u32Counter < ADC_TIME_OUT)
				{
					Local_u32Counter++;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	ab 81       	ldd	r26, Y+3	; 0x03
     cce:	bc 81       	ldd	r27, Y+4	; 0x04
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	a1 1d       	adc	r26, r1
     cd4:	b1 1d       	adc	r27, r1
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	ab 83       	std	Y+3, r26	; 0x03
     cdc:	bc 83       	std	Y+4, r27	; 0x04

				/* Start Conversion */
				SET_BIT(ADCSRA, ADCSRA_ADSC);

				/* Polling Till The Conversion Complete */
				while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 1 && Local_u32Counter < ADC_TIME_OUT)
     cde:	e6 e2       	ldi	r30, 0x26	; 38
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 95       	swap	r24
     ce6:	8f 70       	andi	r24, 0x0F	; 15
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	98 2f       	mov	r25, r24
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 27       	eor	r24, r25
     cf6:	88 23       	and	r24, r24
     cf8:	61 f4       	brne	.+24     	; 0xd12 <ADC_u8GetResultSync+0xb6>
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	ab 81       	ldd	r26, Y+3	; 0x03
     d00:	bc 81       	ldd	r27, Y+4	; 0x04
     d02:	88 38       	cpi	r24, 0x88	; 136
     d04:	23 e1       	ldi	r18, 0x13	; 19
     d06:	92 07       	cpc	r25, r18
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	a2 07       	cpc	r26, r18
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	b2 07       	cpc	r27, r18
     d10:	d8 f2       	brcs	.-74     	; 0xcc8 <ADC_u8GetResultSync+0x6c>
				{
					Local_u32Counter++;
				}
				if(Local_u32Counter == ADC_TIME_OUT)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	ab 81       	ldd	r26, Y+3	; 0x03
     d18:	bc 81       	ldd	r27, Y+4	; 0x04
     d1a:	88 38       	cpi	r24, 0x88	; 136
     d1c:	23 e1       	ldi	r18, 0x13	; 19
     d1e:	92 07       	cpc	r25, r18
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	a2 07       	cpc	r26, r18
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	b2 07       	cpc	r27, r18
     d28:	19 f4       	brne	.+6      	; 0xd30 <ADC_u8GetResultSync+0xd4>
				{
					Local_u8ErrorState = TIMEOUT;
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	8d 83       	std	Y+5, r24	; 0x05
     d2e:	19 c0       	rjmp	.+50     	; 0xd62 <ADC_u8GetResultSync+0x106>
				}
				else
				{
					/*Clear the interrupt flag*/
					SET_BIT(ADCSRA , ADCSRA_ADIF) ;
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	8c 93       	st	X, r24

					/*Return Conversion Result*/
					#if ADC_ADJUSTMENT == LEFT_ADJUST
							*Copy_pu16Result = ADCH;
					#elif ADC_ADJUSTMENT == RIGHT_ADJUST
							*Copy_pu16Result = (ADCL | ADCH<<8);
     d3e:	e4 e2       	ldi	r30, 0x24	; 36
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	e5 e2       	ldi	r30, 0x25	; 37
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	98 2f       	mov	r25, r24
     d54:	88 27       	eor	r24, r24
     d56:	82 2b       	or	r24, r18
     d58:	93 2b       	or	r25, r19
     d5a:	ef 81       	ldd	r30, Y+7	; 0x07
     d5c:	f8 85       	ldd	r31, Y+8	; 0x08
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
					#else
					#error "Wrong ADC_ADJUSTMENT Choice"
					#endif
				}

				ADC_u8State = IDEL;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 9d 00 	sts	0x009D, r24
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <ADC_u8GetResultSync+0x118>
			}
			else
			{
				Local_u8ErrorState = BUSY;
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	8d 83       	std	Y+5, r24	; 0x05
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <ADC_u8GetResultSync+0x118>
			}
	}

	else
	{
		Local_u8ErrorState = NULL_POINTER;
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState;
     d74:	8d 81       	ldd	r24, Y+5	; 0x05

}
     d76:	28 96       	adiw	r28, 0x08	; 8
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <ADC_u8StartConversionAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartConversionAsynch (u8 Copy_u8Channel , u16 * Copy_pu16Result , void (*Copy_pvNotificationFunc)(void))
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <ADC_u8StartConversionAsynch+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <ADC_u8StartConversionAsynch+0x8>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <ADC_u8StartConversionAsynch+0xa>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	7c 83       	std	Y+4, r23	; 0x04
     d9a:	6b 83       	std	Y+3, r22	; 0x03
     d9c:	5e 83       	std	Y+6, r21	; 0x06
     d9e:	4d 83       	std	Y+5, r20	; 0x05
		u8 Local_u8ErrorState = OK;
     da0:	19 82       	std	Y+1, r1	; 0x01
		if(ADC_u8State == IDEL){
     da2:	80 91 9d 00 	lds	r24, 0x009D
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	d9 f5       	brne	.+118    	; 0xe20 <ADC_u8StartConversionAsynch+0x98>

			if(Copy_pu16Result != NULL && Copy_pvNotificationFunc != NULL){
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	a1 f1       	breq	.+104    	; 0xe1a <ADC_u8StartConversionAsynch+0x92>
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	81 f1       	breq	.+96     	; 0xe1a <ADC_u8StartConversionAsynch+0x92>

				/*ADC is now Busy*/
				ADC_u8State = BUSY;
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	80 93 9d 00 	sts	0x009D, r24

				/*Set ISR State*/
				ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	80 93 c0 00 	sts	0x00C0, r24

				//make The Global pointers point to the arguments to reuse them in the isr
				ADC_globalptru16Result = Copy_pu16Result;
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	90 93 bf 00 	sts	0x00BF, r25
     dce:	80 93 be 00 	sts	0x00BE, r24
				ADC_globalptrNotificationFunc = Copy_pvNotificationFunc ;
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	90 93 bd 00 	sts	0x00BD, r25
     dda:	80 93 bc 00 	sts	0x00BC, r24

				//Set The required channel
				ADMUX &= ADC_CHANNEL_MASK;
     dde:	a7 e2       	ldi	r26, 0x27	; 39
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e2       	ldi	r30, 0x27	; 39
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	88 7f       	andi	r24, 0xF8	; 248
     dea:	8c 93       	st	X, r24
				ADMUX |= Copy_u8Channel;
     dec:	a7 e2       	ldi	r26, 0x27	; 39
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e2       	ldi	r30, 0x27	; 39
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	90 81       	ld	r25, Z
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	89 2b       	or	r24, r25
     dfa:	8c 93       	st	X, r24

				//Start Conversion
				SET_BIT(ADCSRA, ADCSRA_ADSC);
     dfc:	a6 e2       	ldi	r26, 0x26	; 38
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e6 e2       	ldi	r30, 0x26	; 38
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	8c 93       	st	X, r24

				//Enable Interrupt
				SET_BIT(ADCSRA, ADCSRA_ADIE);
     e0a:	a6 e2       	ldi	r26, 0x26	; 38
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	88 60       	ori	r24, 0x08	; 8
     e16:	8c 93       	st	X, r24
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <ADC_u8StartConversionAsynch+0x9c>

			}

			else{
				Local_u8ErrorState = NULL_POINTER;
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <ADC_u8StartConversionAsynch+0x9c>
			}
		}

		else{
			Local_u8ErrorState = BUSY;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErrorState;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	26 96       	adiw	r28, 0x06	; 6
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <__vector_16>:
//
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16 (void)  __attribute__((signal)) ;
void __vector_16 (void) {
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62

	if(ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH){
     e62:	80 91 c0 00 	lds	r24, 0x00C0
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	41 f5       	brne	.+80     	; 0xeba <__vector_16+0x82>
		#if ADC_ADJUSTMENT == LEFT_ADJUST
			//Assign The Value to the Variable Through Global ptr
				*ADC_globalptru16Result = ADCH;

		#elif ADC_ADJUSTMENT == RIGHT_ADJUST
				*ADC_globalptru16Result = (ADCL |= (ADCH<<8));
     e6a:	20 91 be 00 	lds	r18, 0x00BE
     e6e:	30 91 bf 00 	lds	r19, 0x00BF
     e72:	a4 e2       	ldi	r26, 0x24	; 36
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e4 e2       	ldi	r30, 0x24	; 36
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	e5 e2       	ldi	r30, 0x25	; 37
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	98 2f       	mov	r25, r24
     e8a:	88 27       	eor	r24, r24
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	8c 91       	ld	r24, X
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	f9 01       	movw	r30, r18
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
		#error "Wrong Adjustment Choice"

		#endif

		/*ADC is IDLE*/
		ADC_u8State = IDEL ;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 9d 00 	sts	0x009D, r24

		//Call The Notification Function
		ADC_globalptrNotificationFunc();
     ea2:	e0 91 bc 00 	lds	r30, 0x00BC
     ea6:	f0 91 bd 00 	lds	r31, 0x00BD
     eaa:	09 95       	icall

		//Disable The Interrupt
		CLR_BIT(ADCSRA, ADCSRA_ADIE);
     eac:	a6 e2       	ldi	r26, 0x26	; 38
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e6 e2       	ldi	r30, 0x26	; 38
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	8c 93       	st	X, r24

	else{

	}

}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	2f 97       	sbiw	r28, 0x0f	; 15
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	8f 87       	std	Y+15, r24	; 0x0f
	  2-r\w => write
	  3- data => command to the eight pins
	  4-enable pulse for 2 milli seconds
	 */
	/*set rs to low*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	65 e0       	ldi	r22, 0x05	; 5
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	66 e0       	ldi	r22, 0x06	; 6
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>

	/* set command to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	6f 85       	ldd	r22, Y+15	; 0x0f
     f0e:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	67 e0       	ldi	r22, 0x07	; 7
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a0 e0       	ldi	r26, 0x00	; 0
     f22:	b0 e4       	ldi	r27, 0x40	; 64
     f24:	8b 87       	std	Y+11, r24	; 0x0b
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	ad 87       	std	Y+13, r26	; 0x0d
     f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a ef       	ldi	r20, 0xFA	; 250
     f3a:	54 e4       	ldi	r21, 0x44	; 68
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8f 83       	std	Y+7, r24	; 0x07
     f46:	98 87       	std	Y+8, r25	; 0x08
     f48:	a9 87       	std	Y+9, r26	; 0x09
     f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
     fae:	0f c0       	rjmp	.+30     	; 0xfce <CLCD_voidSendCommand+0xee>
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <CLCD_voidSendCommand+0xdc>
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <CLCD_voidSendCommand+0xd0>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <CLCD_voidSendCommand+0x118>
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	67 e0       	ldi	r22, 0x07	; 7
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>
}
    100a:	2f 96       	adiw	r28, 0x0f	; 15
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2f 97       	sbiw	r28, 0x0f	; 15
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs to HIGH for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	65 e0       	ldi	r22, 0x05	; 5
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	66 e0       	ldi	r22, 0x06	; 6
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>

	/* set Data to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1046:	83 e0       	ldi	r24, 0x03	; 3
    1048:	6f 85       	ldd	r22, Y+15	; 0x0f
    104a:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	67 e0       	ldi	r22, 0x07	; 7
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e4       	ldi	r27, 0x40	; 64
    1060:	8b 87       	std	Y+11, r24	; 0x0b
    1062:	9c 87       	std	Y+12, r25	; 0x0c
    1064:	ad 87       	std	Y+13, r26	; 0x0d
    1066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	6b 85       	ldd	r22, Y+11	; 0x0b
    106a:	7c 85       	ldd	r23, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a ef       	ldi	r20, 0xFA	; 250
    1076:	54 e4       	ldi	r21, 0x44	; 68
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8f 83       	std	Y+7, r24	; 0x07
    1082:	98 87       	std	Y+8, r25	; 0x08
    1084:	a9 87       	std	Y+9, r26	; 0x09
    1086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <CLCD_voidSendData+0x8e>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <CLCD_voidSendData+0xee>
    10ec:	88 ec       	ldi	r24, 0xC8	; 200
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <CLCD_voidSendData+0xdc>
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <CLCD_voidSendData+0xd0>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <CLCD_voidSendData+0x118>
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	67 e0       	ldi	r22, 0x07	; 7
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>

}
    1146:	2f 96       	adiw	r28, 0x0f	; 15
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <CLCD_voidSendString>:

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <CLCD_voidSendString+0x6>
    115e:	0f 92       	push	r0
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	fc 01       	movw	r30, r24
    1178:	e2 0f       	add	r30, r18
    117a:	f3 1f       	adc	r31, r19
    117c:	80 81       	ld	r24, Z
    117e:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
		Local_u8Counter++;
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	8f 5f       	subi	r24, 0xFF	; 255
    1186:	89 83       	std	Y+1, r24	; 0x01

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	fc 01       	movw	r30, r24
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	80 81       	ld	r24, Z
    119a:	88 23       	and	r24, r24
    119c:	39 f7       	brne	.-50     	; 0x116c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <CLCD_voidGoToXY+0x6>
    11b0:	0f 92       	push	r0
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address=0;
    11ba:	19 82       	std	Y+1, r1	; 0x01

	/*if x ==0 we target the first line*/
	if(Copy_u8XPos == 0)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	88 23       	and	r24, r24
    11c0:	19 f4       	brne	.+6      	; 0x11c8 <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Address=Copy_u8YPos;
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <CLCD_voidGoToXY+0x2a>
	}

	/*if x ==1 we target the second line*/
	else if(Copy_u8XPos == 1)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Address=Copy_u8YPos+(0x40);
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	80 5c       	subi	r24, 0xC0	; 192
    11d2:	89 83       	std	Y+1, r24	; 0x01
	}
	/*here we added 128 because the binary address we got is 7 digits only and we need the 8th digit to be 1*/
	CLCD_voidSendCommand(Local_u8Address+128);
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	80 58       	subi	r24, 0x80	; 128
    11d8:	0e 94 70 07 	call	0xee0	; 0xee0 <CLCD_voidSendCommand>
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <CLCD_voidInit>:


void CLCD_voidInit(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	2e 97       	sbiw	r28, 0x0e	; 14
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e2       	ldi	r26, 0x20	; 32
    1202:	b2 e4       	ldi	r27, 0x42	; 66
    1204:	8b 87       	std	Y+11, r24	; 0x0b
    1206:	9c 87       	std	Y+12, r25	; 0x0c
    1208:	ad 87       	std	Y+13, r26	; 0x0d
    120a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	6b 85       	ldd	r22, Y+11	; 0x0b
    120e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a ef       	ldi	r20, 0xFA	; 250
    121a:	54 e4       	ldi	r21, 0x44	; 68
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	a9 87       	std	Y+9, r26	; 0x09
    122a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <CLCD_voidInit+0x66>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <CLCD_voidInit+0xc6>
    1290:	88 ec       	ldi	r24, 0xC8	; 200
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <CLCD_voidInit+0xb4>
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <CLCD_voidInit+0xa8>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <CLCD_voidInit+0xf0>
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	/*1 => (5*11)(columns of pixels)*(Rows of pixels) bigger font  */
	/*X => don not care choose any value*/
	/*the R/s and r/w have been chosen before*/

	/*we choose two lines and 5*8 Font size */
	CLCD_voidSendCommand(0b00111100);
    12e0:	8c e3       	ldi	r24, 0x3C	; 60
    12e2:	0e 94 70 07 	call	0xee0	; 0xee0 <CLCD_voidSendCommand>
	/* 0 |  0  |  0  |  0  |  0  |  0  |  1  |  D  |  C  |  B  */
	/*D => Display enable 0=> disable & 1=> enable*/
	/*C => cursor enable 0=> disable & 1=> enable */
	/*B => blink cursor 0=> don't blink & 1=> blink*/
	/*Display(screen) on/off command & the cursor state*/
	CLCD_voidSendCommand(0b00001100);
    12e6:	8c e0       	ldi	r24, 0x0C	; 12
    12e8:	0e 94 70 07 	call	0xee0	; 0xee0 <CLCD_voidSendCommand>

	/*clear screen it is a fixed command */
	CLCD_voidSendCommand(0b00000001);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	0e 94 70 07 	call	0xee0	; 0xee0 <CLCD_voidSendCommand>
}
    12f2:	2e 96       	adiw	r28, 0x0e	; 14
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <CLCD_voidWriteSpecialCharacter>:

/*CGRAM => charchater gerenator ram */


void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	27 97       	sbiw	r28, 0x07	; 7
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	6d 83       	std	Y+5, r22	; 0x05
    131e:	4e 83       	std	Y+6, r20	; 0x06
    1320:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8Iterator;
    1322:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	80 5c       	subi	r24, 0xC0	; 192
    133c:	0e 94 70 07 	call	0xee0	; 0xee0 <CLCD_voidSendCommand>

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	0e c0       	rjmp	.+28     	; 0x1360 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	fc 01       	movw	r30, r24
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	80 81       	ld	r24, Z
    1356:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 30       	cpi	r24, 0x08	; 8
    1364:	78 f3       	brcs	.-34     	; 0x1344 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*go to the target pos*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>

	/*display the pattern */
	CLCD_voidSendData(Copy_u8PatternNumber);
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>

}
    1374:	27 96       	adiw	r28, 0x07	; 7
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <CLCD_voidDisplayNumber>:




void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	65 97       	sbiw	r28, 0x15	; 21
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	6a 87       	std	Y+10, r22	; 0x0a
    139c:	7b 87       	std	Y+11, r23	; 0x0b
    139e:	8c 87       	std	Y+12, r24	; 0x0c
    13a0:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    13a2:	2d b7       	in	r18, 0x3d	; 61
    13a4:	3e b7       	in	r19, 0x3e	; 62
    13a6:	3d 8b       	std	Y+21, r19	; 0x15
    13a8:	2c 8b       	std	Y+20, r18	; 0x14



void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    13aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ae:	ac 85       	ldd	r26, Y+12	; 0x0c
    13b0:	bd 85       	ldd	r27, Y+13	; 0x0d
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	a1 05       	cpc	r26, r1
    13b6:	b1 05       	cpc	r27, r1
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    13ba:	80 e3       	ldi	r24, 0x30	; 48
    13bc:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    13c0:	13 c1       	rjmp	.+550    	; 0x15e8 <CLCD_voidDisplayNumber+0x262>
    13c2:	8d b7       	in	r24, 0x3d	; 61
    13c4:	9e b7       	in	r25, 0x3e	; 62
    13c6:	9f 87       	std	Y+15, r25	; 0x0f
    13c8:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;
    13ca:	1f 82       	std	Y+7, r1	; 0x07
    13cc:	1e 82       	std	Y+6, r1	; 0x06
    13ce:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    13d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    13d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	ab 83       	std	Y+3, r26	; 0x03
    13de:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	ab 81       	ldd	r26, Y+3	; 0x03
    13ec:	bc 81       	ldd	r27, Y+4	; 0x04
    13ee:	2a e0       	ldi	r18, 0x0A	; 10
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__udivmodsi4>
    13fe:	da 01       	movw	r26, r20
    1400:	c9 01       	movw	r24, r18
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	ab 83       	std	Y+3, r26	; 0x03
    1408:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	ab 81       	ldd	r26, Y+3	; 0x03
    1410:	bc 81       	ldd	r27, Y+4	; 0x04
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	a1 05       	cpc	r26, r1
    1416:	b1 05       	cpc	r27, r1
    1418:	19 f7       	brne	.-58     	; 0x13e0 <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	2d b7       	in	r18, 0x3d	; 61
    1422:	3e b7       	in	r19, 0x3e	; 62
    1424:	28 1b       	sub	r18, r24
    1426:	39 0b       	sbc	r19, r25
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	3e bf       	out	0x3e, r19	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	2d bf       	out	0x3d, r18	; 61
    1432:	8d b7       	in	r24, 0x3d	; 61
    1434:	9e b7       	in	r25, 0x3e	; 62
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	9b 8b       	std	Y+19, r25	; 0x13
    143a:	8a 8b       	std	Y+18, r24	; 0x12
    143c:	8a 89       	ldd	r24, Y+18	; 0x12
    143e:	9b 89       	ldd	r25, Y+19	; 0x13
    1440:	00 96       	adiw	r24, 0x00	; 0
    1442:	9b 8b       	std	Y+19, r25	; 0x13
    1444:	8a 8b       	std	Y+18, r24	; 0x12
    1446:	2a 89       	ldd	r18, Y+18	; 0x12
    1448:	3b 89       	ldd	r19, Y+19	; 0x13
    144a:	39 87       	std	Y+9, r19	; 0x09
    144c:	28 87       	std	Y+8, r18	; 0x08
    144e:	2e c0       	rjmp	.+92     	; 0x14ac <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    1450:	8a 85       	ldd	r24, Y+10	; 0x0a
    1452:	9b 85       	ldd	r25, Y+11	; 0x0b
    1454:	ac 85       	ldd	r26, Y+12	; 0x0c
    1456:	bd 85       	ldd	r27, Y+13	; 0x0d
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__udivmodsi4>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	88 85       	ldd	r24, Y+8	; 0x08
    1476:	99 85       	ldd	r25, Y+9	; 0x09
    1478:	fc 01       	movw	r30, r24
    147a:	e2 0f       	add	r30, r18
    147c:	f3 1f       	adc	r31, r19
    147e:	8f 81       	ldd	r24, Y+7	; 0x07
    1480:	80 83       	st	Z, r24
		Local_u8Counter++;
    1482:	8e 81       	ldd	r24, Y+6	; 0x06
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    1488:	8a 85       	ldd	r24, Y+10	; 0x0a
    148a:	9b 85       	ldd	r25, Y+11	; 0x0b
    148c:	ac 85       	ldd	r26, Y+12	; 0x0c
    148e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1490:	2a e0       	ldi	r18, 0x0A	; 10
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__udivmodsi4>
    14a0:	da 01       	movw	r26, r20
    14a2:	c9 01       	movw	r24, r18
    14a4:	8a 87       	std	Y+10, r24	; 0x0a
    14a6:	9b 87       	std	Y+11, r25	; 0x0b
    14a8:	ac 87       	std	Y+12, r26	; 0x0c
    14aa:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    14ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b0:	ac 85       	ldd	r26, Y+12	; 0x0c
    14b2:	bd 85       	ldd	r27, Y+13	; 0x0d
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	a1 05       	cpc	r26, r1
    14b8:	b1 05       	cpc	r27, r1
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <CLCD_voidDisplayNumber+0x13e>
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	98 17       	cp	r25, r24
    14c2:	30 f2       	brcs	.-116    	; 0x1450 <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	81 50       	subi	r24, 0x01	; 1
    14c8:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    14ca:	1e 82       	std	Y+6, r1	; 0x06
    14cc:	81 c0       	rjmp	.+258    	; 0x15d0 <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	28 1b       	sub	r18, r24
    14dc:	39 0b       	sbc	r19, r25
    14de:	88 85       	ldd	r24, Y+8	; 0x08
    14e0:	99 85       	ldd	r25, Y+9	; 0x09
    14e2:	fc 01       	movw	r30, r24
    14e4:	e2 0f       	add	r30, r18
    14e6:	f3 1f       	adc	r31, r19
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	39 8b       	std	Y+17, r19	; 0x11
    14f0:	28 8b       	std	Y+16, r18	; 0x10
    14f2:	88 89       	ldd	r24, Y+16	; 0x10
    14f4:	99 89       	ldd	r25, Y+17	; 0x11
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <CLCD_voidDisplayNumber+0x178>
    14fc:	4f c0       	rjmp	.+158    	; 0x159c <CLCD_voidDisplayNumber+0x216>
    14fe:	28 89       	ldd	r18, Y+16	; 0x10
    1500:	39 89       	ldd	r19, Y+17	; 0x11
    1502:	25 30       	cpi	r18, 0x05	; 5
    1504:	31 05       	cpc	r19, r1
    1506:	d4 f4       	brge	.+52     	; 0x153c <CLCD_voidDisplayNumber+0x1b6>
    1508:	88 89       	ldd	r24, Y+16	; 0x10
    150a:	99 89       	ldd	r25, Y+17	; 0x11
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	c9 f1       	breq	.+114    	; 0x1584 <CLCD_voidDisplayNumber+0x1fe>
    1512:	28 89       	ldd	r18, Y+16	; 0x10
    1514:	39 89       	ldd	r19, Y+17	; 0x11
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <CLCD_voidDisplayNumber+0x1a0>
    151c:	88 89       	ldd	r24, Y+16	; 0x10
    151e:	99 89       	ldd	r25, Y+17	; 0x11
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f1       	breq	.+88     	; 0x157c <CLCD_voidDisplayNumber+0x1f6>
    1524:	52 c0       	rjmp	.+164    	; 0x15ca <CLCD_voidDisplayNumber+0x244>
    1526:	28 89       	ldd	r18, Y+16	; 0x10
    1528:	39 89       	ldd	r19, Y+17	; 0x11
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	71 f1       	breq	.+92     	; 0x158c <CLCD_voidDisplayNumber+0x206>
    1530:	88 89       	ldd	r24, Y+16	; 0x10
    1532:	99 89       	ldd	r25, Y+17	; 0x11
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	69 f1       	breq	.+90     	; 0x1594 <CLCD_voidDisplayNumber+0x20e>
    153a:	47 c0       	rjmp	.+142    	; 0x15ca <CLCD_voidDisplayNumber+0x244>
    153c:	28 89       	ldd	r18, Y+16	; 0x10
    153e:	39 89       	ldd	r19, Y+17	; 0x11
    1540:	27 30       	cpi	r18, 0x07	; 7
    1542:	31 05       	cpc	r19, r1
    1544:	b9 f1       	breq	.+110    	; 0x15b4 <CLCD_voidDisplayNumber+0x22e>
    1546:	88 89       	ldd	r24, Y+16	; 0x10
    1548:	99 89       	ldd	r25, Y+17	; 0x11
    154a:	88 30       	cpi	r24, 0x08	; 8
    154c:	91 05       	cpc	r25, r1
    154e:	5c f4       	brge	.+22     	; 0x1566 <CLCD_voidDisplayNumber+0x1e0>
    1550:	28 89       	ldd	r18, Y+16	; 0x10
    1552:	39 89       	ldd	r19, Y+17	; 0x11
    1554:	25 30       	cpi	r18, 0x05	; 5
    1556:	31 05       	cpc	r19, r1
    1558:	29 f1       	breq	.+74     	; 0x15a4 <CLCD_voidDisplayNumber+0x21e>
    155a:	88 89       	ldd	r24, Y+16	; 0x10
    155c:	99 89       	ldd	r25, Y+17	; 0x11
    155e:	86 30       	cpi	r24, 0x06	; 6
    1560:	91 05       	cpc	r25, r1
    1562:	21 f1       	breq	.+72     	; 0x15ac <CLCD_voidDisplayNumber+0x226>
    1564:	32 c0       	rjmp	.+100    	; 0x15ca <CLCD_voidDisplayNumber+0x244>
    1566:	28 89       	ldd	r18, Y+16	; 0x10
    1568:	39 89       	ldd	r19, Y+17	; 0x11
    156a:	28 30       	cpi	r18, 0x08	; 8
    156c:	31 05       	cpc	r19, r1
    156e:	31 f1       	breq	.+76     	; 0x15bc <CLCD_voidDisplayNumber+0x236>
    1570:	88 89       	ldd	r24, Y+16	; 0x10
    1572:	99 89       	ldd	r25, Y+17	; 0x11
    1574:	89 30       	cpi	r24, 0x09	; 9
    1576:	91 05       	cpc	r25, r1
    1578:	29 f1       	breq	.+74     	; 0x15c4 <CLCD_voidDisplayNumber+0x23e>
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    157c:	80 e3       	ldi	r24, 0x30	; 48
    157e:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    1582:	23 c0       	rjmp	.+70     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    1584:	81 e3       	ldi	r24, 0x31	; 49
    1586:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    158a:	1f c0       	rjmp	.+62     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    158c:	82 e3       	ldi	r24, 0x32	; 50
    158e:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    1592:	1b c0       	rjmp	.+54     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    1594:	83 e3       	ldi	r24, 0x33	; 51
    1596:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    159a:	17 c0       	rjmp	.+46     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    159c:	84 e3       	ldi	r24, 0x34	; 52
    159e:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    15a2:	13 c0       	rjmp	.+38     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    15a4:	85 e3       	ldi	r24, 0x35	; 53
    15a6:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    15ac:	86 e3       	ldi	r24, 0x36	; 54
    15ae:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    15b2:	0b c0       	rjmp	.+22     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    15b4:	87 e3       	ldi	r24, 0x37	; 55
    15b6:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    15bc:	88 e3       	ldi	r24, 0x38	; 56
    15be:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    15c4:	89 e3       	ldi	r24, 0x39	; 57
    15c6:	0e 94 0e 08 	call	0x101c	; 0x101c <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    15ca:	8e 81       	ldd	r24, Y+6	; 0x06
    15cc:	8f 5f       	subi	r24, 0xFF	; 255
    15ce:	8e 83       	std	Y+6, r24	; 0x06
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	89 17       	cp	r24, r25
    15d6:	08 f0       	brcs	.+2      	; 0x15da <CLCD_voidDisplayNumber+0x254>
    15d8:	7a cf       	rjmp	.-268    	; 0x14ce <CLCD_voidDisplayNumber+0x148>
    15da:	2e 85       	ldd	r18, Y+14	; 0x0e
    15dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	3e bf       	out	0x3e, r19	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    15e8:	8c 89       	ldd	r24, Y+20	; 0x14
    15ea:	9d 89       	ldd	r25, Y+21	; 0x15
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	9e bf       	out	0x3e, r25	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	8d bf       	out	0x3d, r24	; 61
    15f6:	65 96       	adiw	r28, 0x15	; 21
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	28 97       	sbiw	r28, 0x08	; 8
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	6b 83       	std	Y+3, r22	; 0x03
    1620:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1622:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	08 f0       	brcs	.+2      	; 0x162c <DIO_u8SetPinValue+0x24>
    162a:	f4 c0       	rjmp	.+488    	; 0x1814 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	09 f0       	breq	.+2      	; 0x1634 <DIO_u8SetPinValue+0x2c>
    1632:	72 c0       	rjmp	.+228    	; 0x1718 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	38 87       	std	Y+8, r19	; 0x08
    163c:	2f 83       	std	Y+7, r18	; 0x07
    163e:	8f 81       	ldd	r24, Y+7	; 0x07
    1640:	98 85       	ldd	r25, Y+8	; 0x08
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	49 f1       	breq	.+82     	; 0x169a <DIO_u8SetPinValue+0x92>
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
    164a:	38 85       	ldd	r19, Y+8	; 0x08
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	2c f4       	brge	.+10     	; 0x165c <DIO_u8SetPinValue+0x54>
    1652:	8f 81       	ldd	r24, Y+7	; 0x07
    1654:	98 85       	ldd	r25, Y+8	; 0x08
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	61 f0       	breq	.+24     	; 0x1672 <DIO_u8SetPinValue+0x6a>
    165a:	5b c0       	rjmp	.+182    	; 0x1712 <DIO_u8SetPinValue+0x10a>
    165c:	2f 81       	ldd	r18, Y+7	; 0x07
    165e:	38 85       	ldd	r19, Y+8	; 0x08
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	71 f1       	breq	.+92     	; 0x16c2 <DIO_u8SetPinValue+0xba>
    1666:	8f 81       	ldd	r24, Y+7	; 0x07
    1668:	98 85       	ldd	r25, Y+8	; 0x08
    166a:	83 30       	cpi	r24, 0x03	; 3
    166c:	91 05       	cpc	r25, r1
    166e:	e9 f1       	breq	.+122    	; 0x16ea <DIO_u8SetPinValue+0xe2>
    1670:	50 c0       	rjmp	.+160    	; 0x1712 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
    1672:	ab e3       	ldi	r26, 0x3B	; 59
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_u8SetPinValue+0x88>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_u8SetPinValue+0x84>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	bf c0       	rjmp	.+382    	; 0x1818 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
    169a:	a8 e3       	ldi	r26, 0x38	; 56
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_u8SetPinValue+0xb0>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_u8SetPinValue+0xac>
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	ab c0       	rjmp	.+342    	; 0x1818 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
    16c2:	a5 e3       	ldi	r26, 0x35	; 53
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e3       	ldi	r30, 0x35	; 53
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_u8SetPinValue+0xd8>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_u8SetPinValue+0xd4>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	97 c0       	rjmp	.+302    	; 0x1818 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
    16ea:	a2 e3       	ldi	r26, 0x32	; 50
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e2 e3       	ldi	r30, 0x32	; 50
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_u8SetPinValue+0x100>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_u8SetPinValue+0xfc>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	83 c0       	rjmp	.+262    	; 0x1818 <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	80 c0       	rjmp	.+256    	; 0x1818 <DIO_u8SetPinValue+0x210>

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	88 23       	and	r24, r24
    171c:	09 f0       	breq	.+2      	; 0x1720 <DIO_u8SetPinValue+0x118>
    171e:	77 c0       	rjmp	.+238    	; 0x180e <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3e 83       	std	Y+6, r19	; 0x06
    1728:	2d 83       	std	Y+5, r18	; 0x05
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	59 f1       	breq	.+86     	; 0x178a <DIO_u8SetPinValue+0x182>
    1734:	2d 81       	ldd	r18, Y+5	; 0x05
    1736:	3e 81       	ldd	r19, Y+6	; 0x06
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	2c f4       	brge	.+10     	; 0x1748 <DIO_u8SetPinValue+0x140>
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f0       	breq	.+26     	; 0x1760 <DIO_u8SetPinValue+0x158>
    1746:	60 c0       	rjmp	.+192    	; 0x1808 <DIO_u8SetPinValue+0x200>
    1748:	2d 81       	ldd	r18, Y+5	; 0x05
    174a:	3e 81       	ldd	r19, Y+6	; 0x06
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	89 f1       	breq	.+98     	; 0x17b4 <DIO_u8SetPinValue+0x1ac>
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <DIO_u8SetPinValue+0x156>
    175c:	40 c0       	rjmp	.+128    	; 0x17de <DIO_u8SetPinValue+0x1d6>
    175e:	54 c0       	rjmp	.+168    	; 0x1808 <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
    1760:	ab e3       	ldi	r26, 0x3B	; 59
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	eb e3       	ldi	r30, 0x3B	; 59
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_u8SetPinValue+0x176>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_u8SetPinValue+0x172>
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	47 c0       	rjmp	.+142    	; 0x1818 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8SetPinValue+0x1a0>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8SetPinValue+0x19c>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	32 c0       	rjmp	.+100    	; 0x1818 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
    17b4:	a5 e3       	ldi	r26, 0x35	; 53
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e3       	ldi	r30, 0x35	; 53
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_u8SetPinValue+0x1ca>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_u8SetPinValue+0x1c6>
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	8c 93       	st	X, r24
    17dc:	1d c0       	rjmp	.+58     	; 0x1818 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
    17de:	a2 e3       	ldi	r26, 0x32	; 50
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e2 e3       	ldi	r30, 0x32	; 50
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_u8SetPinValue+0x1f4>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_u8SetPinValue+0x1f0>
    1800:	80 95       	com	r24
    1802:	84 23       	and	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <DIO_u8SetPinValue+0x210>
			}
		}

		else
		{
			Local_u8ErrorState=1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	28 96       	adiw	r28, 0x08	; 8
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_u8SetPortValue+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_u8SetPortValue+0x8>
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    183e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3d 83       	std	Y+5, r19	; 0x05
    1848:	2c 83       	std	Y+4, r18	; 0x04
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	d1 f0       	breq	.+52     	; 0x1888 <DIO_u8SetPortValue+0x5c>
    1854:	2c 81       	ldd	r18, Y+4	; 0x04
    1856:	3d 81       	ldd	r19, Y+5	; 0x05
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	2c f4       	brge	.+10     	; 0x1868 <DIO_u8SetPortValue+0x3c>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f0       	breq	.+24     	; 0x187e <DIO_u8SetPortValue+0x52>
    1866:	1f c0       	rjmp	.+62     	; 0x18a6 <DIO_u8SetPortValue+0x7a>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <DIO_u8SetPortValue+0x66>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	81 f0       	breq	.+32     	; 0x189c <DIO_u8SetPortValue+0x70>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	80 83       	st	Z, r24
    1886:	11 c0       	rjmp	.+34     	; 0x18aa <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	80 83       	st	Z, r24
    1890:	0c c0       	rjmp	.+24     	; 0x18aa <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1892:	e5 e3       	ldi	r30, 0x35	; 53
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	80 83       	st	Z, r24
    189a:	07 c0       	rjmp	.+14     	; 0x18aa <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	80 83       	st	Z, r24
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState=1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	27 97       	sbiw	r28, 0x07	; 7
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	6b 83       	std	Y+3, r22	; 0x03
    18d4:	5d 83       	std	Y+5, r21	; 0x05
    18d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    18d8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <DIO_u8GetPinValue+0x28>
    18e2:	78 c0       	rjmp	.+240    	; 0x19d4 <DIO_u8GetPinValue+0x118>
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <DIO_u8GetPinValue+0x30>
    18ea:	74 c0       	rjmp	.+232    	; 0x19d4 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	3f 83       	std	Y+7, r19	; 0x07
    18f4:	2e 83       	std	Y+6, r18	; 0x06
    18f6:	4e 81       	ldd	r20, Y+6	; 0x06
    18f8:	5f 81       	ldd	r21, Y+7	; 0x07
    18fa:	41 30       	cpi	r20, 0x01	; 1
    18fc:	51 05       	cpc	r21, r1
    18fe:	59 f1       	breq	.+86     	; 0x1956 <DIO_u8GetPinValue+0x9a>
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	9f 81       	ldd	r25, Y+7	; 0x07
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	91 05       	cpc	r25, r1
    1908:	34 f4       	brge	.+12     	; 0x1916 <DIO_u8GetPinValue+0x5a>
    190a:	2e 81       	ldd	r18, Y+6	; 0x06
    190c:	3f 81       	ldd	r19, Y+7	; 0x07
    190e:	21 15       	cp	r18, r1
    1910:	31 05       	cpc	r19, r1
    1912:	69 f0       	breq	.+26     	; 0x192e <DIO_u8GetPinValue+0x72>
    1914:	5c c0       	rjmp	.+184    	; 0x19ce <DIO_u8GetPinValue+0x112>
    1916:	4e 81       	ldd	r20, Y+6	; 0x06
    1918:	5f 81       	ldd	r21, Y+7	; 0x07
    191a:	42 30       	cpi	r20, 0x02	; 2
    191c:	51 05       	cpc	r21, r1
    191e:	79 f1       	breq	.+94     	; 0x197e <DIO_u8GetPinValue+0xc2>
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	9f 81       	ldd	r25, Y+7	; 0x07
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <DIO_u8GetPinValue+0x70>
    192a:	3d c0       	rjmp	.+122    	; 0x19a6 <DIO_u8GetPinValue+0xea>
    192c:	50 c0       	rjmp	.+160    	; 0x19ce <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
    192e:	e9 e3       	ldi	r30, 0x39	; 57
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8GetPinValue+0x8a>
    1942:	55 95       	asr	r21
    1944:	47 95       	ror	r20
    1946:	8a 95       	dec	r24
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_u8GetPinValue+0x86>
    194a:	ca 01       	movw	r24, r20
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	ec 81       	ldd	r30, Y+4	; 0x04
    1950:	fd 81       	ldd	r31, Y+5	; 0x05
    1952:	80 83       	st	Z, r24
    1954:	41 c0       	rjmp	.+130    	; 0x19d8 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
    1956:	e6 e3       	ldi	r30, 0x36	; 54
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a9 01       	movw	r20, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_u8GetPinValue+0xb2>
    196a:	55 95       	asr	r21
    196c:	47 95       	ror	r20
    196e:	8a 95       	dec	r24
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_u8GetPinValue+0xae>
    1972:	ca 01       	movw	r24, r20
    1974:	81 70       	andi	r24, 0x01	; 1
    1976:	ec 81       	ldd	r30, Y+4	; 0x04
    1978:	fd 81       	ldd	r31, Y+5	; 0x05
    197a:	80 83       	st	Z, r24
    197c:	2d c0       	rjmp	.+90     	; 0x19d8 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
    197e:	e3 e3       	ldi	r30, 0x33	; 51
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a9 01       	movw	r20, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <DIO_u8GetPinValue+0xda>
    1992:	55 95       	asr	r21
    1994:	47 95       	ror	r20
    1996:	8a 95       	dec	r24
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <DIO_u8GetPinValue+0xd6>
    199a:	ca 01       	movw	r24, r20
    199c:	81 70       	andi	r24, 0x01	; 1
    199e:	ec 81       	ldd	r30, Y+4	; 0x04
    19a0:	fd 81       	ldd	r31, Y+5	; 0x05
    19a2:	80 83       	st	Z, r24
    19a4:	19 c0       	rjmp	.+50     	; 0x19d8 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
    19a6:	e0 e3       	ldi	r30, 0x30	; 48
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a9 01       	movw	r20, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <DIO_u8GetPinValue+0x102>
    19ba:	55 95       	asr	r21
    19bc:	47 95       	ror	r20
    19be:	8a 95       	dec	r24
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <DIO_u8GetPinValue+0xfe>
    19c2:	ca 01       	movw	r24, r20
    19c4:	81 70       	andi	r24, 0x01	; 1
    19c6:	ec 81       	ldd	r30, Y+4	; 0x04
    19c8:	fd 81       	ldd	r31, Y+5	; 0x05
    19ca:	80 83       	st	Z, r24
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorState=1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	27 96       	adiw	r28, 0x07	; 7
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_config.h"


u8 KEYPAD_u8GetPressedKey(void)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	28 97       	sbiw	r28, 0x08	; 8
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
	/*the only variable in our program which carry the value of the pressed key BUT in the beginning it carries the value which the user choosed to indicate the is no pressed key until it change */
	u32 Local_u8PressedKey = KEYPAD_NO_PRESSED_KEY ;
    1a00:	82 e1       	ldi	r24, 0x12	; 18
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 e0       	ldi	r26, 0x00	; 0
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	ad 83       	std	Y+5, r26	; 0x05
    1a0e:	be 83       	std	Y+6, r27	; 0x06
	u8 Local_u8PinState;
	/*defining the array which has the values of our kpd*/
	static u8 Local_u8KEYPADArr[ROW_NUMBER][COLUMN_NUMBER] = KEYPAD_ARR_VALUES;
	/*the iterators of the two for loops on for column the other for rows*/
	u8 Local_u8ColumnIndix = 0;
    1a10:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIndix = 0;
    1a12:	19 82       	std	Y+1, r1	; 0x01
	/* get the pins which the user connected his kpd to on the mcu to loop on them to activate the columns on by one and read the rows to know which reads low */
	static u8 Local_u8ColumnArr[COLUMN_NUMBER] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUMBER] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	for(Local_u8ColumnIndix = 0; Local_u8ColumnIndix < COLUMN_NUMBER; Local_u8ColumnIndix++)
    1a14:	1a 82       	std	Y+2, r1	; 0x02
    1a16:	65 c0       	rjmp	.+202    	; 0x1ae2 <KEYPAD_u8GetPressedKey+0xf6>
	{
		/*first step to activate current coulum by set in to low*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_LOW);
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	fc 01       	movw	r30, r24
    1a20:	ee 55       	subi	r30, 0x5E	; 94
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	90 81       	ld	r25, Z
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	69 2f       	mov	r22, r25
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>

		for(Local_u8RowIndix=0; Local_u8RowIndix<ROW_NUMBER; Local_u8RowIndix++)
    1a30:	19 82       	std	Y+1, r1	; 0x01
    1a32:	44 c0       	rjmp	.+136    	; 0x1abc <KEYPAD_u8GetPressedKey+0xd0>
		{
			DIO_u8GetPinValue(KEYPAD_PORT,Local_u8RowArr[Local_u8RowIndix],&Local_u8PinState);
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e2 56       	subi	r30, 0x62	; 98
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	90 81       	ld	r25, Z
    1a42:	9e 01       	movw	r18, r28
    1a44:	29 5f       	subi	r18, 0xF9	; 249
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	69 2f       	mov	r22, r25
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_u8GetPinValue>

			/*check if the switch is pressed*/
			if(DIO_u8PIN_LOW == Local_u8PinState)
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
    1a54:	88 23       	and	r24, r24
    1a56:	79 f5       	brne	.+94     	; 0x1ab6 <KEYPAD_u8GetPressedKey+0xca>
			{
				Local_u8PressedKey = Local_u8KEYPADArr[Local_u8RowIndix][Local_u8ColumnIndix];
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	ca 01       	movw	r24, r20
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	82 0f       	add	r24, r18
    1a70:	93 1f       	adc	r25, r19
    1a72:	fc 01       	movw	r30, r24
    1a74:	ea 55       	subi	r30, 0x5A	; 90
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	ad 83       	std	Y+5, r26	; 0x05
    1a88:	be 83       	std	Y+6, r27	; 0x06
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <KEYPAD_u8GetPressedKey+0xbe>
				/*polling => type of busy waiting*/
				/*here i want the program to recall the getpin func. while the user is pushing the key */
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KEYPAD_PORT,Local_u8RowArr[Local_u8RowIndix],&Local_u8PinState);
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	fc 01       	movw	r30, r24
    1a94:	e2 56       	subi	r30, 0x62	; 98
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	90 81       	ld	r25, Z
    1a9a:	9e 01       	movw	r18, r28
    1a9c:	29 5f       	subi	r18, 0xF9	; 249
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	69 2f       	mov	r22, r25
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KEYPADArr[Local_u8RowIndix][Local_u8ColumnIndix];
				/*polling => type of busy waiting*/
				/*here i want the program to recall the getpin func. while the user is pushing the key */
				while(DIO_u8PIN_LOW == Local_u8PinState)
    1aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    1aac:	88 23       	and	r24, r24
    1aae:	71 f3       	breq	.-36     	; 0x1a8c <KEYPAD_u8GetPressedKey+0xa0>
				{
					DIO_u8GetPinValue(KEYPAD_PORT,Local_u8RowArr[Local_u8RowIndix],&Local_u8PinState);
				}
				/* the program will return the value when the user pullup his hand from the switch*/
				return Local_u8PressedKey;
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 87       	std	Y+8, r24	; 0x08
    1ab4:	1c c0       	rjmp	.+56     	; 0x1aee <KEYPAD_u8GetPressedKey+0x102>
	for(Local_u8ColumnIndix = 0; Local_u8ColumnIndix < COLUMN_NUMBER; Local_u8ColumnIndix++)
	{
		/*first step to activate current coulum by set in to low*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_LOW);

		for(Local_u8RowIndix=0; Local_u8RowIndix<ROW_NUMBER; Local_u8RowIndix++)
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	08 f4       	brcc	.+2      	; 0x1ac4 <KEYPAD_u8GetPressedKey+0xd8>
    1ac2:	b8 cf       	rjmp	.-144    	; 0x1a34 <KEYPAD_u8GetPressedKey+0x48>
				return Local_u8PressedKey;
			}
		}

		/*DeActivate the current column*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_HIGH);
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	fc 01       	movw	r30, r24
    1acc:	ee 55       	subi	r30, 0x5E	; 94
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	90 81       	ld	r25, Z
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	69 2f       	mov	r22, r25
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_u8SetPinValue>
	u8 Local_u8RowIndix = 0;
	/* get the pins which the user connected his kpd to on the mcu to loop on them to activate the columns on by one and read the rows to know which reads low */
	static u8 Local_u8ColumnArr[COLUMN_NUMBER] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUMBER] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	for(Local_u8ColumnIndix = 0; Local_u8ColumnIndix < COLUMN_NUMBER; Local_u8ColumnIndix++)
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	08 f4       	brcc	.+2      	; 0x1aea <KEYPAD_u8GetPressedKey+0xfe>
    1ae8:	97 cf       	rjmp	.-210    	; 0x1a18 <KEYPAD_u8GetPressedKey+0x2c>
		/*DeActivate the current column*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	88 87       	std	Y+8, r24	; 0x08
    1aee:	88 85       	ldd	r24, Y+8	; 0x08
}
    1af0:	28 96       	adiw	r28, 0x08	; 8
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <LM35_voidTempratureReading>:
#include "BIT_MATH.h"

#define Step 5

void LM35_voidTempratureReading(u16 Copy_u16DigitalRead, u16 *Copy_pu16Temprature)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <LM35_voidTempratureReading+0x6>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <LM35_voidTempratureReading+0x8>
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	7c 83       	std	Y+4, r23	; 0x04
    1b14:	6b 83       	std	Y+3, r22	; 0x03
    // analog = digital * step(mv)

    *Copy_pu16Temprature = ((Copy_u16DigitalRead * Step) / 10);
    1b16:	29 81       	ldd	r18, Y+1	; 0x01
    1b18:	3a 81       	ldd	r19, Y+2	; 0x02
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	2a e0       	ldi	r18, 0x0A	; 10
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__udivmodhi4>
    1b32:	cb 01       	movw	r24, r22
    1b34:	eb 81       	ldd	r30, Y+3	; 0x03
    1b36:	fc 81       	ldd	r31, Y+4	; 0x04
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	80 83       	st	Z, r24
//    *Copy_pu16Temprature = (((u32)Copy_u16DigitalRead * 5ul) / 1024ul);
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <PORT_voidInIt>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
    1b52:	ea e3       	ldi	r30, 0x3A	; 58
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 ee       	ldi	r24, 0xE0	; 224
    1b58:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    1b5a:	e7 e3       	ldi	r30, 0x37	; 55
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	8f e0       	ldi	r24, 0x0F	; 15
    1b60:	80 83       	st	Z, r24
    DDRC = PORTC_DIR;
    1b62:	e4 e3       	ldi	r30, 0x34	; 52
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
    1b6a:	e1 e3       	ldi	r30, 0x31	; 49
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	80 83       	st	Z, r24

    PORTA = PORTA_INITIAL_VALUE;
    1b72:	eb e3       	ldi	r30, 0x3B	; 59
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	10 82       	st	Z, r1
    PORTB = PORTB_INITIAL_VALUE;
    1b78:	e8 e3       	ldi	r30, 0x38	; 56
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 ef       	ldi	r24, 0xF0	; 240
    1b7e:	80 83       	st	Z, r24
    PORTC = PORTC_INITIAL_VALUE;
    1b80:	e5 e3       	ldi	r30, 0x35	; 53
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	10 82       	st	Z, r1
    PORTD = PORTD_INITIAL_VALUE;
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	10 82       	st	Z, r1
}
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <main>:
#include "ADC_interface.h"
#include "LM35_interface.h"


void main (void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	6c 97       	sbiw	r28, 0x1c	; 28
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key, password[6]={1,0,2,0,3,0}, entry[10],i=0,counter=0;
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	04 96       	adiw	r24, 0x04	; 4
    1baa:	99 8f       	std	Y+25, r25	; 0x19
    1bac:	88 8f       	std	Y+24, r24	; 0x18
    1bae:	e6 eb       	ldi	r30, 0xB6	; 182
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	fb 8f       	std	Y+27, r31	; 0x1b
    1bb4:	ea 8f       	std	Y+26, r30	; 0x1a
    1bb6:	f6 e0       	ldi	r31, 0x06	; 6
    1bb8:	fc 8f       	std	Y+28, r31	; 0x1c
    1bba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bbc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bbe:	00 80       	ld	r0, Z
    1bc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	9b 8f       	std	Y+27, r25	; 0x1b
    1bc8:	8a 8f       	std	Y+26, r24	; 0x1a
    1bca:	e8 8d       	ldd	r30, Y+24	; 0x18
    1bcc:	f9 8d       	ldd	r31, Y+25	; 0x19
    1bce:	00 82       	st	Z, r0
    1bd0:	88 8d       	ldd	r24, Y+24	; 0x18
    1bd2:	99 8d       	ldd	r25, Y+25	; 0x19
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	99 8f       	std	Y+25, r25	; 0x19
    1bd8:	88 8f       	std	Y+24, r24	; 0x18
    1bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bdc:	91 50       	subi	r25, 0x01	; 1
    1bde:	9c 8f       	std	Y+28, r25	; 0x1c
    1be0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1be2:	ee 23       	and	r30, r30
    1be4:	51 f7       	brne	.-44     	; 0x1bba <main+0x28>
    1be6:	1a 82       	std	Y+2, r1	; 0x02
    1be8:	19 82       	std	Y+1, r1	; 0x01
	u16 ANALOG =10,Temp;
    1bea:	8a e0       	ldi	r24, 0x0A	; 10
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9d 8b       	std	Y+21, r25	; 0x15
    1bf0:	8c 8b       	std	Y+20, r24	; 0x14
	PORT_voidInIt();
    1bf2:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <PORT_voidInIt>
	CLCD_voidInit();
    1bf6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <CLCD_voidInit>
	ADC_voidInit();
    1bfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	ADC_voidEnable();
    1bfe:	0e 94 da 05 	call	0xbb4	; 0xbb4 <ADC_voidEnable>
	while(1)
	{

		do
		{
			Local_u8Key = KEYPAD_u8GetPressedKey();
    1c02:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <KEYPAD_u8GetPressedKey>
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		}while(Local_u8Key == 18);
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	82 31       	cpi	r24, 0x12	; 18
    1c0c:	d1 f3       	breq	.-12     	; 0x1c02 <main+0x70>


		if((Local_u8Key>=0 && Local_u8Key<=9) || Local_u8Key== '=')
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	8a 30       	cpi	r24, 0x0A	; 10
    1c12:	18 f0       	brcs	.+6      	; 0x1c1a <main+0x88>
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	8d 33       	cpi	r24, 0x3D	; 61
    1c18:	a1 f7       	brne	.-24     	; 0x1c02 <main+0x70>
		{
			if(Local_u8Key == '=')
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	8d 33       	cpi	r24, 0x3D	; 61
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <main+0x90>
    1c20:	96 c0       	rjmp	.+300    	; 0x1d4e <main+0x1bc>
			{
				CLCD_voidGoToXY(1,0);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
				CLCD_voidSendString("                ");
    1c2a:	80 e6       	ldi	r24, 0x60	; 96
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>

				if(i>6)
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	87 30       	cpi	r24, 0x07	; 7
    1c3e:	88 f0       	brcs	.+34     	; 0x1c62 <main+0xd0>
				{
					CLCD_voidGoToXY(0,0);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
					CLCD_voidSendString("                ");
    1c48:	80 e6       	ldi	r24, 0x60	; 96
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,0);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
					CLCD_voidSendString("Wrong Password");
    1c58:	81 e7       	ldi	r24, 0x71	; 113
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
    1c60:	39 c0       	rjmp	.+114    	; 0x1cd4 <main+0x142>
				}

				else
				{
					for(i=0; i<6; i++)
    1c62:	1a 82       	std	Y+2, r1	; 0x02
    1c64:	34 c0       	rjmp	.+104    	; 0x1cce <main+0x13c>
					{
						// check the equality of the password
						if(password[i] == entry[i])
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	04 96       	adiw	r24, 0x04	; 4
    1c70:	fc 01       	movw	r30, r24
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	40 81       	ld	r20, Z
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	ce 01       	movw	r24, r28
    1c80:	0a 96       	adiw	r24, 0x0a	; 10
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 17       	cp	r20, r24
    1c8c:	39 f4       	brne	.+14     	; 0x1c9c <main+0x10a>
						{
							counter++;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	89 83       	std	Y+1, r24	; 0x01
					CLCD_voidSendString("Wrong Password");
				}

				else
				{
					for(i=0; i<6; i++)
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	8f 5f       	subi	r24, 0xFF	; 255
    1c98:	8a 83       	std	Y+2, r24	; 0x02
    1c9a:	19 c0       	rjmp	.+50     	; 0x1cce <main+0x13c>
							counter++;
						}

						else
						{
							CLCD_voidGoToXY(0,0);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
							CLCD_voidSendString("                ");
    1ca4:	80 e6       	ldi	r24, 0x60	; 96
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
							CLCD_voidGoToXY(0,0);
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
							CLCD_voidSendString("Wrong Password");
    1cb4:	81 e7       	ldi	r24, 0x71	; 113
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
		}


	}

}
    1cbc:	6c 96       	adiw	r28, 0x1c	; 28
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret
					CLCD_voidSendString("Wrong Password");
				}

				else
				{
					for(i=0; i<6; i++)
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	86 30       	cpi	r24, 0x06	; 6
    1cd2:	48 f2       	brcs	.-110    	; 0x1c66 <main+0xd4>
						}

					}
				}

				if(counter==6)
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	86 30       	cpi	r24, 0x06	; 6
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <main+0x14a>
    1cda:	93 cf       	rjmp	.-218    	; 0x1c02 <main+0x70>
				{
					CLCD_voidGoToXY(0,0);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
					CLCD_voidSendString("                ");
    1ce4:	80 e6       	ldi	r24, 0x60	; 96
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,0);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
					CLCD_voidSendString("Welcome Home");
    1cf4:	80 e8       	ldi	r24, 0x80	; 128
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,0);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
					CLCD_voidSendString("                ");
    1d04:	80 e6       	ldi	r24, 0x60	; 96
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>

					while(1)
					{
						ADC_u8GetResultSync(0,&ANALOG);
    1d0c:	9e 01       	movw	r18, r28
    1d0e:	2c 5e       	subi	r18, 0xEC	; 236
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	b9 01       	movw	r22, r18
    1d16:	0e 94 2e 06 	call	0xc5c	; 0xc5c <ADC_u8GetResultSync>
						//						DIO_u8SetPortValue(DIO_u8PORTC,ANALOG);
						//						CLCD_voidDisplayNumber(ANALOG);
						CLCD_voidGoToXY(1,0);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CLCD_voidGoToXY>
						CLCD_voidSendString("temp = ");
    1d22:	8d e8       	ldi	r24, 0x8D	; 141
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 ac 08 	call	0x1158	; 0x1158 <CLCD_voidSendString>
						LM35_voidTempratureReading(ANALOG,&Temp);
    1d2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d2e:	9e 01       	movw	r18, r28
    1d30:	2a 5e       	subi	r18, 0xEA	; 234
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	b9 01       	movw	r22, r18
    1d36:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LM35_voidTempratureReading>
						CLCD_voidDisplayNumber(Temp);
    1d3a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d3c:	9f 89       	ldd	r25, Y+23	; 0x17
    1d3e:	cc 01       	movw	r24, r24
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 c3 09 	call	0x1386	; 0x1386 <CLCD_voidDisplayNumber>
    1d4c:	df cf       	rjmp	.-66     	; 0x1d0c <main+0x17a>
				}
			}

			else
			{
				entry[i] = Local_u8Key;
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	ce 01       	movw	r24, r28
    1d56:	0a 96       	adiw	r24, 0x0a	; 10
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	80 83       	st	Z, r24
				i++;
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	8a 83       	std	Y+2, r24	; 0x02
				CLCD_voidDisplayNumber(Local_u8Key);
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e0       	ldi	r26, 0x00	; 0
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 c3 09 	call	0x1386	; 0x1386 <CLCD_voidDisplayNumber>
    1d7a:	43 cf       	rjmp	.-378    	; 0x1c02 <main+0x70>

00001d7c <__udivmodhi4>:
    1d7c:	aa 1b       	sub	r26, r26
    1d7e:	bb 1b       	sub	r27, r27
    1d80:	51 e1       	ldi	r21, 0x11	; 17
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <__udivmodhi4_ep>

00001d84 <__udivmodhi4_loop>:
    1d84:	aa 1f       	adc	r26, r26
    1d86:	bb 1f       	adc	r27, r27
    1d88:	a6 17       	cp	r26, r22
    1d8a:	b7 07       	cpc	r27, r23
    1d8c:	10 f0       	brcs	.+4      	; 0x1d92 <__udivmodhi4_ep>
    1d8e:	a6 1b       	sub	r26, r22
    1d90:	b7 0b       	sbc	r27, r23

00001d92 <__udivmodhi4_ep>:
    1d92:	88 1f       	adc	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	5a 95       	dec	r21
    1d98:	a9 f7       	brne	.-22     	; 0x1d84 <__udivmodhi4_loop>
    1d9a:	80 95       	com	r24
    1d9c:	90 95       	com	r25
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	08 95       	ret

00001da4 <__udivmodsi4>:
    1da4:	a1 e2       	ldi	r26, 0x21	; 33
    1da6:	1a 2e       	mov	r1, r26
    1da8:	aa 1b       	sub	r26, r26
    1daa:	bb 1b       	sub	r27, r27
    1dac:	fd 01       	movw	r30, r26
    1dae:	0d c0       	rjmp	.+26     	; 0x1dca <__udivmodsi4_ep>

00001db0 <__udivmodsi4_loop>:
    1db0:	aa 1f       	adc	r26, r26
    1db2:	bb 1f       	adc	r27, r27
    1db4:	ee 1f       	adc	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	a2 17       	cp	r26, r18
    1dba:	b3 07       	cpc	r27, r19
    1dbc:	e4 07       	cpc	r30, r20
    1dbe:	f5 07       	cpc	r31, r21
    1dc0:	20 f0       	brcs	.+8      	; 0x1dca <__udivmodsi4_ep>
    1dc2:	a2 1b       	sub	r26, r18
    1dc4:	b3 0b       	sbc	r27, r19
    1dc6:	e4 0b       	sbc	r30, r20
    1dc8:	f5 0b       	sbc	r31, r21

00001dca <__udivmodsi4_ep>:
    1dca:	66 1f       	adc	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	1a 94       	dec	r1
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <__udivmodsi4_loop>
    1dd6:	60 95       	com	r22
    1dd8:	70 95       	com	r23
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	9b 01       	movw	r18, r22
    1de0:	ac 01       	movw	r20, r24
    1de2:	bd 01       	movw	r22, r26
    1de4:	cf 01       	movw	r24, r30
    1de6:	08 95       	ret

00001de8 <__prologue_saves__>:
    1de8:	2f 92       	push	r2
    1dea:	3f 92       	push	r3
    1dec:	4f 92       	push	r4
    1dee:	5f 92       	push	r5
    1df0:	6f 92       	push	r6
    1df2:	7f 92       	push	r7
    1df4:	8f 92       	push	r8
    1df6:	9f 92       	push	r9
    1df8:	af 92       	push	r10
    1dfa:	bf 92       	push	r11
    1dfc:	cf 92       	push	r12
    1dfe:	df 92       	push	r13
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	ca 1b       	sub	r28, r26
    1e12:	db 0b       	sbc	r29, r27
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	09 94       	ijmp

00001e20 <__epilogue_restores__>:
    1e20:	2a 88       	ldd	r2, Y+18	; 0x12
    1e22:	39 88       	ldd	r3, Y+17	; 0x11
    1e24:	48 88       	ldd	r4, Y+16	; 0x10
    1e26:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e28:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e30:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e32:	b9 84       	ldd	r11, Y+9	; 0x09
    1e34:	c8 84       	ldd	r12, Y+8	; 0x08
    1e36:	df 80       	ldd	r13, Y+7	; 0x07
    1e38:	ee 80       	ldd	r14, Y+6	; 0x06
    1e3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e3c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e3e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e40:	aa 81       	ldd	r26, Y+2	; 0x02
    1e42:	b9 81       	ldd	r27, Y+1	; 0x01
    1e44:	ce 0f       	add	r28, r30
    1e46:	d1 1d       	adc	r29, r1
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	ed 01       	movw	r28, r26
    1e54:	08 95       	ret

00001e56 <_exit>:
    1e56:	f8 94       	cli

00001e58 <__stop_program>:
    1e58:	ff cf       	rjmp	.-2      	; 0x1e58 <__stop_program>
