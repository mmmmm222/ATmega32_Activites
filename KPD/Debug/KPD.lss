
KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ac4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001ac4  00001b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001458  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c48  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000069dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000778c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000078ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00007b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b6 0b 	call	0x176c	; 0x176c <main>
      7a:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	  2-r\w => write
	  3- data => command to the eight pins
	  4-enable pulse for 2 milli seconds
	 */
	/*set rs to low*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>

	/* set command to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 4b 0a 	call	0x1496	; 0x1496 <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>
}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs to HIGH for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>

	/* set Data to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>

}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_voidSendString>:

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <CLCD_voidSendString+0x6>
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9b 83       	std	Y+3, r25	; 0x03
     dbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	0e c0       	rjmp	.+28     	; 0xdde <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	fc 01       	movw	r30, r24
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	80 81       	ld	r24, Z
     dd4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		Local_u8Counter++;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	89 83       	std	Y+1, r24	; 0x01

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	39 f7       	brne	.-50     	; 0xdc2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
	/*complete in the second line*/
		if(Local_u8Counter == 16)
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	80 31       	cpi	r24, 0x10	; 16
     df8:	21 f4       	brne	.+8      	; 0xe02 <CLCD_voidSendString+0x54>
		{
			CLCD_voidGoToXY(1,0);
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidGoToXY>
		}

}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <CLCD_voidGoToXY+0x6>
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address=0;
     e1e:	19 82       	std	Y+1, r1	; 0x01

	/*if x ==0 we target the first line*/
	if(Copy_u8XPos == 0)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	88 23       	and	r24, r24
     e24:	19 f4       	brne	.+6      	; 0xe2c <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Address=Copy_u8YPos;
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <CLCD_voidGoToXY+0x2a>
	}

	/*if x ==1 we target the second line*/
	else if(Copy_u8XPos == 1)
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	19 f4       	brne	.+6      	; 0xe38 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Address=Copy_u8YPos+(0x40);
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	80 5c       	subi	r24, 0xC0	; 192
     e36:	89 83       	std	Y+1, r24	; 0x01
	}
	/*here we added 128 because the binary address we got is 7 digits only and we need the 8th digit to be 1*/
	CLCD_voidSendCommand(Local_u8Address+128);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	80 58       	subi	r24, 0x80	; 128
     e3c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <CLCD_voidInit>:


void CLCD_voidInit(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2e 97       	sbiw	r28, 0x0e	; 14
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e2       	ldi	r26, 0x20	; 32
     e66:	b2 e4       	ldi	r27, 0x42	; 66
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	9c 87       	std	Y+12, r25	; 0x0c
     e6c:	ad 87       	std	Y+13, r26	; 0x0d
     e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a ef       	ldi	r20, 0xFA	; 250
     e7e:	54 e4       	ldi	r21, 0x44	; 68
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <CLCD_voidInit+0x66>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <CLCD_voidInit+0xc6>
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <CLCD_voidInit+0xb4>
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <CLCD_voidInit+0xa8>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <CLCD_voidInit+0xf0>
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
	/*1 => (5*11)(columns of pixels)*(Rows of pixels) bigger font  */
	/*X => don not care choose any value*/
	/*the R/s and r/w have been chosen before*/

	/*we choose two lines and 5*8 Font size */
	CLCD_voidSendCommand(0b00111100);
     f44:	8c e3       	ldi	r24, 0x3C	; 60
     f46:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	/* 0 |  0  |  0  |  0  |  0  |  0  |  1  |  D  |  C  |  B  */
	/*D => Display enable 0=> disable & 1=> enable*/
	/*C => cursor enable 0=> disable & 1=> enable */
	/*B => blink cursor 0=> don't blink & 1=> blink*/
	/*Display(screen) on/off command & the cursor state*/
	CLCD_voidSendCommand(0b00001100);
     f4a:	8c e0       	ldi	r24, 0x0C	; 12
     f4c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*clear screen it is a fixed command */
	CLCD_voidSendCommand(0b00000001);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
     f56:	2e 96       	adiw	r28, 0x0e	; 14
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidWriteSpecialCharacter>:

/*CGRAM => charchater gerenator ram */


void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	27 97       	sbiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	6d 83       	std	Y+5, r22	; 0x05
     f82:	4e 83       	std	Y+6, r20	; 0x06
     f84:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8Iterator;
     f86:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 5c       	subi	r24, 0xC0	; 192
     fa0:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	78 f3       	brcs	.-34     	; 0xfa8 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*go to the target pos*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidGoToXY>

	/*display the pattern */
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>

}
     fd8:	27 96       	adiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	65 97       	sbiw	r28, 0x15	; 21
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	69 87       	std	Y+9, r22	; 0x09
    1000:	7a 87       	std	Y+10, r23	; 0x0a
    1002:	8b 87       	std	Y+11, r24	; 0x0b
    1004:	9c 87       	std	Y+12, r25	; 0x0c
				case 8 :CLCD_voidSendData('8');break;
				case 9 :CLCD_voidSendData('9');break;
			}
		}
	}
}
    1006:	2d b7       	in	r18, 0x3d	; 61
    1008:	3e b7       	in	r19, 0x3e	; 62
    100a:	3d 8b       	std	Y+21, r19	; 0x15
    100c:	2c 8b       	std	Y+20, r18	; 0x14
}


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
	if(Copy_u32Number == 0)
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	ab 85       	ldd	r26, Y+11	; 0x0b
    1014:	bc 85       	ldd	r27, Y+12	; 0x0c
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	a1 05       	cpc	r26, r1
    101a:	b1 05       	cpc	r27, r1
    101c:	21 f4       	brne	.+8      	; 0x1026 <CLCD_voidWriteNumber+0x3c>
	{
		CLCD_voidSendData('0');
    101e:	80 e3       	ldi	r24, 0x30	; 48
    1020:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1024:	0c c1       	rjmp	.+536    	; 0x123e <CLCD_voidWriteNumber+0x254>
    1026:	8d b7       	in	r24, 0x3d	; 61
    1028:	9e b7       	in	r25, 0x3e	; 62
    102a:	9e 87       	std	Y+14, r25	; 0x0e
    102c:	8d 87       	std	Y+13, r24	; 0x0d
	}
	else
	{
		u8 Local_u8DigitsCounter=0;
    102e:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Temprorary = Copy_u32Number;
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	ab 85       	ldd	r26, Y+11	; 0x0b
    1036:	bc 85       	ldd	r27, Y+12	; 0x0c
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	ac 83       	std	Y+4, r26	; 0x04
    103e:	bd 83       	std	Y+5, r27	; 0x05
    1040:	15 c0       	rjmp	.+42     	; 0x106c <CLCD_voidWriteNumber+0x82>

		/*counting number of digits*/
		while(Local_u8Temprorary !=0)
		{
			Local_u8DigitsCounter++;
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	8e 83       	std	Y+6, r24	; 0x06
			Local_u8Temprorary /=10;
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	ac 81       	ldd	r26, Y+4	; 0x04
    104e:	bd 81       	ldd	r27, Y+5	; 0x05
    1050:	2a e0       	ldi	r18, 0x0A	; 10
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    1060:	da 01       	movw	r26, r20
    1062:	c9 01       	movw	r24, r18
    1064:	8a 83       	std	Y+2, r24	; 0x02
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	ac 83       	std	Y+4, r26	; 0x04
    106a:	bd 83       	std	Y+5, r27	; 0x05
	{
		u8 Local_u8DigitsCounter=0;
		u32 Local_u8Temprorary = Copy_u32Number;

		/*counting number of digits*/
		while(Local_u8Temprorary !=0)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	ac 81       	ldd	r26, Y+4	; 0x04
    1072:	bd 81       	ldd	r27, Y+5	; 0x05
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	a1 05       	cpc	r26, r1
    1078:	b1 05       	cpc	r27, r1
    107a:	19 f7       	brne	.-58     	; 0x1042 <CLCD_voidWriteNumber+0x58>
		{
			Local_u8DigitsCounter++;
			Local_u8Temprorary /=10;
		}

		u8 Local_u8DigitsArray[Local_u8DigitsCounter];
    107c:	8e 81       	ldd	r24, Y+6	; 0x06
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2d b7       	in	r18, 0x3d	; 61
    1084:	3e b7       	in	r19, 0x3e	; 62
    1086:	28 1b       	sub	r18, r24
    1088:	39 0b       	sbc	r19, r25
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	3e bf       	out	0x3e, r19	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	2d bf       	out	0x3d, r18	; 61
    1094:	8d b7       	in	r24, 0x3d	; 61
    1096:	9e b7       	in	r25, 0x3e	; 62
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	9a 8b       	std	Y+18, r25	; 0x12
    109c:	89 8b       	std	Y+17, r24	; 0x11
    109e:	89 89       	ldd	r24, Y+17	; 0x11
    10a0:	9a 89       	ldd	r25, Y+18	; 0x12
    10a2:	00 96       	adiw	r24, 0x00	; 0
    10a4:	9a 8b       	std	Y+18, r25	; 0x12
    10a6:	89 8b       	std	Y+17, r24	; 0x11
    10a8:	29 89       	ldd	r18, Y+17	; 0x11
    10aa:	3a 89       	ldd	r19, Y+18	; 0x12
    10ac:	38 87       	std	Y+8, r19	; 0x08
    10ae:	2f 83       	std	Y+7, r18	; 0x07
		u8 Local_u8LoopCounter=0;
    10b0:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8LoopCounter=0; Local_u8LoopCounter<Local_u8DigitsCounter; Local_u8LoopCounter++ )
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	31 c0       	rjmp	.+98     	; 0x1118 <CLCD_voidWriteNumber+0x12e>
		{

			Local_u8Temprorary = Copy_u32Number%10;
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    10bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    10be:	2a e0       	ldi	r18, 0x0A	; 10
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	9b 83       	std	Y+3, r25	; 0x03
    10d6:	ac 83       	std	Y+4, r26	; 0x04
    10d8:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8DigitsArray[Local_u8LoopCounter] = Local_u8Temprorary;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a 81       	ldd	r20, Y+2	; 0x02
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	40 83       	st	Z, r20
			Copy_u32Number /=10;
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    10f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__udivmodsi4>
    1106:	da 01       	movw	r26, r20
    1108:	c9 01       	movw	r24, r18
    110a:	89 87       	std	Y+9, r24	; 0x09
    110c:	9a 87       	std	Y+10, r25	; 0x0a
    110e:	ab 87       	std	Y+11, r26	; 0x0b
    1110:	bc 87       	std	Y+12, r27	; 0x0c
			Local_u8Temprorary /=10;
		}

		u8 Local_u8DigitsArray[Local_u8DigitsCounter];
		u8 Local_u8LoopCounter=0;
		for(Local_u8LoopCounter=0; Local_u8LoopCounter<Local_u8DigitsCounter; Local_u8LoopCounter++ )
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	99 81       	ldd	r25, Y+1	; 0x01
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	98 17       	cp	r25, r24
    111e:	58 f2       	brcs	.-106    	; 0x10b6 <CLCD_voidWriteNumber+0xcc>
    1120:	79 c0       	rjmp	.+242    	; 0x1214 <CLCD_voidWriteNumber+0x22a>
			Copy_u32Number /=10;

		}
		while(Local_u8LoopCounter--)
		{
			switch(Local_u8DigitsArray[Local_u8LoopCounter])
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8f 81       	ldd	r24, Y+7	; 0x07
    112a:	98 85       	ldd	r25, Y+8	; 0x08
    112c:	fc 01       	movw	r30, r24
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	38 8b       	std	Y+16, r19	; 0x10
    113a:	2f 87       	std	Y+15, r18	; 0x0f
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	98 89       	ldd	r25, Y+16	; 0x10
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <CLCD_voidWriteNumber+0x15e>
    1146:	4f c0       	rjmp	.+158    	; 0x11e6 <CLCD_voidWriteNumber+0x1fc>
    1148:	2f 85       	ldd	r18, Y+15	; 0x0f
    114a:	38 89       	ldd	r19, Y+16	; 0x10
    114c:	25 30       	cpi	r18, 0x05	; 5
    114e:	31 05       	cpc	r19, r1
    1150:	d4 f4       	brge	.+52     	; 0x1186 <CLCD_voidWriteNumber+0x19c>
    1152:	8f 85       	ldd	r24, Y+15	; 0x0f
    1154:	98 89       	ldd	r25, Y+16	; 0x10
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	c9 f1       	breq	.+114    	; 0x11ce <CLCD_voidWriteNumber+0x1e4>
    115c:	2f 85       	ldd	r18, Y+15	; 0x0f
    115e:	38 89       	ldd	r19, Y+16	; 0x10
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <CLCD_voidWriteNumber+0x186>
    1166:	8f 85       	ldd	r24, Y+15	; 0x0f
    1168:	98 89       	ldd	r25, Y+16	; 0x10
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f1       	breq	.+88     	; 0x11c6 <CLCD_voidWriteNumber+0x1dc>
    116e:	52 c0       	rjmp	.+164    	; 0x1214 <CLCD_voidWriteNumber+0x22a>
    1170:	2f 85       	ldd	r18, Y+15	; 0x0f
    1172:	38 89       	ldd	r19, Y+16	; 0x10
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	71 f1       	breq	.+92     	; 0x11d6 <CLCD_voidWriteNumber+0x1ec>
    117a:	8f 85       	ldd	r24, Y+15	; 0x0f
    117c:	98 89       	ldd	r25, Y+16	; 0x10
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	69 f1       	breq	.+90     	; 0x11de <CLCD_voidWriteNumber+0x1f4>
    1184:	47 c0       	rjmp	.+142    	; 0x1214 <CLCD_voidWriteNumber+0x22a>
    1186:	2f 85       	ldd	r18, Y+15	; 0x0f
    1188:	38 89       	ldd	r19, Y+16	; 0x10
    118a:	27 30       	cpi	r18, 0x07	; 7
    118c:	31 05       	cpc	r19, r1
    118e:	b9 f1       	breq	.+110    	; 0x11fe <CLCD_voidWriteNumber+0x214>
    1190:	8f 85       	ldd	r24, Y+15	; 0x0f
    1192:	98 89       	ldd	r25, Y+16	; 0x10
    1194:	88 30       	cpi	r24, 0x08	; 8
    1196:	91 05       	cpc	r25, r1
    1198:	5c f4       	brge	.+22     	; 0x11b0 <CLCD_voidWriteNumber+0x1c6>
    119a:	2f 85       	ldd	r18, Y+15	; 0x0f
    119c:	38 89       	ldd	r19, Y+16	; 0x10
    119e:	25 30       	cpi	r18, 0x05	; 5
    11a0:	31 05       	cpc	r19, r1
    11a2:	29 f1       	breq	.+74     	; 0x11ee <CLCD_voidWriteNumber+0x204>
    11a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a6:	98 89       	ldd	r25, Y+16	; 0x10
    11a8:	86 30       	cpi	r24, 0x06	; 6
    11aa:	91 05       	cpc	r25, r1
    11ac:	21 f1       	breq	.+72     	; 0x11f6 <CLCD_voidWriteNumber+0x20c>
    11ae:	32 c0       	rjmp	.+100    	; 0x1214 <CLCD_voidWriteNumber+0x22a>
    11b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    11b2:	38 89       	ldd	r19, Y+16	; 0x10
    11b4:	28 30       	cpi	r18, 0x08	; 8
    11b6:	31 05       	cpc	r19, r1
    11b8:	31 f1       	breq	.+76     	; 0x1206 <CLCD_voidWriteNumber+0x21c>
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	98 89       	ldd	r25, Y+16	; 0x10
    11be:	89 30       	cpi	r24, 0x09	; 9
    11c0:	91 05       	cpc	r25, r1
    11c2:	29 f1       	breq	.+74     	; 0x120e <CLCD_voidWriteNumber+0x224>
    11c4:	27 c0       	rjmp	.+78     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
			{
				case 0 :CLCD_voidSendData('0');break;
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11cc:	23 c0       	rjmp	.+70     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 1 :CLCD_voidSendData('1');break;
    11ce:	81 e3       	ldi	r24, 0x31	; 49
    11d0:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11d4:	1f c0       	rjmp	.+62     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 2 :CLCD_voidSendData('2');break;
    11d6:	82 e3       	ldi	r24, 0x32	; 50
    11d8:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11dc:	1b c0       	rjmp	.+54     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 3 :CLCD_voidSendData('3');break;
    11de:	83 e3       	ldi	r24, 0x33	; 51
    11e0:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11e4:	17 c0       	rjmp	.+46     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 4 :CLCD_voidSendData('4');break;
    11e6:	84 e3       	ldi	r24, 0x34	; 52
    11e8:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11ec:	13 c0       	rjmp	.+38     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 5 :CLCD_voidSendData('5');break;
    11ee:	85 e3       	ldi	r24, 0x35	; 53
    11f0:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 6 :CLCD_voidSendData('6');break;
    11f6:	86 e3       	ldi	r24, 0x36	; 54
    11f8:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 7 :CLCD_voidSendData('7');break;
    11fe:	87 e3       	ldi	r24, 0x37	; 55
    1200:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 8 :CLCD_voidSendData('8');break;
    1206:	88 e3       	ldi	r24, 0x38	; 56
    1208:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <CLCD_voidWriteNumber+0x22a>
				case 9 :CLCD_voidSendData('9');break;
    120e:	89 e3       	ldi	r24, 0x39	; 57
    1210:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
			Local_u8Temprorary = Copy_u32Number%10;
			Local_u8DigitsArray[Local_u8LoopCounter] = Local_u8Temprorary;
			Copy_u32Number /=10;

		}
		while(Local_u8LoopCounter--)
    1214:	99 81       	ldd	r25, Y+1	; 0x01
    1216:	9b 8b       	std	Y+19, r25	; 0x13
    1218:	2b 89       	ldd	r18, Y+19	; 0x13
    121a:	22 23       	and	r18, r18
    121c:	11 f0       	breq	.+4      	; 0x1222 <CLCD_voidWriteNumber+0x238>
    121e:	31 e0       	ldi	r19, 0x01	; 1
    1220:	3b 8b       	std	Y+19, r19	; 0x13
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	99 81       	ldd	r25, Y+1	; 0x01
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	99 83       	std	Y+1, r25	; 0x01
    122a:	88 23       	and	r24, r24
    122c:	09 f0       	breq	.+2      	; 0x1230 <CLCD_voidWriteNumber+0x246>
    122e:	79 cf       	rjmp	.-270    	; 0x1122 <CLCD_voidWriteNumber+0x138>
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	9e bf       	out	0x3e, r25	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	8d bf       	out	0x3d, r24	; 61
				case 8 :CLCD_voidSendData('8');break;
				case 9 :CLCD_voidSendData('9');break;
			}
		}
	}
}
    123e:	2c 89       	ldd	r18, Y+20	; 0x14
    1240:	3d 89       	ldd	r19, Y+21	; 0x15
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	3e bf       	out	0x3e, r19	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	2d bf       	out	0x3d, r18	; 61
    124c:	65 96       	adiw	r28, 0x15	; 21
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLEAR_CMD);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	28 97       	sbiw	r28, 0x08	; 8
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	6b 83       	std	Y+3, r22	; 0x03
    128a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    128c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	08 f0       	brcs	.+2      	; 0x1296 <DIO_u8SetPinValue+0x24>
    1294:	f4 c0       	rjmp	.+488    	; 0x147e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	09 f0       	breq	.+2      	; 0x129e <DIO_u8SetPinValue+0x2c>
    129c:	72 c0       	rjmp	.+228    	; 0x1382 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	38 87       	std	Y+8, r19	; 0x08
    12a6:	2f 83       	std	Y+7, r18	; 0x07
    12a8:	8f 81       	ldd	r24, Y+7	; 0x07
    12aa:	98 85       	ldd	r25, Y+8	; 0x08
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	49 f1       	breq	.+82     	; 0x1304 <DIO_u8SetPinValue+0x92>
    12b2:	2f 81       	ldd	r18, Y+7	; 0x07
    12b4:	38 85       	ldd	r19, Y+8	; 0x08
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_u8SetPinValue+0x54>
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_u8SetPinValue+0x6a>
    12c4:	5b c0       	rjmp	.+182    	; 0x137c <DIO_u8SetPinValue+0x10a>
    12c6:	2f 81       	ldd	r18, Y+7	; 0x07
    12c8:	38 85       	ldd	r19, Y+8	; 0x08
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	71 f1       	breq	.+92     	; 0x132c <DIO_u8SetPinValue+0xba>
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	e9 f1       	breq	.+122    	; 0x1354 <DIO_u8SetPinValue+0xe2>
    12da:	50 c0       	rjmp	.+160    	; 0x137c <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8SetPinValue+0x88>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8SetPinValue+0x84>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	bf c0       	rjmp	.+382    	; 0x1482 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8SetPinValue+0xb0>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8SetPinValue+0xac>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	ab c0       	rjmp	.+342    	; 0x1482 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
    132c:	a5 e3       	ldi	r26, 0x35	; 53
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_u8SetPinValue+0xd8>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_u8SetPinValue+0xd4>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	97 c0       	rjmp	.+302    	; 0x1482 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
    1354:	a2 e3       	ldi	r26, 0x32	; 50
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_u8SetPinValue+0x100>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_u8SetPinValue+0xfc>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	83 c0       	rjmp	.+262    	; 0x1482 <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	80 c0       	rjmp	.+256    	; 0x1482 <DIO_u8SetPinValue+0x210>

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	88 23       	and	r24, r24
    1386:	09 f0       	breq	.+2      	; 0x138a <DIO_u8SetPinValue+0x118>
    1388:	77 c0       	rjmp	.+238    	; 0x1478 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3e 83       	std	Y+6, r19	; 0x06
    1392:	2d 83       	std	Y+5, r18	; 0x05
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	59 f1       	breq	.+86     	; 0x13f4 <DIO_u8SetPinValue+0x182>
    139e:	2d 81       	ldd	r18, Y+5	; 0x05
    13a0:	3e 81       	ldd	r19, Y+6	; 0x06
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <DIO_u8SetPinValue+0x140>
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f0       	breq	.+26     	; 0x13ca <DIO_u8SetPinValue+0x158>
    13b0:	60 c0       	rjmp	.+192    	; 0x1472 <DIO_u8SetPinValue+0x200>
    13b2:	2d 81       	ldd	r18, Y+5	; 0x05
    13b4:	3e 81       	ldd	r19, Y+6	; 0x06
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	89 f1       	breq	.+98     	; 0x141e <DIO_u8SetPinValue+0x1ac>
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <DIO_u8SetPinValue+0x156>
    13c6:	40 c0       	rjmp	.+128    	; 0x1448 <DIO_u8SetPinValue+0x1d6>
    13c8:	54 c0       	rjmp	.+168    	; 0x1472 <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
    13ca:	ab e3       	ldi	r26, 0x3B	; 59
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	eb e3       	ldi	r30, 0x3B	; 59
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_u8SetPinValue+0x176>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_u8SetPinValue+0x172>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	47 c0       	rjmp	.+142    	; 0x1482 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
    13f4:	a8 e3       	ldi	r26, 0x38	; 56
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8SetPinValue+0x1a0>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_u8SetPinValue+0x19c>
    1416:	80 95       	com	r24
    1418:	84 23       	and	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	32 c0       	rjmp	.+100    	; 0x1482 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_u8SetPinValue+0x1ca>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_u8SetPinValue+0x1c6>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	1d c0       	rjmp	.+58     	; 0x1482 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_u8SetPinValue+0x1f4>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_u8SetPinValue+0x1f0>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <DIO_u8SetPinValue+0x210>
			}
		}

		else
		{
			Local_u8ErrorState=1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	28 96       	adiw	r28, 0x08	; 8
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_u8SetPortValue+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_u8SetPortValue+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    14a8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3d 83       	std	Y+5, r19	; 0x05
    14b2:	2c 83       	std	Y+4, r18	; 0x04
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <DIO_u8SetPortValue+0x5c>
    14be:	2c 81       	ldd	r18, Y+4	; 0x04
    14c0:	3d 81       	ldd	r19, Y+5	; 0x05
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <DIO_u8SetPortValue+0x3c>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <DIO_u8SetPortValue+0x52>
    14d0:	1f c0       	rjmp	.+62     	; 0x1510 <DIO_u8SetPortValue+0x7a>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <DIO_u8SetPortValue+0x66>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <DIO_u8SetPortValue+0x70>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	80 83       	st	Z, r24
    14f0:	11 c0       	rjmp	.+34     	; 0x1514 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	80 83       	st	Z, r24
    14fa:	0c c0       	rjmp	.+24     	; 0x1514 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 83       	st	Z, r24
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 83       	st	Z, r24
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState=1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	27 97       	sbiw	r28, 0x07	; 7
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	8a 83       	std	Y+2, r24	; 0x02
    153c:	6b 83       	std	Y+3, r22	; 0x03
    153e:	5d 83       	std	Y+5, r21	; 0x05
    1540:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1542:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	09 f4       	brne	.+2      	; 0x154e <DIO_u8GetPinValue+0x28>
    154c:	78 c0       	rjmp	.+240    	; 0x163e <DIO_u8GetPinValue+0x118>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 30       	cpi	r24, 0x08	; 8
    1552:	08 f0       	brcs	.+2      	; 0x1556 <DIO_u8GetPinValue+0x30>
    1554:	74 c0       	rjmp	.+232    	; 0x163e <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3f 83       	std	Y+7, r19	; 0x07
    155e:	2e 83       	std	Y+6, r18	; 0x06
    1560:	4e 81       	ldd	r20, Y+6	; 0x06
    1562:	5f 81       	ldd	r21, Y+7	; 0x07
    1564:	41 30       	cpi	r20, 0x01	; 1
    1566:	51 05       	cpc	r21, r1
    1568:	59 f1       	breq	.+86     	; 0x15c0 <DIO_u8GetPinValue+0x9a>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	91 05       	cpc	r25, r1
    1572:	34 f4       	brge	.+12     	; 0x1580 <DIO_u8GetPinValue+0x5a>
    1574:	2e 81       	ldd	r18, Y+6	; 0x06
    1576:	3f 81       	ldd	r19, Y+7	; 0x07
    1578:	21 15       	cp	r18, r1
    157a:	31 05       	cpc	r19, r1
    157c:	69 f0       	breq	.+26     	; 0x1598 <DIO_u8GetPinValue+0x72>
    157e:	5c c0       	rjmp	.+184    	; 0x1638 <DIO_u8GetPinValue+0x112>
    1580:	4e 81       	ldd	r20, Y+6	; 0x06
    1582:	5f 81       	ldd	r21, Y+7	; 0x07
    1584:	42 30       	cpi	r20, 0x02	; 2
    1586:	51 05       	cpc	r21, r1
    1588:	79 f1       	breq	.+94     	; 0x15e8 <DIO_u8GetPinValue+0xc2>
    158a:	8e 81       	ldd	r24, Y+6	; 0x06
    158c:	9f 81       	ldd	r25, Y+7	; 0x07
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <DIO_u8GetPinValue+0x70>
    1594:	3d c0       	rjmp	.+122    	; 0x1610 <DIO_u8GetPinValue+0xea>
    1596:	50 c0       	rjmp	.+160    	; 0x1638 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
    1598:	e9 e3       	ldi	r30, 0x39	; 57
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_u8GetPinValue+0x8a>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_u8GetPinValue+0x86>
    15b4:	ca 01       	movw	r24, r20
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ba:	fd 81       	ldd	r31, Y+5	; 0x05
    15bc:	80 83       	st	Z, r24
    15be:	41 c0       	rjmp	.+130    	; 0x1642 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
    15c0:	e6 e3       	ldi	r30, 0x36	; 54
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_u8GetPinValue+0xb2>
    15d4:	55 95       	asr	r21
    15d6:	47 95       	ror	r20
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_u8GetPinValue+0xae>
    15dc:	ca 01       	movw	r24, r20
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	ec 81       	ldd	r30, Y+4	; 0x04
    15e2:	fd 81       	ldd	r31, Y+5	; 0x05
    15e4:	80 83       	st	Z, r24
    15e6:	2d c0       	rjmp	.+90     	; 0x1642 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
    15e8:	e3 e3       	ldi	r30, 0x33	; 51
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a9 01       	movw	r20, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_u8GetPinValue+0xda>
    15fc:	55 95       	asr	r21
    15fe:	47 95       	ror	r20
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_u8GetPinValue+0xd6>
    1604:	ca 01       	movw	r24, r20
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	ec 81       	ldd	r30, Y+4	; 0x04
    160a:	fd 81       	ldd	r31, Y+5	; 0x05
    160c:	80 83       	st	Z, r24
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
    1610:	e0 e3       	ldi	r30, 0x30	; 48
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a9 01       	movw	r20, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_u8GetPinValue+0x102>
    1624:	55 95       	asr	r21
    1626:	47 95       	ror	r20
    1628:	8a 95       	dec	r24
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_u8GetPinValue+0xfe>
    162c:	ca 01       	movw	r24, r20
    162e:	81 70       	andi	r24, 0x01	; 1
    1630:	ec 81       	ldd	r30, Y+4	; 0x04
    1632:	fd 81       	ldd	r31, Y+5	; 0x05
    1634:	80 83       	st	Z, r24
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorState=1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
}
    1644:	27 96       	adiw	r28, 0x07	; 7
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_config.h"


u8 KEYPAD_u8GetPressedKey(void)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	28 97       	sbiw	r28, 0x08	; 8
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
	/*the only variable in our program which carry the value of the pressed key BUT in the beginning it carries the value which the user choosed to indicate the is no pressed key until it change */
	u32 Local_u8PressedKey = KEYPAD_NO_PRESSED_KEY ;
    166a:	82 e1       	ldi	r24, 0x12	; 18
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e0       	ldi	r26, 0x00	; 0
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	8b 83       	std	Y+3, r24	; 0x03
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	ad 83       	std	Y+5, r26	; 0x05
    1678:	be 83       	std	Y+6, r27	; 0x06
	u8 Local_u8PinState;
	/*defining the array which has the values of our kpd*/
	static u8 Local_u8KEYPADArr[ROW_NUMBER][COLUMN_NUMBER] = KEYPAD_ARR_VALUES;
	/*the iterators of the two for loops on for column the other for rows*/
	u8 Local_u8ColumnIndix = 0;
    167a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIndix = 0;
    167c:	19 82       	std	Y+1, r1	; 0x01
	/* get the pins which the user connected his kpd to on the mcu to loop on them to activate the columns on by one and read the rows to know which reads low */
	static u8 Local_u8ColumnArr[COLUMN_NUMBER] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUMBER] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	for(Local_u8ColumnIndix = 0; Local_u8ColumnIndix < COLUMN_NUMBER; Local_u8ColumnIndix++)
    167e:	1a 82       	std	Y+2, r1	; 0x02
    1680:	65 c0       	rjmp	.+202    	; 0x174c <KEYPAD_u8GetPressedKey+0xf6>
	{
		/*first step to activate current coulum by set in to low*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_LOW);
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	fc 01       	movw	r30, r24
    168a:	e4 59       	subi	r30, 0x94	; 148
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	90 81       	ld	r25, Z
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	69 2f       	mov	r22, r25
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>

		for(Local_u8RowIndix=0; Local_u8RowIndix<ROW_NUMBER; Local_u8RowIndix++)
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	44 c0       	rjmp	.+136    	; 0x1726 <KEYPAD_u8GetPressedKey+0xd0>
		{
			DIO_u8GetPinValue(KEYPAD_PORT,Local_u8RowArr[Local_u8RowIndix],&Local_u8PinState);
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	fc 01       	movw	r30, r24
    16a6:	e8 59       	subi	r30, 0x98	; 152
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	90 81       	ld	r25, Z
    16ac:	9e 01       	movw	r18, r28
    16ae:	29 5f       	subi	r18, 0xF9	; 249
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	69 2f       	mov	r22, r25
    16b6:	a9 01       	movw	r20, r18
    16b8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8GetPinValue>

			/*check if the switch is pressed*/
			if(DIO_u8PIN_LOW == Local_u8PinState)
    16bc:	8f 81       	ldd	r24, Y+7	; 0x07
    16be:	88 23       	and	r24, r24
    16c0:	79 f5       	brne	.+94     	; 0x1720 <KEYPAD_u8GetPressedKey+0xca>
			{
				Local_u8PressedKey = Local_u8KEYPADArr[Local_u8RowIndix][Local_u8ColumnIndix];
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	48 2f       	mov	r20, r24
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	ca 01       	movw	r24, r20
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	82 0f       	add	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	fc 01       	movw	r30, r24
    16de:	e0 59       	subi	r30, 0x90	; 144
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	8b 83       	std	Y+3, r24	; 0x03
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	ad 83       	std	Y+5, r26	; 0x05
    16f2:	be 83       	std	Y+6, r27	; 0x06
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <KEYPAD_u8GetPressedKey+0xbe>
				/*polling => type of busy waiting*/
				/*here i want the program to recall the getpin func. while the user is pushing the key */
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KEYPAD_PORT,Local_u8RowArr[Local_u8RowIndix],&Local_u8PinState);
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	fc 01       	movw	r30, r24
    16fe:	e8 59       	subi	r30, 0x98	; 152
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	90 81       	ld	r25, Z
    1704:	9e 01       	movw	r18, r28
    1706:	29 5f       	subi	r18, 0xF9	; 249
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	69 2f       	mov	r22, r25
    170e:	a9 01       	movw	r20, r18
    1710:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KEYPADArr[Local_u8RowIndix][Local_u8ColumnIndix];
				/*polling => type of busy waiting*/
				/*here i want the program to recall the getpin func. while the user is pushing the key */
				while(DIO_u8PIN_LOW == Local_u8PinState)
    1714:	8f 81       	ldd	r24, Y+7	; 0x07
    1716:	88 23       	and	r24, r24
    1718:	71 f3       	breq	.-36     	; 0x16f6 <KEYPAD_u8GetPressedKey+0xa0>
				{
					DIO_u8GetPinValue(KEYPAD_PORT,Local_u8RowArr[Local_u8RowIndix],&Local_u8PinState);
				}
				/* the program will return the value when the user pullup his hand from the switch*/
				return Local_u8PressedKey;
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 87       	std	Y+8, r24	; 0x08
    171e:	1c c0       	rjmp	.+56     	; 0x1758 <KEYPAD_u8GetPressedKey+0x102>
	for(Local_u8ColumnIndix = 0; Local_u8ColumnIndix < COLUMN_NUMBER; Local_u8ColumnIndix++)
	{
		/*first step to activate current coulum by set in to low*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_LOW);

		for(Local_u8RowIndix=0; Local_u8RowIndix<ROW_NUMBER; Local_u8RowIndix++)
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	08 f4       	brcc	.+2      	; 0x172e <KEYPAD_u8GetPressedKey+0xd8>
    172c:	b8 cf       	rjmp	.-144    	; 0x169e <KEYPAD_u8GetPressedKey+0x48>
				return Local_u8PressedKey;
			}
		}

		/*DeActivate the current column*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_HIGH);
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	fc 01       	movw	r30, r24
    1736:	e4 59       	subi	r30, 0x94	; 148
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	90 81       	ld	r25, Z
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	69 2f       	mov	r22, r25
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	0e 94 39 09 	call	0x1272	; 0x1272 <DIO_u8SetPinValue>
	u8 Local_u8RowIndix = 0;
	/* get the pins which the user connected his kpd to on the mcu to loop on them to activate the columns on by one and read the rows to know which reads low */
	static u8 Local_u8ColumnArr[COLUMN_NUMBER] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUMBER] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	for(Local_u8ColumnIndix = 0; Local_u8ColumnIndix < COLUMN_NUMBER; Local_u8ColumnIndix++)
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	84 30       	cpi	r24, 0x04	; 4
    1750:	08 f4       	brcc	.+2      	; 0x1754 <KEYPAD_u8GetPressedKey+0xfe>
    1752:	97 cf       	rjmp	.-210    	; 0x1682 <KEYPAD_u8GetPressedKey+0x2c>
		/*DeActivate the current column*/
		DIO_u8SetPinValue(KEYPAD_PORT,Local_u8ColumnArr[Local_u8ColumnIndix],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	88 87       	std	Y+8, r24	; 0x08
    1758:	88 85       	ldd	r24, Y+8	; 0x08
}
    175a:	28 96       	adiw	r28, 0x08	; 8
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <main>:
#include "CLCD_interface.h"

//void calc(void);

void main (void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	63 97       	sbiw	r28, 0x13	; 19
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	PORT_voidInIt();
    1780:	0e 94 c5 0c 	call	0x198a	; 0x198a <PORT_voidInIt>
	CLCD_voidInit();
    1784:	0e 94 26 07 	call	0xe4c	; 0xe4c <CLCD_voidInit>
	volatile u32 Local_u32Op1 ,Local_u32Op2 ,Local_u32Oprand ,Local_u32Result;
	Local_u32Op1 = Local_u32Op2 = Local_u32Oprand = Local_u32Result = 0;
    1788:	1e 86       	std	Y+14, r1	; 0x0e
    178a:	1f 86       	std	Y+15, r1	; 0x0f
    178c:	18 8a       	std	Y+16, r1	; 0x10
    178e:	19 8a       	std	Y+17, r1	; 0x11
    1790:	8e 85       	ldd	r24, Y+14	; 0x0e
    1792:	9f 85       	ldd	r25, Y+15	; 0x0f
    1794:	a8 89       	ldd	r26, Y+16	; 0x10
    1796:	b9 89       	ldd	r27, Y+17	; 0x11
    1798:	8a 87       	std	Y+10, r24	; 0x0a
    179a:	9b 87       	std	Y+11, r25	; 0x0b
    179c:	ac 87       	std	Y+12, r26	; 0x0c
    179e:	bd 87       	std	Y+13, r27	; 0x0d
    17a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    17a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    17a8:	8e 83       	std	Y+6, r24	; 0x06
    17aa:	9f 83       	std	Y+7, r25	; 0x07
    17ac:	a8 87       	std	Y+8, r26	; 0x08
    17ae:	b9 87       	std	Y+9, r27	; 0x09
    17b0:	8e 81       	ldd	r24, Y+6	; 0x06
    17b2:	9f 81       	ldd	r25, Y+7	; 0x07
    17b4:	a8 85       	ldd	r26, Y+8	; 0x08
    17b6:	b9 85       	ldd	r27, Y+9	; 0x09
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	9b 83       	std	Y+3, r25	; 0x03
    17bc:	ac 83       	std	Y+4, r26	; 0x04
    17be:	bd 83       	std	Y+5, r27	; 0x05
	while(1)
	{
		do
		{
			Local_u8Key = KEYPAD_u8GetPressedKey();
    17c0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <KEYPAD_u8GetPressedKey>
    17c4:	89 83       	std	Y+1, r24	; 0x01
		}while(Local_u8Key == 18);
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	82 31       	cpi	r24, 0x12	; 18
    17ca:	d1 f3       	breq	.-12     	; 0x17c0 <main+0x54>

		if(Local_u8Key>=0 && Local_u8Key<=9)
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	8a 30       	cpi	r24, 0x0A	; 10
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <main+0x68>
    17d2:	59 c0       	rjmp	.+178    	; 0x1886 <main+0x11a>
		{
			CLCD_voidWriteNumber(Local_u8Key);
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidWriteNumber>
			if(Local_u32Oprand == 0)
    17e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ea:	ac 85       	ldd	r26, Y+12	; 0x0c
    17ec:	bd 85       	ldd	r27, Y+13	; 0x0d
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	a1 05       	cpc	r26, r1
    17f2:	b1 05       	cpc	r27, r1
    17f4:	21 f5       	brne	.+72     	; 0x183e <main+0xd2>
			{
				Local_u32Op1*=10;
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	ac 81       	ldd	r26, Y+4	; 0x04
    17fc:	bd 81       	ldd	r27, Y+5	; 0x05
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsi3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	9b 83       	std	Y+3, r25	; 0x03
    1816:	ac 83       	std	Y+4, r26	; 0x04
    1818:	bd 83       	std	Y+5, r27	; 0x05
				Local_u32Op1 += Local_u8Key;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	9b 81       	ldd	r25, Y+3	; 0x03
    1828:	ac 81       	ldd	r26, Y+4	; 0x04
    182a:	bd 81       	ldd	r27, Y+5	; 0x05
    182c:	82 0f       	add	r24, r18
    182e:	93 1f       	adc	r25, r19
    1830:	a4 1f       	adc	r26, r20
    1832:	b5 1f       	adc	r27, r21
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	9b 83       	std	Y+3, r25	; 0x03
    1838:	ac 83       	std	Y+4, r26	; 0x04
    183a:	bd 83       	std	Y+5, r27	; 0x05
    183c:	c1 cf       	rjmp	.-126    	; 0x17c0 <main+0x54>
			}
			else
			{
				Local_u32Op2*=10;
    183e:	8e 81       	ldd	r24, Y+6	; 0x06
    1840:	9f 81       	ldd	r25, Y+7	; 0x07
    1842:	a8 85       	ldd	r26, Y+8	; 0x08
    1844:	b9 85       	ldd	r27, Y+9	; 0x09
    1846:	2a e0       	ldi	r18, 0x0A	; 10
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__mulsi3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8e 83       	std	Y+6, r24	; 0x06
    185c:	9f 83       	std	Y+7, r25	; 0x07
    185e:	a8 87       	std	Y+8, r26	; 0x08
    1860:	b9 87       	std	Y+9, r27	; 0x09
				Local_u32Op2 += Local_u8Key;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	8e 81       	ldd	r24, Y+6	; 0x06
    186e:	9f 81       	ldd	r25, Y+7	; 0x07
    1870:	a8 85       	ldd	r26, Y+8	; 0x08
    1872:	b9 85       	ldd	r27, Y+9	; 0x09
    1874:	82 0f       	add	r24, r18
    1876:	93 1f       	adc	r25, r19
    1878:	a4 1f       	adc	r26, r20
    187a:	b5 1f       	adc	r27, r21
    187c:	8e 83       	std	Y+6, r24	; 0x06
    187e:	9f 83       	std	Y+7, r25	; 0x07
    1880:	a8 87       	std	Y+8, r26	; 0x08
    1882:	b9 87       	std	Y+9, r27	; 0x09
    1884:	9d cf       	rjmp	.-198    	; 0x17c0 <main+0x54>
			}
		}
		else
		{
			Local_u32Oprand = Local_u8Key ;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	8a 87       	std	Y+10, r24	; 0x0a
    1892:	9b 87       	std	Y+11, r25	; 0x0b
    1894:	ac 87       	std	Y+12, r26	; 0x0c
    1896:	bd 87       	std	Y+13, r27	; 0x0d
			switch(Local_u8Key)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3b 8b       	std	Y+19, r19	; 0x13
    18a0:	2a 8b       	std	Y+18, r18	; 0x12
    18a2:	8a 89       	ldd	r24, Y+18	; 0x12
    18a4:	9b 89       	ldd	r25, Y+19	; 0x13
    18a6:	8d 33       	cpi	r24, 0x3D	; 61
    18a8:	91 05       	cpc	r25, r1
    18aa:	21 f1       	breq	.+72     	; 0x18f4 <main+0x188>
    18ac:	2a 89       	ldd	r18, Y+18	; 0x12
    18ae:	3b 89       	ldd	r19, Y+19	; 0x13
    18b0:	2e 33       	cpi	r18, 0x3E	; 62
    18b2:	31 05       	cpc	r19, r1
    18b4:	9c f4       	brge	.+38     	; 0x18dc <main+0x170>
    18b6:	8a 89       	ldd	r24, Y+18	; 0x12
    18b8:	9b 89       	ldd	r25, Y+19	; 0x13
    18ba:	8d 32       	cpi	r24, 0x2D	; 45
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <main+0x156>
    18c0:	5c c0       	rjmp	.+184    	; 0x197a <main+0x20e>
    18c2:	2a 89       	ldd	r18, Y+18	; 0x12
    18c4:	3b 89       	ldd	r19, Y+19	; 0x13
    18c6:	2f 32       	cpi	r18, 0x2F	; 47
    18c8:	31 05       	cpc	r19, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <main+0x162>
    18cc:	4e c0       	rjmp	.+156    	; 0x196a <main+0x1fe>
    18ce:	8a 89       	ldd	r24, Y+18	; 0x12
    18d0:	9b 89       	ldd	r25, Y+19	; 0x13
    18d2:	8b 32       	cpi	r24, 0x2B	; 43
    18d4:	91 05       	cpc	r25, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <main+0x16e>
    18d8:	54 c0       	rjmp	.+168    	; 0x1982 <main+0x216>
    18da:	72 cf       	rjmp	.-284    	; 0x17c0 <main+0x54>
    18dc:	2a 89       	ldd	r18, Y+18	; 0x12
    18de:	3b 89       	ldd	r19, Y+19	; 0x13
    18e0:	23 36       	cpi	r18, 0x63	; 99
    18e2:	31 05       	cpc	r19, r1
    18e4:	19 f1       	breq	.+70     	; 0x192c <main+0x1c0>
    18e6:	8a 89       	ldd	r24, Y+18	; 0x12
    18e8:	9b 89       	ldd	r25, Y+19	; 0x13
    18ea:	88 37       	cpi	r24, 0x78	; 120
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <main+0x186>
    18f0:	40 c0       	rjmp	.+128    	; 0x1972 <main+0x206>
    18f2:	66 cf       	rjmp	.-308    	; 0x17c0 <main+0x54>
			{

			case '=':
				Local_u32Result = Local_u32Op1 + Local_u32Op2 ;
    18f4:	2a 81       	ldd	r18, Y+2	; 0x02
    18f6:	3b 81       	ldd	r19, Y+3	; 0x03
    18f8:	4c 81       	ldd	r20, Y+4	; 0x04
    18fa:	5d 81       	ldd	r21, Y+5	; 0x05
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	a8 85       	ldd	r26, Y+8	; 0x08
    1902:	b9 85       	ldd	r27, Y+9	; 0x09
    1904:	82 0f       	add	r24, r18
    1906:	93 1f       	adc	r25, r19
    1908:	a4 1f       	adc	r26, r20
    190a:	b5 1f       	adc	r27, r21
    190c:	8e 87       	std	Y+14, r24	; 0x0e
    190e:	9f 87       	std	Y+15, r25	; 0x0f
    1910:	a8 8b       	std	Y+16, r26	; 0x10
    1912:	b9 8b       	std	Y+17, r27	; 0x11
				CLCD_voidSendData('=');
    1914:	8d e3       	ldi	r24, 0x3D	; 61
    1916:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
				CLCD_voidWriteNumber(Local_u32Result);
    191a:	8e 85       	ldd	r24, Y+14	; 0x0e
    191c:	9f 85       	ldd	r25, Y+15	; 0x0f
    191e:	a8 89       	ldd	r26, Y+16	; 0x10
    1920:	b9 89       	ldd	r27, Y+17	; 0x11
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidWriteNumber>
    192a:	4a cf       	rjmp	.-364    	; 0x17c0 <main+0x54>
				;break;
			case 'c':
				CLCD_voidClearScreen();
    192c:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_voidClearScreen>
				Local_u32Op1 = Local_u32Op2 = Local_u32Oprand = Local_u32Result = 0;
    1930:	1e 86       	std	Y+14, r1	; 0x0e
    1932:	1f 86       	std	Y+15, r1	; 0x0f
    1934:	18 8a       	std	Y+16, r1	; 0x10
    1936:	19 8a       	std	Y+17, r1	; 0x11
    1938:	8e 85       	ldd	r24, Y+14	; 0x0e
    193a:	9f 85       	ldd	r25, Y+15	; 0x0f
    193c:	a8 89       	ldd	r26, Y+16	; 0x10
    193e:	b9 89       	ldd	r27, Y+17	; 0x11
    1940:	8a 87       	std	Y+10, r24	; 0x0a
    1942:	9b 87       	std	Y+11, r25	; 0x0b
    1944:	ac 87       	std	Y+12, r26	; 0x0c
    1946:	bd 87       	std	Y+13, r27	; 0x0d
    1948:	8a 85       	ldd	r24, Y+10	; 0x0a
    194a:	9b 85       	ldd	r25, Y+11	; 0x0b
    194c:	ac 85       	ldd	r26, Y+12	; 0x0c
    194e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1950:	8e 83       	std	Y+6, r24	; 0x06
    1952:	9f 83       	std	Y+7, r25	; 0x07
    1954:	a8 87       	std	Y+8, r26	; 0x08
    1956:	b9 87       	std	Y+9, r27	; 0x09
    1958:	8e 81       	ldd	r24, Y+6	; 0x06
    195a:	9f 81       	ldd	r25, Y+7	; 0x07
    195c:	a8 85       	ldd	r26, Y+8	; 0x08
    195e:	b9 85       	ldd	r27, Y+9	; 0x09
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	9b 83       	std	Y+3, r25	; 0x03
    1964:	ac 83       	std	Y+4, r26	; 0x04
    1966:	bd 83       	std	Y+5, r27	; 0x05
    1968:	2b cf       	rjmp	.-426    	; 0x17c0 <main+0x54>
				break;

			case '/':CLCD_voidSendData('/');break;
    196a:	8f e2       	ldi	r24, 0x2F	; 47
    196c:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1970:	27 cf       	rjmp	.-434    	; 0x17c0 <main+0x54>
			case 'x':CLCD_voidSendData('x');break;
    1972:	88 e7       	ldi	r24, 0x78	; 120
    1974:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1978:	23 cf       	rjmp	.-442    	; 0x17c0 <main+0x54>
			case '-':CLCD_voidSendData('-');break;
    197a:	8d e2       	ldi	r24, 0x2D	; 45
    197c:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1980:	1f cf       	rjmp	.-450    	; 0x17c0 <main+0x54>
			case '+':CLCD_voidSendData('+');break;
    1982:	8b e2       	ldi	r24, 0x2B	; 43
    1984:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1988:	1b cf       	rjmp	.-458    	; 0x17c0 <main+0x54>

0000198a <PORT_voidInIt>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
    1992:	ea e3       	ldi	r30, 0x3A	; 58
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    199a:	e7 e3       	ldi	r30, 0x37	; 55
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8f e0       	ldi	r24, 0x0F	; 15
    19a0:	80 83       	st	Z, r24
    DDRC = PORTC_DIR;
    19a2:	e4 e3       	ldi	r30, 0x34	; 52
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	87 e0       	ldi	r24, 0x07	; 7
    19a8:	80 83       	st	Z, r24
    DDRD = PORTD_DIR;
    19aa:	e1 e3       	ldi	r30, 0x31	; 49
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	10 82       	st	Z, r1

    PORTA = PORTA_INITIAL_VALUE;
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	10 82       	st	Z, r1
    PORTB = PORTB_INITIAL_VALUE;
    19b6:	e8 e3       	ldi	r30, 0x38	; 56
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	80 83       	st	Z, r24
    PORTC = PORTC_INITIAL_VALUE;
    19be:	e5 e3       	ldi	r30, 0x35	; 53
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	10 82       	st	Z, r1
    PORTD = PORTD_INITIAL_VALUE;
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	10 82       	st	Z, r1
}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <__mulsi3>:
    19d0:	62 9f       	mul	r22, r18
    19d2:	d0 01       	movw	r26, r0
    19d4:	73 9f       	mul	r23, r19
    19d6:	f0 01       	movw	r30, r0
    19d8:	82 9f       	mul	r24, r18
    19da:	e0 0d       	add	r30, r0
    19dc:	f1 1d       	adc	r31, r1
    19de:	64 9f       	mul	r22, r20
    19e0:	e0 0d       	add	r30, r0
    19e2:	f1 1d       	adc	r31, r1
    19e4:	92 9f       	mul	r25, r18
    19e6:	f0 0d       	add	r31, r0
    19e8:	83 9f       	mul	r24, r19
    19ea:	f0 0d       	add	r31, r0
    19ec:	74 9f       	mul	r23, r20
    19ee:	f0 0d       	add	r31, r0
    19f0:	65 9f       	mul	r22, r21
    19f2:	f0 0d       	add	r31, r0
    19f4:	99 27       	eor	r25, r25
    19f6:	72 9f       	mul	r23, r18
    19f8:	b0 0d       	add	r27, r0
    19fa:	e1 1d       	adc	r30, r1
    19fc:	f9 1f       	adc	r31, r25
    19fe:	63 9f       	mul	r22, r19
    1a00:	b0 0d       	add	r27, r0
    1a02:	e1 1d       	adc	r30, r1
    1a04:	f9 1f       	adc	r31, r25
    1a06:	bd 01       	movw	r22, r26
    1a08:	cf 01       	movw	r24, r30
    1a0a:	11 24       	eor	r1, r1
    1a0c:	08 95       	ret

00001a0e <__udivmodsi4>:
    1a0e:	a1 e2       	ldi	r26, 0x21	; 33
    1a10:	1a 2e       	mov	r1, r26
    1a12:	aa 1b       	sub	r26, r26
    1a14:	bb 1b       	sub	r27, r27
    1a16:	fd 01       	movw	r30, r26
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <__udivmodsi4_ep>

00001a1a <__udivmodsi4_loop>:
    1a1a:	aa 1f       	adc	r26, r26
    1a1c:	bb 1f       	adc	r27, r27
    1a1e:	ee 1f       	adc	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	a2 17       	cp	r26, r18
    1a24:	b3 07       	cpc	r27, r19
    1a26:	e4 07       	cpc	r30, r20
    1a28:	f5 07       	cpc	r31, r21
    1a2a:	20 f0       	brcs	.+8      	; 0x1a34 <__udivmodsi4_ep>
    1a2c:	a2 1b       	sub	r26, r18
    1a2e:	b3 0b       	sbc	r27, r19
    1a30:	e4 0b       	sbc	r30, r20
    1a32:	f5 0b       	sbc	r31, r21

00001a34 <__udivmodsi4_ep>:
    1a34:	66 1f       	adc	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	1a 94       	dec	r1
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <__udivmodsi4_loop>
    1a40:	60 95       	com	r22
    1a42:	70 95       	com	r23
    1a44:	80 95       	com	r24
    1a46:	90 95       	com	r25
    1a48:	9b 01       	movw	r18, r22
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	bd 01       	movw	r22, r26
    1a4e:	cf 01       	movw	r24, r30
    1a50:	08 95       	ret

00001a52 <__prologue_saves__>:
    1a52:	2f 92       	push	r2
    1a54:	3f 92       	push	r3
    1a56:	4f 92       	push	r4
    1a58:	5f 92       	push	r5
    1a5a:	6f 92       	push	r6
    1a5c:	7f 92       	push	r7
    1a5e:	8f 92       	push	r8
    1a60:	9f 92       	push	r9
    1a62:	af 92       	push	r10
    1a64:	bf 92       	push	r11
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	ca 1b       	sub	r28, r26
    1a7c:	db 0b       	sbc	r29, r27
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	09 94       	ijmp

00001a8a <__epilogue_restores__>:
    1a8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a8c:	39 88       	ldd	r3, Y+17	; 0x11
    1a8e:	48 88       	ldd	r4, Y+16	; 0x10
    1a90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1a9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1aa0:	df 80       	ldd	r13, Y+7	; 0x07
    1aa2:	ee 80       	ldd	r14, Y+6	; 0x06
    1aa4:	fd 80       	ldd	r15, Y+5	; 0x05
    1aa6:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa8:	1b 81       	ldd	r17, Y+3	; 0x03
    1aaa:	aa 81       	ldd	r26, Y+2	; 0x02
    1aac:	b9 81       	ldd	r27, Y+1	; 0x01
    1aae:	ce 0f       	add	r28, r30
    1ab0:	d1 1d       	adc	r29, r1
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	ed 01       	movw	r28, r26
    1abe:	08 95       	ret

00001ac0 <_exit>:
    1ac0:	f8 94       	cli

00001ac2 <__stop_program>:
    1ac2:	ff cf       	rjmp	.-2      	; 0x1ac2 <__stop_program>
