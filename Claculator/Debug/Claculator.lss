
Claculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00002c0e  00002ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080018a  0080018a  00002dcc  2**0
                  ALLOC
  3 .stab         00002424  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000100c  00000000  00000000  000051f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000637c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000654d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000855d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  000096be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ab22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <main>
      8a:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <CLCD_EnuSendCommand>:
#include "CLCD_Private.h"

#include <util/delay.h>

ES_t CLCD_EnuSendCommand(u8 copy_u8Command)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	60 97       	sbiw	r28, 0x10	; 16
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Errorstate=ES_NOK;
     cb6:	1f 86       	std	Y+15, r1	; 0x0f
	/*SET RS PIN TO LOW FOR COMMAND MODE*/
	DIO_EnuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
     cb8:	82 e4       	ldi	r24, 0x42	; 66
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	/*SET RW PIN TO LOW FOR WRITE MODE*/
	DIO_EnuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
     cc2:	82 e4       	ldi	r24, 0x42	; 66
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	/* SEND COMMAND FOR DATA PINS*/
#if DATA_PINS_PORT==NO
	DIO_EnuSetPinValue(D7_PORT,D7_PIN, ( (copy_u8Command>>7) &1 ));
     ccc:	88 89       	ldd	r24, Y+16	; 0x10
     cce:	98 2f       	mov	r25, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	99 27       	eor	r25, r25
     cd4:	99 1f       	adc	r25, r25
     cd6:	83 e4       	ldi	r24, 0x43	; 67
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	49 2f       	mov	r20, r25
     cdc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D6_PORT,D6_PIN, ( (copy_u8Command>>6) &1 ));
     ce0:	88 89       	ldd	r24, Y+16	; 0x10
     ce2:	82 95       	swap	r24
     ce4:	86 95       	lsr	r24
     ce6:	86 95       	lsr	r24
     ce8:	83 70       	andi	r24, 0x03	; 3
     cea:	98 2f       	mov	r25, r24
     cec:	91 70       	andi	r25, 0x01	; 1
     cee:	83 e4       	ldi	r24, 0x43	; 67
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	49 2f       	mov	r20, r25
     cf4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D5_PORT,D5_PIN, ( (copy_u8Command>>5) &1 ));
     cf8:	88 89       	ldd	r24, Y+16	; 0x10
     cfa:	82 95       	swap	r24
     cfc:	86 95       	lsr	r24
     cfe:	87 70       	andi	r24, 0x07	; 7
     d00:	98 2f       	mov	r25, r24
     d02:	91 70       	andi	r25, 0x01	; 1
     d04:	83 e4       	ldi	r24, 0x43	; 67
     d06:	62 e0       	ldi	r22, 0x02	; 2
     d08:	49 2f       	mov	r20, r25
     d0a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D4_PORT,D4_PIN, ( (copy_u8Command>>4) &1 ));
     d0e:	88 89       	ldd	r24, Y+16	; 0x10
     d10:	82 95       	swap	r24
     d12:	8f 70       	andi	r24, 0x0F	; 15
     d14:	98 2f       	mov	r25, r24
     d16:	91 70       	andi	r25, 0x01	; 1
     d18:	83 e4       	ldi	r24, 0x43	; 67
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	49 2f       	mov	r20, r25
     d1e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D3_PORT,D3_PIN, ( (copy_u8Command>>3) &1 ));
     d22:	88 89       	ldd	r24, Y+16	; 0x10
     d24:	86 95       	lsr	r24
     d26:	86 95       	lsr	r24
     d28:	86 95       	lsr	r24
     d2a:	98 2f       	mov	r25, r24
     d2c:	91 70       	andi	r25, 0x01	; 1
     d2e:	83 e4       	ldi	r24, 0x43	; 67
     d30:	64 e0       	ldi	r22, 0x04	; 4
     d32:	49 2f       	mov	r20, r25
     d34:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D2_PORT,D2_PIN, ( (copy_u8Command>>2) &1 ));
     d38:	88 89       	ldd	r24, Y+16	; 0x10
     d3a:	86 95       	lsr	r24
     d3c:	86 95       	lsr	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	91 70       	andi	r25, 0x01	; 1
     d42:	83 e4       	ldi	r24, 0x43	; 67
     d44:	65 e0       	ldi	r22, 0x05	; 5
     d46:	49 2f       	mov	r20, r25
     d48:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D1_PORT,D1_PIN, ( (copy_u8Command>>1) &1 ));
     d4c:	88 89       	ldd	r24, Y+16	; 0x10
     d4e:	86 95       	lsr	r24
     d50:	98 2f       	mov	r25, r24
     d52:	91 70       	andi	r25, 0x01	; 1
     d54:	83 e4       	ldi	r24, 0x43	; 67
     d56:	66 e0       	ldi	r22, 0x06	; 6
     d58:	49 2f       	mov	r20, r25
     d5a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D0_PORT,D0_PIN, ( (copy_u8Command>>0) &1 ));
     d5e:	88 89       	ldd	r24, Y+16	; 0x10
     d60:	98 2f       	mov	r25, r24
     d62:	91 70       	andi	r25, 0x01	; 1
     d64:	83 e4       	ldi	r24, 0x43	; 67
     d66:	67 e0       	ldi	r22, 0x07	; 7
     d68:	49 2f       	mov	r20, r25
     d6a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
#error "DATA_PINS_PORT OUT OF RANGE PLEASE CHECK AGAIN"
#endif

	/*Send Enable Pulse*/

	DIO_EnuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
     d6e:	82 e4       	ldi	r24, 0x42	; 66
     d70:	62 e0       	ldi	r22, 0x02	; 2
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e4       	ldi	r27, 0x40	; 64
     d80:	8b 87       	std	Y+11, r24	; 0x0b
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	ad 87       	std	Y+13, r26	; 0x0d
     d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d88:	6b 85       	ldd	r22, Y+11	; 0x0b
     d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4a ef       	ldi	r20, 0xFA	; 250
     d96:	54 e4       	ldi	r21, 0x44	; 68
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	8f 83       	std	Y+7, r24	; 0x07
     da2:	98 87       	std	Y+8, r25	; 0x08
     da4:	a9 87       	std	Y+9, r26	; 0x09
     da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     da8:	6f 81       	ldd	r22, Y+7	; 0x07
     daa:	78 85       	ldd	r23, Y+8	; 0x08
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	9a 85       	ldd	r25, Y+10	; 0x0a
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e8       	ldi	r20, 0x80	; 128
     db6:	5f e3       	ldi	r21, 0x3F	; 63
     db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dbc:	88 23       	and	r24, r24
     dbe:	2c f4       	brge	.+10     	; 0xdca <CLCD_EnuSendCommand+0x12a>
		__ticks = 1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	3f c0       	rjmp	.+126    	; 0xe48 <CLCD_EnuSendCommand+0x1a8>
	else if (__tmp > 65535)
     dca:	6f 81       	ldd	r22, Y+7	; 0x07
     dcc:	78 85       	ldd	r23, Y+8	; 0x08
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	4f e7       	ldi	r20, 0x7F	; 127
     dd8:	57 e4       	ldi	r21, 0x47	; 71
     dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dde:	18 16       	cp	r1, r24
     de0:	4c f5       	brge	.+82     	; 0xe34 <CLCD_EnuSendCommand+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <CLCD_EnuSendCommand+0x18a>
     e0c:	88 ec       	ldi	r24, 0xC8	; 200
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9c 83       	std	Y+4, r25	; 0x04
     e12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <CLCD_EnuSendCommand+0x178>
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	69 f7       	brne	.-38     	; 0xe0c <CLCD_EnuSendCommand+0x16c>
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <CLCD_EnuSendCommand+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <CLCD_EnuSendCommand+0x1b4>
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	DIO_EnuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
     e5c:	82 e4       	ldi	r24, 0x42	; 66
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>

	return Local_u8Errorstate;
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     e68:	60 96       	adiw	r28, 0x10	; 16
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <CLCD_EnuSendData>:


ES_t CLCD_EnuSendData(u8 copy_u8Data)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	60 97       	sbiw	r28, 0x10	; 16
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Errorstate=ES_NOK;
     e90:	1f 86       	std	Y+15, r1	; 0x0f
	/*SET RS PIN TO LOW FOR DATA MODE*/
	DIO_EnuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
     e92:	82 e4       	ldi	r24, 0x42	; 66
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	/*SET RW PIN TO LOW FOR WRITE MODE*/
	DIO_EnuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
     e9c:	82 e4       	ldi	r24, 0x42	; 66
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	/* SEND COMMAND FOR DATA PINS*/

	DIO_EnuSetPinValue(D7_PORT,D7_PIN, ( (copy_u8Data>>7) &1 ));
     ea6:	88 89       	ldd	r24, Y+16	; 0x10
     ea8:	98 2f       	mov	r25, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	99 27       	eor	r25, r25
     eae:	99 1f       	adc	r25, r25
     eb0:	83 e4       	ldi	r24, 0x43	; 67
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	49 2f       	mov	r20, r25
     eb6:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D6_PORT,D6_PIN, ( (copy_u8Data>>6) &1 ));
     eba:	88 89       	ldd	r24, Y+16	; 0x10
     ebc:	82 95       	swap	r24
     ebe:	86 95       	lsr	r24
     ec0:	86 95       	lsr	r24
     ec2:	83 70       	andi	r24, 0x03	; 3
     ec4:	98 2f       	mov	r25, r24
     ec6:	91 70       	andi	r25, 0x01	; 1
     ec8:	83 e4       	ldi	r24, 0x43	; 67
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	49 2f       	mov	r20, r25
     ece:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D5_PORT,D5_PIN, ( (copy_u8Data>>5) &1 ));
     ed2:	88 89       	ldd	r24, Y+16	; 0x10
     ed4:	82 95       	swap	r24
     ed6:	86 95       	lsr	r24
     ed8:	87 70       	andi	r24, 0x07	; 7
     eda:	98 2f       	mov	r25, r24
     edc:	91 70       	andi	r25, 0x01	; 1
     ede:	83 e4       	ldi	r24, 0x43	; 67
     ee0:	62 e0       	ldi	r22, 0x02	; 2
     ee2:	49 2f       	mov	r20, r25
     ee4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D4_PORT,D4_PIN, ( (copy_u8Data>>4) &1 ));
     ee8:	88 89       	ldd	r24, Y+16	; 0x10
     eea:	82 95       	swap	r24
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	98 2f       	mov	r25, r24
     ef0:	91 70       	andi	r25, 0x01	; 1
     ef2:	83 e4       	ldi	r24, 0x43	; 67
     ef4:	63 e0       	ldi	r22, 0x03	; 3
     ef6:	49 2f       	mov	r20, r25
     ef8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D3_PORT,D3_PIN, ( (copy_u8Data>>3) &1 ));
     efc:	88 89       	ldd	r24, Y+16	; 0x10
     efe:	86 95       	lsr	r24
     f00:	86 95       	lsr	r24
     f02:	86 95       	lsr	r24
     f04:	98 2f       	mov	r25, r24
     f06:	91 70       	andi	r25, 0x01	; 1
     f08:	83 e4       	ldi	r24, 0x43	; 67
     f0a:	64 e0       	ldi	r22, 0x04	; 4
     f0c:	49 2f       	mov	r20, r25
     f0e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D2_PORT,D2_PIN, ( (copy_u8Data>>2) &1 ));
     f12:	88 89       	ldd	r24, Y+16	; 0x10
     f14:	86 95       	lsr	r24
     f16:	86 95       	lsr	r24
     f18:	98 2f       	mov	r25, r24
     f1a:	91 70       	andi	r25, 0x01	; 1
     f1c:	83 e4       	ldi	r24, 0x43	; 67
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	49 2f       	mov	r20, r25
     f22:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D1_PORT,D1_PIN, ( (copy_u8Data>>1) &1 ));
     f26:	88 89       	ldd	r24, Y+16	; 0x10
     f28:	86 95       	lsr	r24
     f2a:	98 2f       	mov	r25, r24
     f2c:	91 70       	andi	r25, 0x01	; 1
     f2e:	83 e4       	ldi	r24, 0x43	; 67
     f30:	66 e0       	ldi	r22, 0x06	; 6
     f32:	49 2f       	mov	r20, r25
     f34:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
	DIO_EnuSetPinValue(D0_PORT,D0_PIN, ( (copy_u8Data>>0) &1 ));
     f38:	88 89       	ldd	r24, Y+16	; 0x10
     f3a:	98 2f       	mov	r25, r24
     f3c:	91 70       	andi	r25, 0x01	; 1
     f3e:	83 e4       	ldi	r24, 0x43	; 67
     f40:	67 e0       	ldi	r22, 0x07	; 7
     f42:	49 2f       	mov	r20, r25
     f44:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>


	/*Send Enable Pulse*/
	DIO_EnuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
     f48:	82 e4       	ldi	r24, 0x42	; 66
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e4       	ldi	r27, 0x40	; 64
     f5a:	8b 87       	std	Y+11, r24	; 0x0b
     f5c:	9c 87       	std	Y+12, r25	; 0x0c
     f5e:	ad 87       	std	Y+13, r26	; 0x0d
     f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f62:	6b 85       	ldd	r22, Y+11	; 0x0b
     f64:	7c 85       	ldd	r23, Y+12	; 0x0c
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	4a ef       	ldi	r20, 0xFA	; 250
     f70:	54 e4       	ldi	r21, 0x44	; 68
     f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	8f 83       	std	Y+7, r24	; 0x07
     f7c:	98 87       	std	Y+8, r25	; 0x08
     f7e:	a9 87       	std	Y+9, r26	; 0x09
     f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f82:	6f 81       	ldd	r22, Y+7	; 0x07
     f84:	78 85       	ldd	r23, Y+8	; 0x08
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f96:	88 23       	and	r24, r24
     f98:	2c f4       	brge	.+10     	; 0xfa4 <CLCD_EnuSendData+0x12a>
		__ticks = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	3f c0       	rjmp	.+126    	; 0x1022 <CLCD_EnuSendData+0x1a8>
	else if (__tmp > 65535)
     fa4:	6f 81       	ldd	r22, Y+7	; 0x07
     fa6:	78 85       	ldd	r23, Y+8	; 0x08
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	57 e4       	ldi	r21, 0x47	; 71
     fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb8:	18 16       	cp	r1, r24
     fba:	4c f5       	brge	.+82     	; 0x100e <CLCD_EnuSendData+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e2       	ldi	r20, 0x20	; 32
     fca:	51 e4       	ldi	r21, 0x41	; 65
     fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <CLCD_EnuSendData+0x18a>
     fe6:	88 ec       	ldi	r24, 0xC8	; 200
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <CLCD_EnuSendData+0x178>
     ff6:	9c 83       	std	Y+4, r25	; 0x04
     ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	69 f7       	brne	.-38     	; 0xfe6 <CLCD_EnuSendData+0x16c>
    100c:	14 c0       	rjmp	.+40     	; 0x1036 <CLCD_EnuSendData+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	78 85       	ldd	r23, Y+8	; 0x08
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <CLCD_EnuSendData+0x1b4>
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_EnuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    1036:	82 e4       	ldi	r24, 0x42	; 66
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>

	return Local_u8Errorstate;
    1040:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1042:	60 96       	adiw	r28, 0x10	; 16
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <CLCD_EnuInit>:


ES_t CLCD_EnuInit(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	2f 97       	sbiw	r28, 0x0f	; 15
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Errorstate=ES_NOK;
    1068:	1f 86       	std	Y+15, r1	; 0x0f
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e2       	ldi	r26, 0x20	; 32
    1070:	b2 e4       	ldi	r27, 0x42	; 66
    1072:	8b 87       	std	Y+11, r24	; 0x0b
    1074:	9c 87       	std	Y+12, r25	; 0x0c
    1076:	ad 87       	std	Y+13, r26	; 0x0d
    1078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107a:	6b 85       	ldd	r22, Y+11	; 0x0b
    107c:	7c 85       	ldd	r23, Y+12	; 0x0c
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	4a ef       	ldi	r20, 0xFA	; 250
    1088:	54 e4       	ldi	r21, 0x44	; 68
    108a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8f 83       	std	Y+7, r24	; 0x07
    1094:	98 87       	std	Y+8, r25	; 0x08
    1096:	a9 87       	std	Y+9, r26	; 0x09
    1098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	2c f4       	brge	.+10     	; 0x10bc <CLCD_EnuInit+0x68>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	3f c0       	rjmp	.+126    	; 0x113a <CLCD_EnuInit+0xe6>
	else if (__tmp > 65535)
    10bc:	6f 81       	ldd	r22, Y+7	; 0x07
    10be:	78 85       	ldd	r23, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	4c f5       	brge	.+82     	; 0x1126 <CLCD_EnuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10da:	9e 85       	ldd	r25, Y+14	; 0x0e
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e2       	ldi	r20, 0x20	; 32
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <CLCD_EnuInit+0xc8>
    10fe:	88 ec       	ldi	r24, 0xC8	; 200
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <CLCD_EnuInit+0xb6>
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f7       	brne	.-38     	; 0x10fe <CLCD_EnuInit+0xaa>
    1124:	14 c0       	rjmp	.+40     	; 0x114e <CLCD_EnuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	6f 81       	ldd	r22, Y+7	; 0x07
    1128:	78 85       	ldd	r23, Y+8	; 0x08
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <CLCD_EnuInit+0xf2>
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for more than 30 ms*/
	 _delay_ms(40);
	/*Function Set Command : 2 lines , 5*8 Font Size */
	  CLCD_EnuSendCommand(0X38);
    114e:	88 e3       	ldi	r24, 0x38	; 56
    1150:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>
	/*Wait for more than 39 ms*/
	 //_delay_ms(1);
	/*Display on / off Control : display enable , enable cursor ,enable blink cursor.( send commend =0X0F )*/
	 CLCD_EnuSendCommand(0X0C);
    1154:	8c e0       	ldi	r24, 0x0C	; 12
    1156:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>
	/*Clear Display */
	 CLCD_EnuSendCommand(0X01);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>

	 CLCD_EnuSendCommand(0X06 );
    1160:	86 e0       	ldi	r24, 0x06	; 6
    1162:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>


	return Local_u8Errorstate;
    1166:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1168:	2f 96       	adiw	r28, 0x0f	; 15
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <CLCD_EnuSendString>:

ES_t CLCD_EnuSendString(const char* Copy_PCstring){
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <CLCD_EnuSendString+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <CLCD_EnuSendString+0x8>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
    118a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter=0;
    118c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL!=Copy_PCstring)
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	e9 f0       	breq	.+58     	; 0x11d0 <CLCD_EnuSendString+0x56>
	{
		Local_u8Errorstate=ES_OK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	8a 83       	std	Y+2, r24	; 0x02
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <CLCD_EnuSendString+0x3e>
		while(Copy_PCstring[Counter]!='\0'){
			CLCD_EnuSendData(Copy_PCstring[Counter]);
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	fc 01       	movw	r30, r24
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	80 81       	ld	r24, Z
    11ae:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>
			Counter++;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8Errorstate=ES_NOK;
	u8 Counter=0;
	if(NULL!=Copy_PCstring)
	{
		Local_u8Errorstate=ES_OK;
		while(Copy_PCstring[Counter]!='\0'){
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	80 81       	ld	r24, Z
    11ca:	88 23       	and	r24, r24
    11cc:	39 f7       	brne	.-50     	; 0x119c <CLCD_EnuSendString+0x22>
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <CLCD_EnuSendString+0x5a>
			CLCD_EnuSendData(Copy_PCstring[Counter]);
			Counter++;
		}
	}
	else{
		Local_u8Errorstate=ES_PNULL;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8Errorstate;
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02


}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <CLCD_EnuGoToXY>:


ES_t CLCD_EnuGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <CLCD_EnuGoToXY+0x6>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <CLCD_EnuGoToXY+0x8>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Errorstate=ES_NOK;
    11f4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Address=0;
    11f6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos==0){
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	88 23       	and	r24, r24
    11fc:	29 f4       	brne	.+10     	; 0x1208 <CLCD_EnuGoToXY+0x24>
		/*Location is at First Line*/
		Local_u8Address=Copy_u8YPos;
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Errorstate=ES_OK;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	0b c0       	rjmp	.+22     	; 0x121e <CLCD_EnuGoToXY+0x3a>
	}
	else if(Copy_u8XPos==1){
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	31 f4       	brne	.+12     	; 0x121a <CLCD_EnuGoToXY+0x36>
		/*Location is at Second Line*/

		Local_u8Address=0X40+Copy_u8YPos;
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	80 5c       	subi	r24, 0xC0	; 192
    1212:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Errorstate=ES_OK;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8a 83       	std	Y+2, r24	; 0x02
    1218:	02 c0       	rjmp	.+4      	; 0x121e <CLCD_EnuGoToXY+0x3a>
	}
	else{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*Set bit number 7 for set DDRAM Address command then send the command*/

	CLCD_EnuSendCommand(Local_u8Address+0X80);
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	80 58       	subi	r24, 0x80	; 128
    1222:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>


	return  Local_u8Errorstate;
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <CLCD_EnuWriteSpeacialCharacter>:

ES_t CLCD_EnuWriteSpeacialCharacter(u8* Copy_pu8Pattern ,u8 Copy_u8PatternNumber ,u8 Copy_u8XPos ,u8 Copy_u8YPos){
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	28 97       	sbiw	r28, 0x08	; 8
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	9d 83       	std	Y+5, r25	; 0x05
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	6e 83       	std	Y+6, r22	; 0x06
    1250:	4f 83       	std	Y+7, r20	; 0x07
    1252:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8Errorstate=ES_NOK;
    1254:	1b 82       	std	Y+3, r1	; 0x03

	u8 Local_u8Iterator=0;
    1256:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CGRAMAddress=0;
    1258:	19 82       	std	Y+1, r1	; 0x01
	/*Calculate the CGRam address whose each block is 9 byte*/

	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	89 83       	std	Y+1, r24	; 0x01

	/*send CG RAM address command to LCD , with setting bit 6 ,clearing bit 7 */

	CLCD_EnuSendCommand(Local_u8CGRAMAddress+0X40);
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	80 5c       	subi	r24, 0xC0	; 192
    1272:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>

	/*Write the Pattern into CG Ram*/

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1276:	1a 82       	std	Y+2, r1	; 0x02
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <CLCD_EnuWriteSpeacialCharacter+0x60>
		CLCD_EnuSendData(Copy_pu8Pattern[Local_u8Iterator]);
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	fc 01       	movw	r30, r24
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	80 81       	ld	r24, Z
    128c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>

	CLCD_EnuSendCommand(Local_u8CGRAMAddress+0X40);

	/*Write the Pattern into CG Ram*/

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	88 30       	cpi	r24, 0x08	; 8
    129a:	78 f3       	brcs	.-34     	; 0x127a <CLCD_EnuWriteSpeacialCharacter+0x44>
		CLCD_EnuSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go Back to the DDRAM to display the Pattern*/

	CLCD_EnuGoToXY(Copy_u8XPos,Copy_u8YPos);
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	68 85       	ldd	r22, Y+8	; 0x08
    12a0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <CLCD_EnuGoToXY>

	/*Display the Pattern Written in the CG RAM*/

	CLCD_EnuSendData(Copy_u8PatternNumber);
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>

	return  Local_u8Errorstate;
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12ac:	28 96       	adiw	r28, 0x08	; 8
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <CLCD_EnuClearDisplay>:


ES_t CLCD_EnuClearDisplay(void){
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Errorstate=ES_NOK;
    12c8:	19 82       	std	Y+1, r1	; 0x01
	/*Clear Display */
	 CLCD_EnuSendCommand(0X01);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_EnuSendCommand>
	return  Local_u8Errorstate;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <CLCD_EnuWriteNumber>:


ES_t CLCD_EnuWriteNumber(f64 Copy_u8Number)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	a1 97       	sbiw	r28, 0x21	; 33
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	6e 8f       	std	Y+30, r22	; 0x1e
    12f0:	7f 8f       	std	Y+31, r23	; 0x1f
    12f2:	88 a3       	std	Y+32, r24	; 0x20
    12f4:	99 a3       	std	Y+33, r25	; 0x21
	u8 Local_u8Errorstate=ES_NOK;
    12f6:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8ArrNum[20];
	u8 Local_u8Counter=0;
    12f8:	18 86       	std	Y+8, r1	; 0x08

	if(Copy_u8Number<0){
    12fa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12fc:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12fe:	88 a1       	ldd	r24, Y+32	; 0x20
    1300:	99 a1       	ldd	r25, Y+33	; 0x21
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130e:	88 23       	and	r24, r24
    1310:	64 f4       	brge	.+24     	; 0x132a <CLCD_EnuWriteNumber+0x50>
		CLCD_EnuSendData('-');
    1312:	8d e2       	ldi	r24, 0x2D	; 45
    1314:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>
		Copy_u8Number*=-1;
    1318:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    131c:	a8 a1       	ldd	r26, Y+32	; 0x20
    131e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1320:	b0 58       	subi	r27, 0x80	; 128
    1322:	8e 8f       	std	Y+30, r24	; 0x1e
    1324:	9f 8f       	std	Y+31, r25	; 0x1f
    1326:	a8 a3       	std	Y+32, r26	; 0x20
    1328:	b9 a3       	std	Y+33, r27	; 0x21
	}
	int x=Copy_u8Number;
    132a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    132c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    132e:	88 a1       	ldd	r24, Y+32	; 0x20
    1330:	99 a1       	ldd	r25, Y+33	; 0x21
    1332:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9f 83       	std	Y+7, r25	; 0x07
    133c:	8e 83       	std	Y+6, r24	; 0x06
	int z=(Copy_u8Number-x)*100000;
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	9f 81       	ldd	r25, Y+7	; 0x07
    1342:	aa 27       	eor	r26, r26
    1344:	97 fd       	sbrc	r25, 7
    1346:	a0 95       	com	r26
    1348:	ba 2f       	mov	r27, r26
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1352:	9b 01       	movw	r18, r22
    1354:	ac 01       	movw	r20, r24
    1356:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1358:	7f 8d       	ldd	r23, Y+31	; 0x1f
    135a:	88 a1       	ldd	r24, Y+32	; 0x20
    135c:	99 a1       	ldd	r25, Y+33	; 0x21
    135e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e5       	ldi	r19, 0x50	; 80
    136e:	43 ec       	ldi	r20, 0xC3	; 195
    1370:	57 e4       	ldi	r21, 0x47	; 71
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9d 83       	std	Y+5, r25	; 0x05
    1388:	8c 83       	std	Y+4, r24	; 0x04
	if(z==0){
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	09 f0       	breq	.+2      	; 0x1394 <CLCD_EnuWriteNumber+0xba>
    1392:	62 c0       	rjmp	.+196    	; 0x1458 <CLCD_EnuWriteNumber+0x17e>

		x=Copy_u8Number;
    1394:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1396:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1398:	88 a1       	ldd	r24, Y+32	; 0x20
    139a:	99 a1       	ldd	r25, Y+33	; 0x21
    139c:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9f 83       	std	Y+7, r25	; 0x07
    13a6:	8e 83       	std	Y+6, r24	; 0x06
    13a8:	1d c0       	rjmp	.+58     	; 0x13e4 <CLCD_EnuWriteNumber+0x10a>
		while(x!=0){
			Local_u8ArrNum[Local_u8Counter]=x%10;
    13aa:	88 85       	ldd	r24, Y+8	; 0x08
    13ac:	e8 2f       	mov	r30, r24
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	9f 81       	ldd	r25, Y+7	; 0x07
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	b9 01       	movw	r22, r18
    13ba:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    13be:	28 2f       	mov	r18, r24
    13c0:	ce 01       	movw	r24, r28
    13c2:	0a 96       	adiw	r24, 0x0a	; 10
    13c4:	e8 0f       	add	r30, r24
    13c6:	f9 1f       	adc	r31, r25
    13c8:	20 83       	st	Z, r18
			x/=10;
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	9f 81       	ldd	r25, Y+7	; 0x07
    13ce:	2a e0       	ldi	r18, 0x0A	; 10
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    13d8:	cb 01       	movw	r24, r22
    13da:	9f 83       	std	Y+7, r25	; 0x07
    13dc:	8e 83       	std	Y+6, r24	; 0x06
			Local_u8Counter++;
    13de:	88 85       	ldd	r24, Y+8	; 0x08
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	88 87       	std	Y+8, r24	; 0x08
	int x=Copy_u8Number;
	int z=(Copy_u8Number-x)*100000;
	if(z==0){

		x=Copy_u8Number;
		while(x!=0){
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	f9 f6       	brne	.-66     	; 0x13aa <CLCD_EnuWriteNumber+0xd0>
			Local_u8ArrNum[Local_u8Counter]=x%10;
			x/=10;
			Local_u8Counter++;
		}
		for(s8 i=Local_u8Counter-1;i>=0;i--){
    13ec:	88 85       	ldd	r24, Y+8	; 0x08
    13ee:	81 50       	subi	r24, 0x01	; 1
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <CLCD_EnuWriteNumber+0x13c>
			CLCD_EnuSendData(Local_u8ArrNum[i]+'0');
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	33 27       	eor	r19, r19
    13fa:	27 fd       	sbrc	r18, 7
    13fc:	30 95       	com	r19
    13fe:	ce 01       	movw	r24, r28
    1400:	0a 96       	adiw	r24, 0x0a	; 10
    1402:	fc 01       	movw	r30, r24
    1404:	e2 0f       	add	r30, r18
    1406:	f3 1f       	adc	r31, r19
    1408:	80 81       	ld	r24, Z
    140a:	80 5d       	subi	r24, 0xD0	; 208
    140c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>
		while(x!=0){
			Local_u8ArrNum[Local_u8Counter]=x%10;
			x/=10;
			Local_u8Counter++;
		}
		for(s8 i=Local_u8Counter-1;i>=0;i--){
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	81 50       	subi	r24, 0x01	; 1
    1414:	8b 83       	std	Y+3, r24	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 23       	and	r24, r24
    141a:	64 f7       	brge	.-40     	; 0x13f4 <CLCD_EnuWriteNumber+0x11a>
    141c:	82 c0       	rjmp	.+260    	; 0x1522 <CLCD_EnuWriteNumber+0x248>
		}
	}
	else{
		// part integer
		while(x!=0){
			Local_u8ArrNum[Local_u8Counter]=x%10;
    141e:	88 85       	ldd	r24, Y+8	; 0x08
    1420:	e8 2f       	mov	r30, r24
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8e 81       	ldd	r24, Y+6	; 0x06
    1426:	9f 81       	ldd	r25, Y+7	; 0x07
    1428:	2a e0       	ldi	r18, 0x0A	; 10
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	b9 01       	movw	r22, r18
    142e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    1432:	28 2f       	mov	r18, r24
    1434:	ce 01       	movw	r24, r28
    1436:	0a 96       	adiw	r24, 0x0a	; 10
    1438:	e8 0f       	add	r30, r24
    143a:	f9 1f       	adc	r31, r25
    143c:	20 83       	st	Z, r18
			x/=10;
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	9f 81       	ldd	r25, Y+7	; 0x07
    1442:	2a e0       	ldi	r18, 0x0A	; 10
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	b9 01       	movw	r22, r18
    1448:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    144c:	cb 01       	movw	r24, r22
    144e:	9f 83       	std	Y+7, r25	; 0x07
    1450:	8e 83       	std	Y+6, r24	; 0x06
			Local_u8Counter++;
    1452:	88 85       	ldd	r24, Y+8	; 0x08
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	88 87       	std	Y+8, r24	; 0x08
			CLCD_EnuSendData(Local_u8ArrNum[i]+'0');
		}
	}
	else{
		// part integer
		while(x!=0){
    1458:	8e 81       	ldd	r24, Y+6	; 0x06
    145a:	9f 81       	ldd	r25, Y+7	; 0x07
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	f9 f6       	brne	.-66     	; 0x141e <CLCD_EnuWriteNumber+0x144>
			Local_u8ArrNum[Local_u8Counter]=x%10;
			x/=10;
			Local_u8Counter++;
		}
		for(s8 i=Local_u8Counter-1;i>=0;i--){
    1460:	88 85       	ldd	r24, Y+8	; 0x08
    1462:	81 50       	subi	r24, 0x01	; 1
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	1c c0       	rjmp	.+56     	; 0x14a0 <CLCD_EnuWriteNumber+0x1c6>
			CLCD_EnuSendData(Local_u8ArrNum[i]+'0');
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	33 27       	eor	r19, r19
    146e:	27 fd       	sbrc	r18, 7
    1470:	30 95       	com	r19
    1472:	ce 01       	movw	r24, r28
    1474:	0a 96       	adiw	r24, 0x0a	; 10
    1476:	fc 01       	movw	r30, r24
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	80 81       	ld	r24, Z
    147e:	80 5d       	subi	r24, 0xD0	; 208
    1480:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>
			Local_u8ArrNum[i]=0;
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	33 27       	eor	r19, r19
    148a:	27 fd       	sbrc	r18, 7
    148c:	30 95       	com	r19
    148e:	ce 01       	movw	r24, r28
    1490:	0a 96       	adiw	r24, 0x0a	; 10
    1492:	fc 01       	movw	r30, r24
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	10 82       	st	Z, r1
		while(x!=0){
			Local_u8ArrNum[Local_u8Counter]=x%10;
			x/=10;
			Local_u8Counter++;
		}
		for(s8 i=Local_u8Counter-1;i>=0;i--){
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	81 50       	subi	r24, 0x01	; 1
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	88 23       	and	r24, r24
    14a4:	0c f7       	brge	.-62     	; 0x1468 <CLCD_EnuWriteNumber+0x18e>
			CLCD_EnuSendData(Local_u8ArrNum[i]+'0');
			Local_u8ArrNum[i]=0;
		}
		// part float
		CLCD_EnuSendData('.');
    14a6:	8e e2       	ldi	r24, 0x2E	; 46
    14a8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>
		Local_u8Counter=0;
    14ac:	18 86       	std	Y+8, r1	; 0x08
    14ae:	1d c0       	rjmp	.+58     	; 0x14ea <CLCD_EnuWriteNumber+0x210>

		while(z!=0){
			Local_u8ArrNum[Local_u8Counter]=z%10;
    14b0:	88 85       	ldd	r24, Y+8	; 0x08
    14b2:	e8 2f       	mov	r30, r24
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	2a e0       	ldi	r18, 0x0A	; 10
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	b9 01       	movw	r22, r18
    14c0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    14c4:	28 2f       	mov	r18, r24
    14c6:	ce 01       	movw	r24, r28
    14c8:	0a 96       	adiw	r24, 0x0a	; 10
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	20 83       	st	Z, r18
			z/=10;
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	2a e0       	ldi	r18, 0x0A	; 10
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	b9 01       	movw	r22, r18
    14da:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    14de:	cb 01       	movw	r24, r22
    14e0:	9d 83       	std	Y+5, r25	; 0x05
    14e2:	8c 83       	std	Y+4, r24	; 0x04
			Local_u8Counter++;
    14e4:	88 85       	ldd	r24, Y+8	; 0x08
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	88 87       	std	Y+8, r24	; 0x08
		}
		// part float
		CLCD_EnuSendData('.');
		Local_u8Counter=0;

		while(z!=0){
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	f9 f6       	brne	.-66     	; 0x14b0 <CLCD_EnuWriteNumber+0x1d6>
			Local_u8ArrNum[Local_u8Counter]=z%10;
			z/=10;
			Local_u8Counter++;
		}
		for(s8 i=Local_u8Counter-1;i>=0;i--){
    14f2:	88 85       	ldd	r24, Y+8	; 0x08
    14f4:	81 50       	subi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	11 c0       	rjmp	.+34     	; 0x151c <CLCD_EnuWriteNumber+0x242>
			CLCD_EnuSendData(Local_u8ArrNum[i]+'0');
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	33 27       	eor	r19, r19
    1500:	27 fd       	sbrc	r18, 7
    1502:	30 95       	com	r19
    1504:	ce 01       	movw	r24, r28
    1506:	0a 96       	adiw	r24, 0x0a	; 10
    1508:	fc 01       	movw	r30, r24
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	80 81       	ld	r24, Z
    1510:	80 5d       	subi	r24, 0xD0	; 208
    1512:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>
		while(z!=0){
			Local_u8ArrNum[Local_u8Counter]=z%10;
			z/=10;
			Local_u8Counter++;
		}
		for(s8 i=Local_u8Counter-1;i>=0;i--){
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	81 50       	subi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	88 23       	and	r24, r24
    1520:	64 f7       	brge	.-40     	; 0x14fa <CLCD_EnuWriteNumber+0x220>
			CLCD_EnuSendData(Local_u8ArrNum[i]+'0');
		}
	}


	return  Local_u8Errorstate;
    1522:	89 85       	ldd	r24, Y+9	; 0x09
}
    1524:	a1 96       	adiw	r28, 0x21	; 33
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <push>:

int count=0;
char stack[30];
int numbers[30];
int top=-1;
void push(char x){
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
	stack[++top]= x;
    1542:	80 91 68 01 	lds	r24, 0x0168
    1546:	90 91 69 01 	lds	r25, 0x0169
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	90 93 69 01 	sts	0x0169, r25
    1550:	80 93 68 01 	sts	0x0168, r24
    1554:	80 91 68 01 	lds	r24, 0x0168
    1558:	90 91 69 01 	lds	r25, 0x0169
    155c:	fc 01       	movw	r30, r24
    155e:	e4 57       	subi	r30, 0x74	; 116
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	80 83       	st	Z, r24
}
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <pop>:
char pop(){
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	if(top== -1){
    1578:	80 91 68 01 	lds	r24, 0x0168
    157c:	90 91 69 01 	lds	r25, 0x0169
    1580:	2f ef       	ldi	r18, 0xFF	; 255
    1582:	8f 3f       	cpi	r24, 0xFF	; 255
    1584:	92 07       	cpc	r25, r18
    1586:	19 f4       	brne	.+6      	; 0x158e <pop+0x20>
		return -1;
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <pop+0x3c>
	}
	else{
		return stack[top--];
    158e:	80 91 68 01 	lds	r24, 0x0168
    1592:	90 91 69 01 	lds	r25, 0x0169
    1596:	fc 01       	movw	r30, r24
    1598:	e4 57       	subi	r30, 0x74	; 116
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	20 81       	ld	r18, Z
    159e:	29 83       	std	Y+1, r18	; 0x01
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	90 93 69 01 	sts	0x0169, r25
    15a6:	80 93 68 01 	sts	0x0168, r24
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <is_digit_t>:

u8 is_digit_t(char num){
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <is_digit_t+0x6>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	89 83       	std	Y+1, r24	; 0x01
	if( ( (num)>='0' ) && ( (num)<='9') ){
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	80 33       	cpi	r24, 0x30	; 48
    15c4:	30 f0       	brcs	.+12     	; 0x15d2 <is_digit_t+0x1e>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	8a 33       	cpi	r24, 0x3A	; 58
    15ca:	18 f4       	brcc	.+6      	; 0x15d2 <is_digit_t+0x1e>
		return 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <is_digit_t+0x20>
	}
	else
	{
		return 0;
    15d2:	1a 82       	std	Y+2, r1	; 0x02
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <priority>:
u8 priority(char operation){
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <priority+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
	if(operation=='+' || operation=='-')
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	8b 32       	cpi	r24, 0x2B	; 43
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <priority+0x18>
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	8d 32       	cpi	r24, 0x2D	; 45
    15f6:	19 f4       	brne	.+6      	; 0x15fe <priority+0x1e>
		return 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <priority+0x32>
	else if(operation=='*' || operation=='/')
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8a 32       	cpi	r24, 0x2A	; 42
    1602:	19 f0       	breq	.+6      	; 0x160a <priority+0x2a>
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	8f 32       	cpi	r24, 0x2F	; 47
    1608:	19 f4       	brne	.+6      	; 0x1610 <priority+0x30>
		return 2;
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	8a 83       	std	Y+2, r24	; 0x02
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <priority+0x32>

	return 0;
    1610:	1a 82       	std	Y+2, r1	; 0x02
    1612:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <IsOperator>:
u8 IsOperator(char c){
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <IsOperator+0x6>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	89 83       	std	Y+1, r24	; 0x01
	if(c=='+' || c=='-' || c=='*' || c=='/')
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	8b 32       	cpi	r24, 0x2B	; 43
    162e:	49 f0       	breq	.+18     	; 0x1642 <IsOperator+0x24>
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	8d 32       	cpi	r24, 0x2D	; 45
    1634:	31 f0       	breq	.+12     	; 0x1642 <IsOperator+0x24>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	8a 32       	cpi	r24, 0x2A	; 42
    163a:	19 f0       	breq	.+6      	; 0x1642 <IsOperator+0x24>
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	8f 32       	cpi	r24, 0x2F	; 47
    1640:	19 f4       	brne	.+6      	; 0x1648 <IsOperator+0x2a>
		return 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	01 c0       	rjmp	.+2      	; 0x164a <IsOperator+0x2c>
	return 0;
    1648:	1a 82       	std	Y+2, r1	; 0x02
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <validation>:
Errors_t validation(s8 *e,s8*postf){
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	29 97       	sbiw	r28, 0x09	; 9
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	9d 83       	std	Y+5, r25	; 0x05
    166c:	8c 83       	std	Y+4, r24	; 0x04
    166e:	7f 83       	std	Y+7, r23	; 0x07
    1670:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_u8ErrorState = ER_MATH_SYNTAX_OK;
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    1676:	1a 82       	std	Y+2, r1	; 0x02
    1678:	19 82       	std	Y+1, r1	; 0x01
    167a:	ac c2       	rjmp	.+1368   	; 0x1bd4 <validation+0x57e>
	while(*e !='\0'){
		if(IsOperator((*e)) ){
    167c:	ec 81       	ldd	r30, Y+4	; 0x04
    167e:	fd 81       	ldd	r31, Y+5	; 0x05
    1680:	80 81       	ld	r24, Z
    1682:	0e 94 0f 0b 	call	0x161e	; 0x161e <IsOperator>
    1686:	88 23       	and	r24, r24
    1688:	09 f4       	brne	.+2      	; 0x168c <validation+0x36>
    168a:	8f c2       	rjmp	.+1310   	; 0x1baa <validation+0x554>
			if( ( (*e=='-') || (*e=='+') ) && (i==0) ){
    168c:	ec 81       	ldd	r30, Y+4	; 0x04
    168e:	fd 81       	ldd	r31, Y+5	; 0x05
    1690:	80 81       	ld	r24, Z
    1692:	8d 32       	cpi	r24, 0x2D	; 45
    1694:	29 f0       	breq	.+10     	; 0x16a0 <validation+0x4a>
    1696:	ec 81       	ldd	r30, Y+4	; 0x04
    1698:	fd 81       	ldd	r31, Y+5	; 0x05
    169a:	80 81       	ld	r24, Z
    169c:	8b 32       	cpi	r24, 0x2B	; 43
    169e:	29 f5       	brne	.+74     	; 0x16ea <validation+0x94>
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	09 f5       	brne	.+66     	; 0x16ea <validation+0x94>
				if(*e=='+')
    16a8:	ec 81       	ldd	r30, Y+4	; 0x04
    16aa:	fd 81       	ldd	r31, Y+5	; 0x05
    16ac:	80 81       	ld	r24, Z
    16ae:	8b 32       	cpi	r24, 0x2B	; 43
    16b0:	31 f4       	brne	.+12     	; 0x16be <validation+0x68>
				{
					e++;
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	9d 83       	std	Y+5, r25	; 0x05
    16ba:	8c 83       	std	Y+4, r24	; 0x04
    16bc:	8b c2       	rjmp	.+1302   	; 0x1bd4 <validation+0x57e>
					continue;
				}
				postf[i]=*e;
    16be:	29 81       	ldd	r18, Y+1	; 0x01
    16c0:	3a 81       	ldd	r19, Y+2	; 0x02
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	dc 01       	movw	r26, r24
    16c8:	a2 0f       	add	r26, r18
    16ca:	b3 1f       	adc	r27, r19
    16cc:	ec 81       	ldd	r30, Y+4	; 0x04
    16ce:	fd 81       	ldd	r31, Y+5	; 0x05
    16d0:	80 81       	ld	r24, Z
    16d2:	8c 93       	st	X, r24
				i++;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
				e++;
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	9d 83       	std	Y+5, r25	; 0x05
    16e6:	8c 83       	std	Y+4, r24	; 0x04
    16e8:	75 c2       	rjmp	.+1258   	; 0x1bd4 <validation+0x57e>
				continue;
			}
			else if( ( (*e=='-') || (*e=='+') ) && (i!=0)){
    16ea:	ec 81       	ldd	r30, Y+4	; 0x04
    16ec:	fd 81       	ldd	r31, Y+5	; 0x05
    16ee:	80 81       	ld	r24, Z
    16f0:	8d 32       	cpi	r24, 0x2D	; 45
    16f2:	31 f0       	breq	.+12     	; 0x1700 <validation+0xaa>
    16f4:	ec 81       	ldd	r30, Y+4	; 0x04
    16f6:	fd 81       	ldd	r31, Y+5	; 0x05
    16f8:	80 81       	ld	r24, Z
    16fa:	8b 32       	cpi	r24, 0x2B	; 43
    16fc:	09 f0       	breq	.+2      	; 0x1700 <validation+0xaa>
    16fe:	3f c1       	rjmp	.+638    	; 0x197e <validation+0x328>
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	09 f4       	brne	.+2      	; 0x170a <validation+0xb4>
    1708:	3a c1       	rjmp	.+628    	; 0x197e <validation+0x328>
				if( (e[i]=='-' && e[i+1]=='-') || (e[i]=='+' && e[i+1]=='+')){
    170a:	29 81       	ldd	r18, Y+1	; 0x01
    170c:	3a 81       	ldd	r19, Y+2	; 0x02
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	fc 01       	movw	r30, r24
    1714:	e2 0f       	add	r30, r18
    1716:	f3 1f       	adc	r31, r19
    1718:	80 81       	ld	r24, Z
    171a:	8d 32       	cpi	r24, 0x2D	; 45
    171c:	69 f4       	brne	.+26     	; 0x1738 <validation+0xe2>
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	9c 01       	movw	r18, r24
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	fc 01       	movw	r30, r24
    172e:	e2 0f       	add	r30, r18
    1730:	f3 1f       	adc	r31, r19
    1732:	80 81       	ld	r24, Z
    1734:	8d 32       	cpi	r24, 0x2D	; 45
    1736:	b9 f0       	breq	.+46     	; 0x1766 <validation+0x110>
    1738:	29 81       	ldd	r18, Y+1	; 0x01
    173a:	3a 81       	ldd	r19, Y+2	; 0x02
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	fc 01       	movw	r30, r24
    1742:	e2 0f       	add	r30, r18
    1744:	f3 1f       	adc	r31, r19
    1746:	80 81       	ld	r24, Z
    1748:	8b 32       	cpi	r24, 0x2B	; 43
    174a:	31 f5       	brne	.+76     	; 0x1798 <validation+0x142>
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	9c 01       	movw	r18, r24
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	9d 81       	ldd	r25, Y+5	; 0x05
    175a:	fc 01       	movw	r30, r24
    175c:	e2 0f       	add	r30, r18
    175e:	f3 1f       	adc	r31, r19
    1760:	80 81       	ld	r24, Z
    1762:	8b 32       	cpi	r24, 0x2B	; 43
    1764:	c9 f4       	brne	.+50     	; 0x1798 <validation+0x142>
					postf[i]='+';
    1766:	29 81       	ldd	r18, Y+1	; 0x01
    1768:	3a 81       	ldd	r19, Y+2	; 0x02
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	fc 01       	movw	r30, r24
    1770:	e2 0f       	add	r30, r18
    1772:	f3 1f       	adc	r31, r19
    1774:	8b e2       	ldi	r24, 0x2B	; 43
    1776:	80 83       	st	Z, r24
					e++;
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	9d 83       	std	Y+5, r25	; 0x05
    1780:	8c 83       	std	Y+4, r24	; 0x04
					e++;
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	9d 83       	std	Y+5, r25	; 0x05
    178a:	8c 83       	std	Y+4, r24	; 0x04
					i++;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	1e c2       	rjmp	.+1084   	; 0x1bd4 <validation+0x57e>
				}
				else if((e[i]=='-' && e[i+1]=='+') || ( e[i]=='+' && e[i+1]=='-' )){
    1798:	29 81       	ldd	r18, Y+1	; 0x01
    179a:	3a 81       	ldd	r19, Y+2	; 0x02
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	fc 01       	movw	r30, r24
    17a2:	e2 0f       	add	r30, r18
    17a4:	f3 1f       	adc	r31, r19
    17a6:	80 81       	ld	r24, Z
    17a8:	8d 32       	cpi	r24, 0x2D	; 45
    17aa:	69 f4       	brne	.+26     	; 0x17c6 <validation+0x170>
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	9c 01       	movw	r18, r24
    17b2:	2f 5f       	subi	r18, 0xFF	; 255
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	fc 01       	movw	r30, r24
    17bc:	e2 0f       	add	r30, r18
    17be:	f3 1f       	adc	r31, r19
    17c0:	80 81       	ld	r24, Z
    17c2:	8b 32       	cpi	r24, 0x2B	; 43
    17c4:	b9 f0       	breq	.+46     	; 0x17f4 <validation+0x19e>
    17c6:	29 81       	ldd	r18, Y+1	; 0x01
    17c8:	3a 81       	ldd	r19, Y+2	; 0x02
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	fc 01       	movw	r30, r24
    17d0:	e2 0f       	add	r30, r18
    17d2:	f3 1f       	adc	r31, r19
    17d4:	80 81       	ld	r24, Z
    17d6:	8b 32       	cpi	r24, 0x2B	; 43
    17d8:	31 f5       	brne	.+76     	; 0x1826 <validation+0x1d0>
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	9c 01       	movw	r18, r24
    17e0:	2f 5f       	subi	r18, 0xFF	; 255
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	fc 01       	movw	r30, r24
    17ea:	e2 0f       	add	r30, r18
    17ec:	f3 1f       	adc	r31, r19
    17ee:	80 81       	ld	r24, Z
    17f0:	8d 32       	cpi	r24, 0x2D	; 45
    17f2:	c9 f4       	brne	.+50     	; 0x1826 <validation+0x1d0>
					postf[i]='-';
    17f4:	29 81       	ldd	r18, Y+1	; 0x01
    17f6:	3a 81       	ldd	r19, Y+2	; 0x02
    17f8:	8e 81       	ldd	r24, Y+6	; 0x06
    17fa:	9f 81       	ldd	r25, Y+7	; 0x07
    17fc:	fc 01       	movw	r30, r24
    17fe:	e2 0f       	add	r30, r18
    1800:	f3 1f       	adc	r31, r19
    1802:	8d e2       	ldi	r24, 0x2D	; 45
    1804:	80 83       	st	Z, r24
					e++;
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	9d 83       	std	Y+5, r25	; 0x05
    180e:	8c 83       	std	Y+4, r24	; 0x04
					e++;
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	9d 83       	std	Y+5, r25	; 0x05
    1818:	8c 83       	std	Y+4, r24	; 0x04
					i++;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	9a 83       	std	Y+2, r25	; 0x02
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	d7 c1       	rjmp	.+942    	; 0x1bd4 <validation+0x57e>
				}
				else if((e[i]=='-' && e[i+1]=='*') ||(e[i]=='-' && e[i+1]=='/') || (e[i]=='+' && e[i+1]=='*') ||(e[i]=='+' && e[i+1]=='/') ){
    1826:	29 81       	ldd	r18, Y+1	; 0x01
    1828:	3a 81       	ldd	r19, Y+2	; 0x02
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	fc 01       	movw	r30, r24
    1830:	e2 0f       	add	r30, r18
    1832:	f3 1f       	adc	r31, r19
    1834:	80 81       	ld	r24, Z
    1836:	8d 32       	cpi	r24, 0x2D	; 45
    1838:	71 f4       	brne	.+28     	; 0x1856 <validation+0x200>
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	9c 01       	movw	r18, r24
    1840:	2f 5f       	subi	r18, 0xFF	; 255
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	fc 01       	movw	r30, r24
    184a:	e2 0f       	add	r30, r18
    184c:	f3 1f       	adc	r31, r19
    184e:	80 81       	ld	r24, Z
    1850:	8a 32       	cpi	r24, 0x2A	; 42
    1852:	09 f4       	brne	.+2      	; 0x1856 <validation+0x200>
    1854:	45 c0       	rjmp	.+138    	; 0x18e0 <validation+0x28a>
    1856:	29 81       	ldd	r18, Y+1	; 0x01
    1858:	3a 81       	ldd	r19, Y+2	; 0x02
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	fc 01       	movw	r30, r24
    1860:	e2 0f       	add	r30, r18
    1862:	f3 1f       	adc	r31, r19
    1864:	80 81       	ld	r24, Z
    1866:	8d 32       	cpi	r24, 0x2D	; 45
    1868:	69 f4       	brne	.+26     	; 0x1884 <validation+0x22e>
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	9c 01       	movw	r18, r24
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	fc 01       	movw	r30, r24
    187a:	e2 0f       	add	r30, r18
    187c:	f3 1f       	adc	r31, r19
    187e:	80 81       	ld	r24, Z
    1880:	8f 32       	cpi	r24, 0x2F	; 47
    1882:	71 f1       	breq	.+92     	; 0x18e0 <validation+0x28a>
    1884:	29 81       	ldd	r18, Y+1	; 0x01
    1886:	3a 81       	ldd	r19, Y+2	; 0x02
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	fc 01       	movw	r30, r24
    188e:	e2 0f       	add	r30, r18
    1890:	f3 1f       	adc	r31, r19
    1892:	80 81       	ld	r24, Z
    1894:	8b 32       	cpi	r24, 0x2B	; 43
    1896:	69 f4       	brne	.+26     	; 0x18b2 <validation+0x25c>
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	9c 01       	movw	r18, r24
    189e:	2f 5f       	subi	r18, 0xFF	; 255
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	fc 01       	movw	r30, r24
    18a8:	e2 0f       	add	r30, r18
    18aa:	f3 1f       	adc	r31, r19
    18ac:	80 81       	ld	r24, Z
    18ae:	8a 32       	cpi	r24, 0x2A	; 42
    18b0:	b9 f0       	breq	.+46     	; 0x18e0 <validation+0x28a>
    18b2:	29 81       	ldd	r18, Y+1	; 0x01
    18b4:	3a 81       	ldd	r19, Y+2	; 0x02
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	fc 01       	movw	r30, r24
    18bc:	e2 0f       	add	r30, r18
    18be:	f3 1f       	adc	r31, r19
    18c0:	80 81       	ld	r24, Z
    18c2:	8b 32       	cpi	r24, 0x2B	; 43
    18c4:	91 f4       	brne	.+36     	; 0x18ea <validation+0x294>
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	9c 01       	movw	r18, r24
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	fc 01       	movw	r30, r24
    18d6:	e2 0f       	add	r30, r18
    18d8:	f3 1f       	adc	r31, r19
    18da:	80 81       	ld	r24, Z
    18dc:	8f 32       	cpi	r24, 0x2F	; 47
    18de:	29 f4       	brne	.+10     	; 0x18ea <validation+0x294>
					Local_u8ErrorState=ER_SYNTAXERROR;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	8b 83       	std	Y+3, r24	; 0x03
					return Local_u8ErrorState;
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 87       	std	Y+8, r24	; 0x08
    18e8:	7c c1       	rjmp	.+760    	; 0x1be2 <validation+0x58c>
				}
				else if((e[i]=='-' && is_digit_t(e[i+1])) ||(e[i]=='+' && is_digit_t(e[i+1]))  ){
    18ea:	29 81       	ldd	r18, Y+1	; 0x01
    18ec:	3a 81       	ldd	r19, Y+2	; 0x02
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	fc 01       	movw	r30, r24
    18f4:	e2 0f       	add	r30, r18
    18f6:	f3 1f       	adc	r31, r19
    18f8:	80 81       	ld	r24, Z
    18fa:	8d 32       	cpi	r24, 0x2D	; 45
    18fc:	79 f4       	brne	.+30     	; 0x191c <validation+0x2c6>
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	9c 01       	movw	r18, r24
    1904:	2f 5f       	subi	r18, 0xFF	; 255
    1906:	3f 4f       	sbci	r19, 0xFF	; 255
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	fc 01       	movw	r30, r24
    190e:	e2 0f       	add	r30, r18
    1910:	f3 1f       	adc	r31, r19
    1912:	80 81       	ld	r24, Z
    1914:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    1918:	88 23       	and	r24, r24
    191a:	d9 f4       	brne	.+54     	; 0x1952 <validation+0x2fc>
    191c:	29 81       	ldd	r18, Y+1	; 0x01
    191e:	3a 81       	ldd	r19, Y+2	; 0x02
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	fc 01       	movw	r30, r24
    1926:	e2 0f       	add	r30, r18
    1928:	f3 1f       	adc	r31, r19
    192a:	80 81       	ld	r24, Z
    192c:	8b 32       	cpi	r24, 0x2B	; 43
    192e:	09 f0       	breq	.+2      	; 0x1932 <validation+0x2dc>
    1930:	51 c1       	rjmp	.+674    	; 0x1bd4 <validation+0x57e>
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	9c 01       	movw	r18, r24
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	fc 01       	movw	r30, r24
    1942:	e2 0f       	add	r30, r18
    1944:	f3 1f       	adc	r31, r19
    1946:	80 81       	ld	r24, Z
    1948:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    194c:	88 23       	and	r24, r24
    194e:	09 f4       	brne	.+2      	; 0x1952 <validation+0x2fc>
    1950:	41 c1       	rjmp	.+642    	; 0x1bd4 <validation+0x57e>
					postf[i]=*e;
    1952:	29 81       	ldd	r18, Y+1	; 0x01
    1954:	3a 81       	ldd	r19, Y+2	; 0x02
    1956:	8e 81       	ldd	r24, Y+6	; 0x06
    1958:	9f 81       	ldd	r25, Y+7	; 0x07
    195a:	dc 01       	movw	r26, r24
    195c:	a2 0f       	add	r26, r18
    195e:	b3 1f       	adc	r27, r19
    1960:	ec 81       	ldd	r30, Y+4	; 0x04
    1962:	fd 81       	ldd	r31, Y+5	; 0x05
    1964:	80 81       	ld	r24, Z
    1966:	8c 93       	st	X, r24
					e++;
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	9d 83       	std	Y+5, r25	; 0x05
    1970:	8c 83       	std	Y+4, r24	; 0x04
					i++;
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	2b c1       	rjmp	.+598    	; 0x1bd4 <validation+0x57e>
				}
			}
			else if( ( (*e=='*') || (*e=='/') ) && (i==0) ){
    197e:	ec 81       	ldd	r30, Y+4	; 0x04
    1980:	fd 81       	ldd	r31, Y+5	; 0x05
    1982:	80 81       	ld	r24, Z
    1984:	8a 32       	cpi	r24, 0x2A	; 42
    1986:	29 f0       	breq	.+10     	; 0x1992 <validation+0x33c>
    1988:	ec 81       	ldd	r30, Y+4	; 0x04
    198a:	fd 81       	ldd	r31, Y+5	; 0x05
    198c:	80 81       	ld	r24, Z
    198e:	8f 32       	cpi	r24, 0x2F	; 47
    1990:	49 f4       	brne	.+18     	; 0x19a4 <validation+0x34e>
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	29 f4       	brne	.+10     	; 0x19a4 <validation+0x34e>
				Local_u8ErrorState=ER_SYNTAXERROR;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	8b 83       	std	Y+3, r24	; 0x03
				return Local_u8ErrorState;
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 87       	std	Y+8, r24	; 0x08
    19a2:	1f c1       	rjmp	.+574    	; 0x1be2 <validation+0x58c>
			}
			else if( ( (*e=='*') || (*e=='/') ) && (i!=0)){
    19a4:	ec 81       	ldd	r30, Y+4	; 0x04
    19a6:	fd 81       	ldd	r31, Y+5	; 0x05
    19a8:	80 81       	ld	r24, Z
    19aa:	8a 32       	cpi	r24, 0x2A	; 42
    19ac:	31 f0       	breq	.+12     	; 0x19ba <validation+0x364>
    19ae:	ec 81       	ldd	r30, Y+4	; 0x04
    19b0:	fd 81       	ldd	r31, Y+5	; 0x05
    19b2:	80 81       	ld	r24, Z
    19b4:	8f 32       	cpi	r24, 0x2F	; 47
    19b6:	09 f0       	breq	.+2      	; 0x19ba <validation+0x364>
    19b8:	0d c1       	rjmp	.+538    	; 0x1bd4 <validation+0x57e>
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <validation+0x36e>
    19c2:	08 c1       	rjmp	.+528    	; 0x1bd4 <validation+0x57e>
				if( (e[i]=='/' && e[i+1]=='/') || (e[i]=='*' && e[i+1]=='*') || (e[i]=='*' && e[i+1]=='/') || ( e[i]=='/' && e[i+1]=='*' )){
    19c4:	29 81       	ldd	r18, Y+1	; 0x01
    19c6:	3a 81       	ldd	r19, Y+2	; 0x02
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	fc 01       	movw	r30, r24
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 32       	cpi	r24, 0x2F	; 47
    19d6:	71 f4       	brne	.+28     	; 0x19f4 <validation+0x39e>
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	9c 01       	movw	r18, r24
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	9d 81       	ldd	r25, Y+5	; 0x05
    19e6:	fc 01       	movw	r30, r24
    19e8:	e2 0f       	add	r30, r18
    19ea:	f3 1f       	adc	r31, r19
    19ec:	80 81       	ld	r24, Z
    19ee:	8f 32       	cpi	r24, 0x2F	; 47
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <validation+0x39e>
    19f2:	45 c0       	rjmp	.+138    	; 0x1a7e <validation+0x428>
    19f4:	29 81       	ldd	r18, Y+1	; 0x01
    19f6:	3a 81       	ldd	r19, Y+2	; 0x02
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	9d 81       	ldd	r25, Y+5	; 0x05
    19fc:	fc 01       	movw	r30, r24
    19fe:	e2 0f       	add	r30, r18
    1a00:	f3 1f       	adc	r31, r19
    1a02:	80 81       	ld	r24, Z
    1a04:	8a 32       	cpi	r24, 0x2A	; 42
    1a06:	69 f4       	brne	.+26     	; 0x1a22 <validation+0x3cc>
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	9c 01       	movw	r18, r24
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	fc 01       	movw	r30, r24
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f3 1f       	adc	r31, r19
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8a 32       	cpi	r24, 0x2A	; 42
    1a20:	71 f1       	breq	.+92     	; 0x1a7e <validation+0x428>
    1a22:	29 81       	ldd	r18, Y+1	; 0x01
    1a24:	3a 81       	ldd	r19, Y+2	; 0x02
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	e2 0f       	add	r30, r18
    1a2e:	f3 1f       	adc	r31, r19
    1a30:	80 81       	ld	r24, Z
    1a32:	8a 32       	cpi	r24, 0x2A	; 42
    1a34:	69 f4       	brne	.+26     	; 0x1a50 <validation+0x3fa>
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	9c 01       	movw	r18, r24
    1a3c:	2f 5f       	subi	r18, 0xFF	; 255
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	fc 01       	movw	r30, r24
    1a46:	e2 0f       	add	r30, r18
    1a48:	f3 1f       	adc	r31, r19
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 32       	cpi	r24, 0x2F	; 47
    1a4e:	b9 f0       	breq	.+46     	; 0x1a7e <validation+0x428>
    1a50:	29 81       	ldd	r18, Y+1	; 0x01
    1a52:	3a 81       	ldd	r19, Y+2	; 0x02
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	fc 01       	movw	r30, r24
    1a5a:	e2 0f       	add	r30, r18
    1a5c:	f3 1f       	adc	r31, r19
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 32       	cpi	r24, 0x2F	; 47
    1a62:	91 f4       	brne	.+36     	; 0x1a88 <validation+0x432>
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	9c 01       	movw	r18, r24
    1a6a:	2f 5f       	subi	r18, 0xFF	; 255
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	9d 81       	ldd	r25, Y+5	; 0x05
    1a72:	fc 01       	movw	r30, r24
    1a74:	e2 0f       	add	r30, r18
    1a76:	f3 1f       	adc	r31, r19
    1a78:	80 81       	ld	r24, Z
    1a7a:	8a 32       	cpi	r24, 0x2A	; 42
    1a7c:	29 f4       	brne	.+10     	; 0x1a88 <validation+0x432>
					Local_u8ErrorState=ER_SYNTAXERROR;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	8b 83       	std	Y+3, r24	; 0x03
					return Local_u8ErrorState;
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 87       	std	Y+8, r24	; 0x08
    1a86:	ad c0       	rjmp	.+346    	; 0x1be2 <validation+0x58c>
				}
				else if((e[i]=='/' && e[i+1]=='+') || ( e[i]=='*' && e[i+1]=='+' )){
    1a88:	29 81       	ldd	r18, Y+1	; 0x01
    1a8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	fc 01       	movw	r30, r24
    1a92:	e2 0f       	add	r30, r18
    1a94:	f3 1f       	adc	r31, r19
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 32       	cpi	r24, 0x2F	; 47
    1a9a:	69 f4       	brne	.+26     	; 0x1ab6 <validation+0x460>
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	9c 01       	movw	r18, r24
    1aa2:	2f 5f       	subi	r18, 0xFF	; 255
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	fc 01       	movw	r30, r24
    1aac:	e2 0f       	add	r30, r18
    1aae:	f3 1f       	adc	r31, r19
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8b 32       	cpi	r24, 0x2B	; 43
    1ab4:	b9 f0       	breq	.+46     	; 0x1ae4 <validation+0x48e>
    1ab6:	29 81       	ldd	r18, Y+1	; 0x01
    1ab8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	9d 81       	ldd	r25, Y+5	; 0x05
    1abe:	fc 01       	movw	r30, r24
    1ac0:	e2 0f       	add	r30, r18
    1ac2:	f3 1f       	adc	r31, r19
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8a 32       	cpi	r24, 0x2A	; 42
    1ac8:	41 f5       	brne	.+80     	; 0x1b1a <validation+0x4c4>
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	9c 01       	movw	r18, r24
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e2 0f       	add	r30, r18
    1adc:	f3 1f       	adc	r31, r19
    1ade:	80 81       	ld	r24, Z
    1ae0:	8b 32       	cpi	r24, 0x2B	; 43
    1ae2:	d9 f4       	brne	.+54     	; 0x1b1a <validation+0x4c4>
					postf[i]=*e;
    1ae4:	29 81       	ldd	r18, Y+1	; 0x01
    1ae6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	dc 01       	movw	r26, r24
    1aee:	a2 0f       	add	r26, r18
    1af0:	b3 1f       	adc	r27, r19
    1af2:	ec 81       	ldd	r30, Y+4	; 0x04
    1af4:	fd 81       	ldd	r31, Y+5	; 0x05
    1af6:	80 81       	ld	r24, Z
    1af8:	8c 93       	st	X, r24
					e++;
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	9d 81       	ldd	r25, Y+5	; 0x05
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	9d 83       	std	Y+5, r25	; 0x05
    1b02:	8c 83       	std	Y+4, r24	; 0x04
					e++;
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	9d 83       	std	Y+5, r25	; 0x05
    1b0c:	8c 83       	std	Y+4, r24	; 0x04
					i++;
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	5d c0       	rjmp	.+186    	; 0x1bd4 <validation+0x57e>
				}
				else if((e[i]=='*' && is_digit_t(e[i+1])) ||(e[i]=='/' && is_digit_t(e[i+1]))  ){
    1b1a:	29 81       	ldd	r18, Y+1	; 0x01
    1b1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	9d 81       	ldd	r25, Y+5	; 0x05
    1b22:	fc 01       	movw	r30, r24
    1b24:	e2 0f       	add	r30, r18
    1b26:	f3 1f       	adc	r31, r19
    1b28:	80 81       	ld	r24, Z
    1b2a:	8a 32       	cpi	r24, 0x2A	; 42
    1b2c:	79 f4       	brne	.+30     	; 0x1b4c <validation+0x4f6>
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	9c 01       	movw	r18, r24
    1b34:	2f 5f       	subi	r18, 0xFF	; 255
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e2 0f       	add	r30, r18
    1b40:	f3 1f       	adc	r31, r19
    1b42:	80 81       	ld	r24, Z
    1b44:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    1b48:	88 23       	and	r24, r24
    1b4a:	c9 f4       	brne	.+50     	; 0x1b7e <validation+0x528>
    1b4c:	29 81       	ldd	r18, Y+1	; 0x01
    1b4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	fc 01       	movw	r30, r24
    1b56:	e2 0f       	add	r30, r18
    1b58:	f3 1f       	adc	r31, r19
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8f 32       	cpi	r24, 0x2F	; 47
    1b5e:	d1 f5       	brne	.+116    	; 0x1bd4 <validation+0x57e>
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	9c 01       	movw	r18, r24
    1b66:	2f 5f       	subi	r18, 0xFF	; 255
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e2 0f       	add	r30, r18
    1b72:	f3 1f       	adc	r31, r19
    1b74:	80 81       	ld	r24, Z
    1b76:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    1b7a:	88 23       	and	r24, r24
    1b7c:	59 f1       	breq	.+86     	; 0x1bd4 <validation+0x57e>
					postf[i]=*e;
    1b7e:	29 81       	ldd	r18, Y+1	; 0x01
    1b80:	3a 81       	ldd	r19, Y+2	; 0x02
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	dc 01       	movw	r26, r24
    1b88:	a2 0f       	add	r26, r18
    1b8a:	b3 1f       	adc	r27, r19
    1b8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b90:	80 81       	ld	r24, Z
    1b92:	8c 93       	st	X, r24
					e++;
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	9d 83       	std	Y+5, r25	; 0x05
    1b9c:	8c 83       	std	Y+4, r24	; 0x04
					i++;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	15 c0       	rjmp	.+42     	; 0x1bd4 <validation+0x57e>
				}
			}

		}
		else{
			postf[i]=*e;
    1baa:	29 81       	ldd	r18, Y+1	; 0x01
    1bac:	3a 81       	ldd	r19, Y+2	; 0x02
    1bae:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	a2 0f       	add	r26, r18
    1bb6:	b3 1f       	adc	r27, r19
    1bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bba:	fd 81       	ldd	r31, Y+5	; 0x05
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8c 93       	st	X, r24
			i++;
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
			e++;
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	9d 83       	std	Y+5, r25	; 0x05
    1bd2:	8c 83       	std	Y+4, r24	; 0x04
	return 0;
}
Errors_t validation(s8 *e,s8*postf){
	u8 Local_u8ErrorState = ER_MATH_SYNTAX_OK;
	int i=0;
	while(*e !='\0'){
    1bd4:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd6:	fd 81       	ldd	r31, Y+5	; 0x05
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <validation+0x58a>
    1bde:	4e cd       	rjmp	.-1380   	; 0x167c <validation+0x26>
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <validation+0x590>
			postf[i]=*e;
			i++;
			e++;
		}
	}
}
    1be2:	88 85       	ldd	r24, Y+8	; 0x08
    1be4:	89 87       	std	Y+9, r24	; 0x09
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	29 96       	adiw	r28, 0x09	; 9
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <infix_to_ABC>:

void infix_to_ABC(s8 * e,s8 * postf){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	2a 97       	sbiw	r28, 0x0a	; 10
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	98 87       	std	Y+8, r25	; 0x08
    1c10:	8f 83       	std	Y+7, r24	; 0x07
    1c12:	7a 87       	std	Y+10, r23	; 0x0a
    1c14:	69 87       	std	Y+9, r22	; 0x09
	int i=0;
    1c16:	1e 82       	std	Y+6, r1	; 0x06
    1c18:	1d 82       	std	Y+5, r1	; 0x05
	int j=0;
    1c1a:	1c 82       	std	Y+4, r1	; 0x04
    1c1c:	1b 82       	std	Y+3, r1	; 0x03
	int decimal=1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	9a c0       	rjmp	.+308    	; 0x1d5c <infix_to_ABC+0x162>
	while(*e !='\0'){
		if(is_digit_t((*e)) || (*e == '-') ){
    1c28:	ef 81       	ldd	r30, Y+7	; 0x07
    1c2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1c2c:	80 81       	ld	r24, Z
    1c2e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    1c32:	88 23       	and	r24, r24
    1c34:	31 f4       	brne	.+12     	; 0x1c42 <infix_to_ABC+0x48>
    1c36:	ef 81       	ldd	r30, Y+7	; 0x07
    1c38:	f8 85       	ldd	r31, Y+8	; 0x08
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8d 32       	cpi	r24, 0x2D	; 45
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <infix_to_ABC+0x48>
    1c40:	74 c0       	rjmp	.+232    	; 0x1d2a <infix_to_ABC+0x130>
			if(decimal>1){
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	91 05       	cpc	r25, r1
    1c4a:	0c f4       	brge	.+2      	; 0x1c4e <infix_to_ABC+0x54>
    1c4c:	42 c0       	rjmp	.+132    	; 0x1cd2 <infix_to_ABC+0xd8>

				numbers[j-1]*=decimal;
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	ac 01       	movw	r20, r24
    1c54:	41 50       	subi	r20, 0x01	; 1
    1c56:	50 40       	sbci	r21, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	fc 01       	movw	r30, r24
    1c64:	e6 55       	subi	r30, 0x56	; 86
    1c66:	fe 4f       	sbci	r31, 0xFE	; 254
    1c68:	20 81       	ld	r18, Z
    1c6a:	31 81       	ldd	r19, Z+1	; 0x01
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	b9 01       	movw	r22, r18
    1c72:	68 9f       	mul	r22, r24
    1c74:	90 01       	movw	r18, r0
    1c76:	69 9f       	mul	r22, r25
    1c78:	30 0d       	add	r19, r0
    1c7a:	78 9f       	mul	r23, r24
    1c7c:	30 0d       	add	r19, r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	ca 01       	movw	r24, r20
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	fc 01       	movw	r30, r24
    1c88:	e6 55       	subi	r30, 0x56	; 86
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	31 83       	std	Z+1, r19	; 0x01
    1c8e:	20 83       	st	Z, r18
				// *e -'0'
				numbers[j-1]+=(*e-'0');
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	ac 01       	movw	r20, r24
    1c96:	41 50       	subi	r20, 0x01	; 1
    1c98:	50 40       	sbci	r21, 0x00	; 0
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e6 55       	subi	r30, 0x56	; 86
    1ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    1caa:	20 81       	ld	r18, Z
    1cac:	31 81       	ldd	r19, Z+1	; 0x01
    1cae:	ef 81       	ldd	r30, Y+7	; 0x07
    1cb0:	f8 85       	ldd	r31, Y+8	; 0x08
    1cb2:	80 81       	ld	r24, Z
    1cb4:	99 27       	eor	r25, r25
    1cb6:	87 fd       	sbrc	r24, 7
    1cb8:	90 95       	com	r25
    1cba:	c0 97       	sbiw	r24, 0x30	; 48
    1cbc:	28 0f       	add	r18, r24
    1cbe:	39 1f       	adc	r19, r25
    1cc0:	ca 01       	movw	r24, r20
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e6 55       	subi	r30, 0x56	; 86
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	31 83       	std	Z+1, r19	; 0x01
    1cce:	20 83       	st	Z, r18
    1cd0:	40 c0       	rjmp	.+128    	; 0x1d52 <infix_to_ABC+0x158>
			}
			else{
				// *e -'0'
				numbers[j]=(*e-'0');
    1cd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd6:	ef 81       	ldd	r30, Y+7	; 0x07
    1cd8:	f8 85       	ldd	r31, Y+8	; 0x08
    1cda:	80 81       	ld	r24, Z
    1cdc:	99 27       	eor	r25, r25
    1cde:	87 fd       	sbrc	r24, 7
    1ce0:	90 95       	com	r25
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	20 53       	subi	r18, 0x30	; 48
    1ce6:	30 40       	sbci	r19, 0x00	; 0
    1ce8:	ca 01       	movw	r24, r20
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e6 55       	subi	r30, 0x56	; 86
    1cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf4:	31 83       	std	Z+1, r19	; 0x01
    1cf6:	20 83       	st	Z, r18
				postf[i]='A'+j;
    1cf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	fc 01       	movw	r30, r24
    1d02:	e2 0f       	add	r30, r18
    1d04:	f3 1f       	adc	r31, r19
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	8f 5b       	subi	r24, 0xBF	; 191
    1d0a:	80 83       	st	Z, r24
				decimal=10;
    1d0c:	8a e0       	ldi	r24, 0x0A	; 10
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
				j++;
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
				i++;
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <infix_to_ABC+0x158>
			}
		}
		else{

			postf[i]=*e;
    1d2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	dc 01       	movw	r26, r24
    1d34:	a2 0f       	add	r26, r18
    1d36:	b3 1f       	adc	r27, r19
    1d38:	ef 81       	ldd	r30, Y+7	; 0x07
    1d3a:	f8 85       	ldd	r31, Y+8	; 0x08
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8c 93       	st	X, r24
			decimal=1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
			i++;
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
		}
		e++;
    1d52:	8f 81       	ldd	r24, Y+7	; 0x07
    1d54:	98 85       	ldd	r25, Y+8	; 0x08
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	98 87       	std	Y+8, r25	; 0x08
    1d5a:	8f 83       	std	Y+7, r24	; 0x07

void infix_to_ABC(s8 * e,s8 * postf){
	int i=0;
	int j=0;
	int decimal=1;
	while(*e !='\0'){
    1d5c:	ef 81       	ldd	r30, Y+7	; 0x07
    1d5e:	f8 85       	ldd	r31, Y+8	; 0x08
    1d60:	80 81       	ld	r24, Z
    1d62:	88 23       	and	r24, r24
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <infix_to_ABC+0x16e>
    1d66:	60 cf       	rjmp	.-320    	; 0x1c28 <infix_to_ABC+0x2e>
			i++;
		}
		e++;
	}

}
    1d68:	2a 96       	adiw	r28, 0x0a	; 10
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <infix_to_pstfix>:
void infix_to_pstfix(s8 * e,s8 * postf){
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <infix_to_pstfix+0xa>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <infix_to_pstfix+0xc>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9b 83       	std	Y+3, r25	; 0x03
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	7d 83       	std	Y+5, r23	; 0x05
    1d92:	6c 83       	std	Y+4, r22	; 0x04
	u8 i=0;
    1d94:	19 82       	std	Y+1, r1	; 0x01
    1d96:	42 c0       	rjmp	.+132    	; 0x1e1c <infix_to_pstfix+0xa2>
	while(*e !='\0'){
		if(is_digit_t((*e))){
    1d98:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9c:	80 81       	ld	r24, Z
    1d9e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    1da2:	88 23       	and	r24, r24
    1da4:	f9 f0       	breq	.+62     	; 0x1de4 <infix_to_pstfix+0x6a>
			postf[i]=*e;
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	9d 81       	ldd	r25, Y+5	; 0x05
    1db0:	dc 01       	movw	r26, r24
    1db2:	a2 0f       	add	r26, r18
    1db4:	b3 1f       	adc	r27, r19
    1db6:	ea 81       	ldd	r30, Y+2	; 0x02
    1db8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dba:	80 81       	ld	r24, Z
    1dbc:	8c 93       	st	X, r24
			i++;
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	26 c0       	rjmp	.+76     	; 0x1e12 <infix_to_pstfix+0x98>
		}
		else{
			while(priority(stack[top])>=priority(*e)){
				postf[i]=pop();
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	8c 01       	movw	r16, r24
    1dd2:	02 0f       	add	r16, r18
    1dd4:	13 1f       	adc	r17, r19
    1dd6:	0e 94 b7 0a 	call	0x156e	; 0x156e <pop>
    1dda:	f8 01       	movw	r30, r16
    1ddc:	80 83       	st	Z, r24
				i++;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	89 83       	std	Y+1, r24	; 0x01
		if(is_digit_t((*e))){
			postf[i]=*e;
			i++;
		}
		else{
			while(priority(stack[top])>=priority(*e)){
    1de4:	80 91 68 01 	lds	r24, 0x0168
    1de8:	90 91 69 01 	lds	r25, 0x0169
    1dec:	fc 01       	movw	r30, r24
    1dee:	e4 57       	subi	r30, 0x74	; 116
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	80 81       	ld	r24, Z
    1df4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <priority>
    1df8:	18 2f       	mov	r17, r24
    1dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dfe:	80 81       	ld	r24, Z
    1e00:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <priority>
    1e04:	18 17       	cp	r17, r24
    1e06:	f8 f6       	brcc	.-66     	; 0x1dc6 <infix_to_pstfix+0x4c>
				postf[i]=pop();
				i++;
			}
			push(*e);
    1e08:	ea 81       	ldd	r30, Y+2	; 0x02
    1e0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e0c:	80 81       	ld	r24, Z
    1e0e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <push>
		}
		e++;
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	9b 83       	std	Y+3, r25	; 0x03
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
	}

}
void infix_to_pstfix(s8 * e,s8 * postf){
	u8 i=0;
	while(*e !='\0'){
    1e1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e20:	80 81       	ld	r24, Z
    1e22:	88 23       	and	r24, r24
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <infix_to_pstfix+0xae>
    1e26:	b8 cf       	rjmp	.-144    	; 0x1d98 <infix_to_pstfix+0x1e>
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <infix_to_pstfix+0xce>
		e++;

	}
	while(top != -1)
	{
		postf[i]=pop();
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	9d 81       	ldd	r25, Y+5	; 0x05
    1e34:	8c 01       	movw	r16, r24
    1e36:	02 0f       	add	r16, r18
    1e38:	13 1f       	adc	r17, r19
    1e3a:	0e 94 b7 0a 	call	0x156e	; 0x156e <pop>
    1e3e:	f8 01       	movw	r30, r16
    1e40:	80 83       	st	Z, r24
		i++;
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	89 83       	std	Y+1, r24	; 0x01
			push(*e);
		}
		e++;

	}
	while(top != -1)
    1e48:	80 91 68 01 	lds	r24, 0x0168
    1e4c:	90 91 69 01 	lds	r25, 0x0169
    1e50:	ff ef       	ldi	r31, 0xFF	; 255
    1e52:	8f 3f       	cpi	r24, 0xFF	; 255
    1e54:	9f 07       	cpc	r25, r31
    1e56:	49 f7       	brne	.-46     	; 0x1e2a <infix_to_pstfix+0xb0>
	{
		postf[i]=pop();
		i++;
	}
}
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <evaluation_postfixexp>:

int evaluation_postfixexp(s8 * postf){
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	2d 97       	sbiw	r28, 0x0d	; 13
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	9b 87       	std	Y+11, r25	; 0x0b
    1e82:	8a 87       	std	Y+10, r24	; 0x0a
	char ele;
	int i=0,num1,num2,result=0;
    1e84:	18 86       	std	Y+8, r1	; 0x08
    1e86:	1f 82       	std	Y+7, r1	; 0x07
    1e88:	1a 82       	std	Y+2, r1	; 0x02
    1e8a:	19 82       	std	Y+1, r1	; 0x01
    1e8c:	8a c0       	rjmp	.+276    	; 0x1fa2 <evaluation_postfixexp+0x136>

	while(i<=count)
	{
		ele =postf[i];
    1e8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e90:	38 85       	ldd	r19, Y+8	; 0x08
    1e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e96:	fc 01       	movw	r30, r24
    1e98:	e2 0f       	add	r30, r18
    1e9a:	f3 1f       	adc	r31, r19
    1e9c:	80 81       	ld	r24, Z
    1e9e:	89 87       	std	Y+9, r24	; 0x09
		if(is_digit_t(ele)){
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <is_digit_t>
    1ea6:	88 23       	and	r24, r24
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <evaluation_postfixexp+0x46>
			push(ele);
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	0e 94 9b 0a 	call	0x1536	; 0x1536 <push>
    1eb0:	73 c0       	rjmp	.+230    	; 0x1f98 <evaluation_postfixexp+0x12c>
		}
		else{
			num1=pop();
    1eb2:	0e 94 b7 0a 	call	0x156e	; 0x156e <pop>
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
			num2=pop();
    1ebe:	0e 94 b7 0a 	call	0x156e	; 0x156e <pop>
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
			switch(ele){
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3d 87       	std	Y+13, r19	; 0x0d
    1ed2:	2c 87       	std	Y+12, r18	; 0x0c
    1ed4:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ed6:	5d 85       	ldd	r21, Y+13	; 0x0d
    1ed8:	4b 32       	cpi	r20, 0x2B	; 43
    1eda:	51 05       	cpc	r21, r1
    1edc:	b1 f0       	breq	.+44     	; 0x1f0a <evaluation_postfixexp+0x9e>
    1ede:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ee0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ee2:	6c 32       	cpi	r22, 0x2C	; 44
    1ee4:	71 05       	cpc	r23, r1
    1ee6:	34 f4       	brge	.+12     	; 0x1ef4 <evaluation_postfixexp+0x88>
    1ee8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eea:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eec:	8a 32       	cpi	r24, 0x2A	; 42
    1eee:	91 05       	cpc	r25, r1
    1ef0:	59 f1       	breq	.+86     	; 0x1f48 <evaluation_postfixexp+0xdc>
    1ef2:	4e c0       	rjmp	.+156    	; 0x1f90 <evaluation_postfixexp+0x124>
    1ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ef6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ef8:	2d 32       	cpi	r18, 0x2D	; 45
    1efa:	31 05       	cpc	r19, r1
    1efc:	99 f0       	breq	.+38     	; 0x1f24 <evaluation_postfixexp+0xb8>
    1efe:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f00:	5d 85       	ldd	r21, Y+13	; 0x0d
    1f02:	4f 32       	cpi	r20, 0x2F	; 47
    1f04:	51 05       	cpc	r21, r1
    1f06:	99 f1       	breq	.+102    	; 0x1f6e <evaluation_postfixexp+0x102>
    1f08:	43 c0       	rjmp	.+134    	; 0x1f90 <evaluation_postfixexp+0x124>
			case '+':
				result=(num1-'0')+(num2-'0');
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	9c 01       	movw	r18, r24
    1f10:	20 53       	subi	r18, 0x30	; 48
    1f12:	30 40       	sbci	r19, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	c0 97       	sbiw	r24, 0x30	; 48
    1f1a:	82 0f       	add	r24, r18
    1f1c:	93 1f       	adc	r25, r19
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	36 c0       	rjmp	.+108    	; 0x1f90 <evaluation_postfixexp+0x124>
				break;
			case '-':
				result=(num2-'0')-(num1-'0');
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	ac 01       	movw	r20, r24
    1f2a:	40 53       	subi	r20, 0x30	; 48
    1f2c:	50 40       	sbci	r21, 0x00	; 0
    1f2e:	20 e3       	ldi	r18, 0x30	; 48
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	b9 01       	movw	r22, r18
    1f38:	68 1b       	sub	r22, r24
    1f3a:	79 0b       	sbc	r23, r25
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	84 0f       	add	r24, r20
    1f40:	95 1f       	adc	r25, r21
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	24 c0       	rjmp	.+72     	; 0x1f90 <evaluation_postfixexp+0x124>
				break;
			case '*':
				result=(num1-'0')*(num2-'0');
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	9c 01       	movw	r18, r24
    1f4e:	20 53       	subi	r18, 0x30	; 48
    1f50:	30 40       	sbci	r19, 0x00	; 0
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	c0 97       	sbiw	r24, 0x30	; 48
    1f58:	ac 01       	movw	r20, r24
    1f5a:	24 9f       	mul	r18, r20
    1f5c:	c0 01       	movw	r24, r0
    1f5e:	25 9f       	mul	r18, r21
    1f60:	90 0d       	add	r25, r0
    1f62:	34 9f       	mul	r19, r20
    1f64:	90 0d       	add	r25, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	11 c0       	rjmp	.+34     	; 0x1f90 <evaluation_postfixexp+0x124>
				break;
			case '/':
				result=(num2-'0')/(num1-'0');
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	ac 01       	movw	r20, r24
    1f74:	40 53       	subi	r20, 0x30	; 48
    1f76:	50 40       	sbci	r21, 0x00	; 0
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	9c 01       	movw	r18, r24
    1f7e:	20 53       	subi	r18, 0x30	; 48
    1f80:	30 40       	sbci	r19, 0x00	; 0
    1f82:	ca 01       	movw	r24, r20
    1f84:	b9 01       	movw	r22, r18
    1f86:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__divmodhi4>
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
			push(result+'0');
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	80 5d       	subi	r24, 0xD0	; 208
    1f94:	0e 94 9b 0a 	call	0x1536	; 0x1536 <push>
		}
		i++;
    1f98:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9a:	98 85       	ldd	r25, Y+8	; 0x08
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	98 87       	std	Y+8, r25	; 0x08
    1fa0:	8f 83       	std	Y+7, r24	; 0x07

int evaluation_postfixexp(s8 * postf){
	char ele;
	int i=0,num1,num2,result=0;

	while(i<=count)
    1fa2:	20 91 8a 01 	lds	r18, 0x018A
    1fa6:	30 91 8b 01 	lds	r19, 0x018B
    1faa:	8f 81       	ldd	r24, Y+7	; 0x07
    1fac:	98 85       	ldd	r25, Y+8	; 0x08
    1fae:	28 17       	cp	r18, r24
    1fb0:	39 07       	cpc	r19, r25
    1fb2:	0c f0       	brlt	.+2      	; 0x1fb6 <evaluation_postfixexp+0x14a>
    1fb4:	6c cf       	rjmp	.-296    	; 0x1e8e <evaluation_postfixexp+0x22>
			push(result+'0');
		}
		i++;

	}
	return pop();
    1fb6:	0e 94 b7 0a 	call	0x156e	; 0x156e <pop>
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0

}
    1fbe:	2d 96       	adiw	r28, 0x0d	; 13
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <is_pressed_C>:
u8 is_pressed_C(char keypressed){
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <is_pressed_C+0x6>
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	89 83       	std	Y+1, r24	; 0x01
	if(keypressed=='o')
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	8f 36       	cpi	r24, 0x6F	; 111
    1fe0:	29 f4       	brne	.+10     	; 0x1fec <is_pressed_C+0x1c>
	{
		CLCD_EnuClearDisplay();
    1fe2:	0e 94 5f 09 	call	0x12be	; 0x12be <CLCD_EnuClearDisplay>
		return 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <is_pressed_C+0x1e>
	}
	return 0;
    1fec:	1a 82       	std	Y+2, r1	; 0x02
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <main>:

void main(void){
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	c2 54       	subi	r28, 0x42	; 66
    2004:	d0 40       	sbci	r29, 0x00	; 0
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key=0xff;
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	8e 83       	std	Y+6, r24	; 0x06
	s8 exp[30];
	s8 *e;
	s8  postfix[30];
	int result=0;
    2014:	1b 82       	std	Y+3, r1	; 0x03
    2016:	1a 82       	std	Y+2, r1	; 0x02

	DIO_EnuInit();
    2018:	0e 94 67 10 	call	0x20ce	; 0x20ce <DIO_EnuInit>
	CLCD_EnuInit();
    201c:	0e 94 2a 08 	call	0x1054	; 0x1054 <CLCD_EnuInit>

	s8 i=0;
    2020:	19 82       	std	Y+1, r1	; 0x01
    2022:	20 c0       	rjmp	.+64     	; 0x2064 <main+0x6a>


	while(1){
		while(KPD_u8GetPressedKey()!='='){
			do{
				Local_u8Key=KPD_u8GetPressedKey();
    2024:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <KPD_u8GetPressedKey>
    2028:	8e 83       	std	Y+6, r24	; 0x06
			}while(Local_u8Key==0XFF);
    202a:	8e 81       	ldd	r24, Y+6	; 0x06
    202c:	8f 3f       	cpi	r24, 0xFF	; 255
    202e:	d1 f3       	breq	.-12     	; 0x2024 <main+0x2a>

			if(is_pressed_C(Local_u8Key))
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
    2032:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <is_pressed_C>
    2036:	88 23       	and	r24, r24
    2038:	a9 f4       	brne	.+42     	; 0x2064 <main+0x6a>
			{
				continue;
			}
			else if(Local_u8Key == '='){
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	8d 33       	cpi	r24, 0x3D	; 61
    203e:	b1 f0       	breq	.+44     	; 0x206c <main+0x72>
				break;
			}


			exp[i]=Local_u8Key;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	28 2f       	mov	r18, r24
    2044:	33 27       	eor	r19, r19
    2046:	27 fd       	sbrc	r18, 7
    2048:	30 95       	com	r19
    204a:	4e 81       	ldd	r20, Y+6	; 0x06
    204c:	ce 01       	movw	r24, r28
    204e:	07 96       	adiw	r24, 0x07	; 7
    2050:	fc 01       	movw	r30, r24
    2052:	e2 0f       	add	r30, r18
    2054:	f3 1f       	adc	r31, r19
    2056:	40 83       	st	Z, r20
			i++;
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	8f 5f       	subi	r24, 0xFF	; 255
    205c:	89 83       	std	Y+1, r24	; 0x01
			CLCD_EnuSendData(Local_u8Key);
    205e:	8e 81       	ldd	r24, Y+6	; 0x06
    2060:	0e 94 3d 07 	call	0xe7a	; 0xe7a <CLCD_EnuSendData>

	s8 i=0;


	while(1){
		while(KPD_u8GetPressedKey()!='='){
    2064:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <KPD_u8GetPressedKey>
    2068:	8d 33       	cpi	r24, 0x3D	; 61
    206a:	e1 f6       	brne	.-72     	; 0x2024 <main+0x2a>

			exp[i]=Local_u8Key;
			i++;
			CLCD_EnuSendData(Local_u8Key);
		}
		e=exp;
    206c:	ce 01       	movw	r24, r28
    206e:	07 96       	adiw	r24, 0x07	; 7
    2070:	9d 83       	std	Y+5, r25	; 0x05
    2072:	8c 83       	std	Y+4, r24	; 0x04
		count=i;
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	99 27       	eor	r25, r25
    2078:	87 fd       	sbrc	r24, 7
    207a:	90 95       	com	r25
    207c:	90 93 8b 01 	sts	0x018B, r25
    2080:	80 93 8a 01 	sts	0x018A, r24
		infix_to_pstfix(e,postfix);
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	9e 01       	movw	r18, r28
    208a:	2b 5d       	subi	r18, 0xDB	; 219
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <infix_to_pstfix>

		result=evaluation_postfixexp(postfix)-'0';
    2094:	ce 01       	movw	r24, r28
    2096:	85 96       	adiw	r24, 0x25	; 37
    2098:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <evaluation_postfixexp>
    209c:	c0 97       	sbiw	r24, 0x30	; 48
    209e:	9b 83       	std	Y+3, r25	; 0x03
    20a0:	8a 83       	std	Y+2, r24	; 0x02

		CLCD_EnuGoToXY(1,0);
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <CLCD_EnuGoToXY>

		CLCD_EnuWriteNumber(result);
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	9b 81       	ldd	r25, Y+3	; 0x03
    20ae:	aa 27       	eor	r26, r26
    20b0:	97 fd       	sbrc	r25, 7
    20b2:	a0 95       	com	r26
    20b4:	ba 2f       	mov	r27, r26
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 6d 09 	call	0x12da	; 0x12da <CLCD_EnuWriteNumber>
		i=0;
    20ca:	19 82       	std	Y+1, r1	; 0x01
    20cc:	cb cf       	rjmp	.-106    	; 0x2064 <main+0x6a>

000020ce <DIO_EnuInit>:
#include"DIO_Private.h"
#include"DIO_Config.h"
/*******************************************************************************/

/*************************** INITAL DIO ****************************************/
ES_t DIO_EnuInit(void){
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	0f 92       	push	r0
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Errorstate=ES_NOK;
    20d8:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_Pin7_Dir,PA_Pin6_Dir,PA_Pin5_Dir,PA_Pin4_Dir,PA_Pin3_Dir,PA_Pin2_Dir,PA_Pin1_Dir,PA_Pin0_Dir);
    20da:	ea e3       	ldi	r30, 0x3A	; 58
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 ef       	ldi	r24, 0xF0	; 240
    20e0:	80 83       	st	Z, r24
	DDRB = CONC(PB_Pin7_Dir,PB_Pin6_Dir,PB_Pin5_Dir,PB_Pin4_Dir,PB_Pin3_Dir,PB_Pin2_Dir,PB_Pin1_Dir,PB_Pin0_Dir);
    20e2:	e7 e3       	ldi	r30, 0x37	; 55
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	80 83       	st	Z, r24
	DDRC = CONC(PC_Pin7_Dir,PC_Pin6_Dir,PC_Pin5_Dir,PC_Pin4_Dir,PC_Pin3_Dir,PC_Pin2_Dir,PC_Pin1_Dir,PC_Pin0_Dir);
    20ea:	e4 e3       	ldi	r30, 0x34	; 52
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	8f ef       	ldi	r24, 0xFF	; 255
    20f0:	80 83       	st	Z, r24
	DDRD = CONC(PD_Pin7_Dir,PD_Pin6_Dir,PD_Pin5_Dir,PD_Pin4_Dir,PD_Pin3_Dir,PD_Pin2_Dir,PD_Pin1_Dir,PD_Pin0_Dir);
    20f2:	e1 e3       	ldi	r30, 0x31	; 49
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	8f ef       	ldi	r24, 0xFF	; 255
    20f8:	80 83       	st	Z, r24


	PORTA = CONC(PA_Pin7_VAL,PA_Pin6_VAL,PA_Pin5_VAL,PA_Pin4_VAL,PA_Pin3_VAL,PA_Pin2_VAL,PA_Pin1_VAL,PA_Pin0_VAL);
    20fa:	eb e3       	ldi	r30, 0x3B	; 59
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	80 83       	st	Z, r24
	PORTB = CONC(PB_Pin7_VAL,PB_Pin6_VAL,PB_Pin5_VAL,PB_Pin4_VAL,PB_Pin3_VAL,PB_Pin2_VAL,PB_Pin1_VAL,PB_Pin0_VAL);
    2102:	e8 e3       	ldi	r30, 0x38	; 56
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	10 82       	st	Z, r1
	PORTC = CONC(PC_Pin7_VAL,PC_Pin6_VAL,PC_Pin5_VAL,PC_Pin4_VAL,PC_Pin3_VAL,PC_Pin2_VAL,PC_Pin1_VAL,PC_Pin0_VAL);
    2108:	e5 e3       	ldi	r30, 0x35	; 53
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	10 82       	st	Z, r1
	PORTD = CONC(PD_Pin7_VAL,PD_Pin6_VAL,PD_Pin5_VAL,PD_Pin4_VAL,PD_Pin3_VAL,PD_Pin2_VAL,PD_Pin1_VAL,PD_Pin0_VAL);
    210e:	e2 e3       	ldi	r30, 0x32	; 50
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	10 82       	st	Z, r1

	Local_u8Errorstate=ES_OK;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Errorstate;
    2118:	89 81       	ldd	r24, Y+1	; 0x01
}
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <DIO_EnuSetPortDirection>:

/*******************************************************************************/

/*************************** CONTROL PORTS *************************************/
ES_t DIO_EnuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <DIO_EnuSetPortDirection+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <DIO_EnuSetPortDirection+0x8>
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
    2134:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD)
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	85 34       	cpi	r24, 0x45	; 69
    213a:	b0 f5       	brcc	.+108    	; 0x21a8 <DIO_EnuSetPortDirection+0x86>
	{
		switch(Copy_u8PortID)
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	3d 83       	std	Y+5, r19	; 0x05
    2144:	2c 83       	std	Y+4, r18	; 0x04
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	9d 81       	ldd	r25, Y+5	; 0x05
    214a:	82 34       	cpi	r24, 0x42	; 66
    214c:	91 05       	cpc	r25, r1
    214e:	d9 f0       	breq	.+54     	; 0x2186 <DIO_EnuSetPortDirection+0x64>
    2150:	2c 81       	ldd	r18, Y+4	; 0x04
    2152:	3d 81       	ldd	r19, Y+5	; 0x05
    2154:	23 34       	cpi	r18, 0x43	; 67
    2156:	31 05       	cpc	r19, r1
    2158:	34 f4       	brge	.+12     	; 0x2166 <DIO_EnuSetPortDirection+0x44>
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	81 34       	cpi	r24, 0x41	; 65
    2160:	91 05       	cpc	r25, r1
    2162:	61 f0       	breq	.+24     	; 0x217c <DIO_EnuSetPortDirection+0x5a>
    2164:	1e c0       	rjmp	.+60     	; 0x21a2 <DIO_EnuSetPortDirection+0x80>
    2166:	2c 81       	ldd	r18, Y+4	; 0x04
    2168:	3d 81       	ldd	r19, Y+5	; 0x05
    216a:	23 34       	cpi	r18, 0x43	; 67
    216c:	31 05       	cpc	r19, r1
    216e:	81 f0       	breq	.+32     	; 0x2190 <DIO_EnuSetPortDirection+0x6e>
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	84 34       	cpi	r24, 0x44	; 68
    2176:	91 05       	cpc	r25, r1
    2178:	81 f0       	breq	.+32     	; 0x219a <DIO_EnuSetPortDirection+0x78>
    217a:	13 c0       	rjmp	.+38     	; 0x21a2 <DIO_EnuSetPortDirection+0x80>
		{
			case 'A':
					DDRA=Copy_u8Value;
    217c:	ea e3       	ldi	r30, 0x3A	; 58
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	80 83       	st	Z, r24
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <DIO_EnuSetPortDirection+0x80>
					break;
			case 'B':
					DDRB=Copy_u8Value;
    2186:	e7 e3       	ldi	r30, 0x37	; 55
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	80 83       	st	Z, r24
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <DIO_EnuSetPortDirection+0x80>
					break;
			case 'C':
					DDRC=Copy_u8Value;
    2190:	e4 e3       	ldi	r30, 0x34	; 52
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	80 83       	st	Z, r24
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <DIO_EnuSetPortDirection+0x80>
					break;
			case 'D':
					DDRD=Copy_u8Value;
    219a:	e1 e3       	ldi	r30, 0x31	; 49
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	80 83       	st	Z, r24
					break;
		}
		Local_u8Errorstate=ES_OK;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <DIO_EnuSetPortDirection+0x8a>
	}
	else
	{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <DIO_EnuSetPortValue>:

/*******************************************************************************/

ES_t DIO_EnuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value){
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <DIO_EnuSetPortValue+0x6>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <DIO_EnuSetPortValue+0x8>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	8a 83       	std	Y+2, r24	; 0x02
    21ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
    21d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD)
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	85 34       	cpi	r24, 0x45	; 69
    21d6:	b0 f5       	brcc	.+108    	; 0x2244 <DIO_EnuSetPortValue+0x86>
	{
		switch(Copy_u8PortID)
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3d 83       	std	Y+5, r19	; 0x05
    21e0:	2c 83       	std	Y+4, r18	; 0x04
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	82 34       	cpi	r24, 0x42	; 66
    21e8:	91 05       	cpc	r25, r1
    21ea:	d9 f0       	breq	.+54     	; 0x2222 <DIO_EnuSetPortValue+0x64>
    21ec:	2c 81       	ldd	r18, Y+4	; 0x04
    21ee:	3d 81       	ldd	r19, Y+5	; 0x05
    21f0:	23 34       	cpi	r18, 0x43	; 67
    21f2:	31 05       	cpc	r19, r1
    21f4:	34 f4       	brge	.+12     	; 0x2202 <DIO_EnuSetPortValue+0x44>
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	81 34       	cpi	r24, 0x41	; 65
    21fc:	91 05       	cpc	r25, r1
    21fe:	61 f0       	breq	.+24     	; 0x2218 <DIO_EnuSetPortValue+0x5a>
    2200:	1e c0       	rjmp	.+60     	; 0x223e <DIO_EnuSetPortValue+0x80>
    2202:	2c 81       	ldd	r18, Y+4	; 0x04
    2204:	3d 81       	ldd	r19, Y+5	; 0x05
    2206:	23 34       	cpi	r18, 0x43	; 67
    2208:	31 05       	cpc	r19, r1
    220a:	81 f0       	breq	.+32     	; 0x222c <DIO_EnuSetPortValue+0x6e>
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	84 34       	cpi	r24, 0x44	; 68
    2212:	91 05       	cpc	r25, r1
    2214:	81 f0       	breq	.+32     	; 0x2236 <DIO_EnuSetPortValue+0x78>
    2216:	13 c0       	rjmp	.+38     	; 0x223e <DIO_EnuSetPortValue+0x80>
		{
			case 'A':
					PORTA=Copy_u8Value;
    2218:	eb e3       	ldi	r30, 0x3B	; 59
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	80 83       	st	Z, r24
    2220:	0e c0       	rjmp	.+28     	; 0x223e <DIO_EnuSetPortValue+0x80>
					break;
			case 'B':
					PORTB=Copy_u8Value;
    2222:	e8 e3       	ldi	r30, 0x38	; 56
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	80 83       	st	Z, r24
    222a:	09 c0       	rjmp	.+18     	; 0x223e <DIO_EnuSetPortValue+0x80>
					break;
			case 'C':
					PORTC=Copy_u8Value;
    222c:	e5 e3       	ldi	r30, 0x35	; 53
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	80 83       	st	Z, r24
    2234:	04 c0       	rjmp	.+8      	; 0x223e <DIO_EnuSetPortValue+0x80>
					break;
			case 'D':
					PORTD=Copy_u8Value;
    2236:	e2 e3       	ldi	r30, 0x32	; 50
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	80 83       	st	Z, r24
					break;
		}
		Local_u8Errorstate=ES_OK;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <DIO_EnuSetPortValue+0x8a>
	}
	else
	{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <DIO_EnuTogPort>:

/*******************************************************************************/

ES_t DIO_EnuTogPort(u8 Copy_u8PortID){
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <DIO_EnuTogPort+0x6>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <DIO_EnuTogPort+0x8>
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Errorstate=ES_NOK;
    2268:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD)
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	85 34       	cpi	r24, 0x45	; 69
    226e:	08 f0       	brcs	.+2      	; 0x2272 <DIO_EnuTogPort+0x18>
    2270:	42 c0       	rjmp	.+132    	; 0x22f6 <DIO_EnuTogPort+0x9c>
	{
		switch(Copy_u8PortID)
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	3c 83       	std	Y+4, r19	; 0x04
    227a:	2b 83       	std	Y+3, r18	; 0x03
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	82 34       	cpi	r24, 0x42	; 66
    2282:	91 05       	cpc	r25, r1
    2284:	f1 f0       	breq	.+60     	; 0x22c2 <DIO_EnuTogPort+0x68>
    2286:	2b 81       	ldd	r18, Y+3	; 0x03
    2288:	3c 81       	ldd	r19, Y+4	; 0x04
    228a:	23 34       	cpi	r18, 0x43	; 67
    228c:	31 05       	cpc	r19, r1
    228e:	34 f4       	brge	.+12     	; 0x229c <DIO_EnuTogPort+0x42>
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	81 34       	cpi	r24, 0x41	; 65
    2296:	91 05       	cpc	r25, r1
    2298:	61 f0       	breq	.+24     	; 0x22b2 <DIO_EnuTogPort+0x58>
    229a:	2a c0       	rjmp	.+84     	; 0x22f0 <DIO_EnuTogPort+0x96>
    229c:	2b 81       	ldd	r18, Y+3	; 0x03
    229e:	3c 81       	ldd	r19, Y+4	; 0x04
    22a0:	23 34       	cpi	r18, 0x43	; 67
    22a2:	31 05       	cpc	r19, r1
    22a4:	b1 f0       	breq	.+44     	; 0x22d2 <DIO_EnuTogPort+0x78>
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	84 34       	cpi	r24, 0x44	; 68
    22ac:	91 05       	cpc	r25, r1
    22ae:	c9 f0       	breq	.+50     	; 0x22e2 <DIO_EnuTogPort+0x88>
    22b0:	1f c0       	rjmp	.+62     	; 0x22f0 <DIO_EnuTogPort+0x96>
		{
			case 'A':
					PORTA=~PORTA;
    22b2:	ab e3       	ldi	r26, 0x3B	; 59
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	eb e3       	ldi	r30, 0x3B	; 59
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 95       	com	r24
    22be:	8c 93       	st	X, r24
    22c0:	17 c0       	rjmp	.+46     	; 0x22f0 <DIO_EnuTogPort+0x96>
					break;
			case 'B':
					PORTB=~PORTB;
    22c2:	a8 e3       	ldi	r26, 0x38	; 56
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e8 e3       	ldi	r30, 0x38	; 56
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	80 95       	com	r24
    22ce:	8c 93       	st	X, r24
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <DIO_EnuTogPort+0x96>
					break;
			case 'C':
					PORTC=~PORTC;
    22d2:	a5 e3       	ldi	r26, 0x35	; 53
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e5 e3       	ldi	r30, 0x35	; 53
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	80 95       	com	r24
    22de:	8c 93       	st	X, r24
    22e0:	07 c0       	rjmp	.+14     	; 0x22f0 <DIO_EnuTogPort+0x96>
					break;
			case 'D':
					PORTD=~PORTD;
    22e2:	a2 e3       	ldi	r26, 0x32	; 50
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e2 e3       	ldi	r30, 0x32	; 50
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 95       	com	r24
    22ee:	8c 93       	st	X, r24
					break;
		}
		Local_u8Errorstate=ES_OK;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <DIO_EnuTogPort+0xa0>
	}
	else
	{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <DIO_EnuGetPortValue>:

/*******************************************************************************/

ES_t DIO_EnuGetPortValue(u8 Copy_u8PortID ,u8 * Copy_u8Value){
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <DIO_EnuGetPortValue+0x6>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <DIO_EnuGetPortValue+0x8>
    2312:	00 d0       	rcall	.+0      	; 0x2314 <DIO_EnuGetPortValue+0xa>
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	8a 83       	std	Y+2, r24	; 0x02
    231a:	7c 83       	std	Y+4, r23	; 0x04
    231c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
    231e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value!=NULL)
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	09 f4       	brne	.+2      	; 0x232a <DIO_EnuGetPortValue+0x20>
    2328:	45 c0       	rjmp	.+138    	; 0x23b4 <DIO_EnuGetPortValue+0xaa>
	{
		if(Copy_u8PortID<=DIO_PORTD){
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	85 34       	cpi	r24, 0x45	; 69
    232e:	08 f0       	brcs	.+2      	; 0x2332 <DIO_EnuGetPortValue+0x28>
    2330:	3e c0       	rjmp	.+124    	; 0x23ae <DIO_EnuGetPortValue+0xa4>
				 switch(Copy_u8PortID)
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3e 83       	std	Y+6, r19	; 0x06
    233a:	2d 83       	std	Y+5, r18	; 0x05
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	82 34       	cpi	r24, 0x42	; 66
    2342:	91 05       	cpc	r25, r1
    2344:	e9 f0       	breq	.+58     	; 0x2380 <DIO_EnuGetPortValue+0x76>
    2346:	2d 81       	ldd	r18, Y+5	; 0x05
    2348:	3e 81       	ldd	r19, Y+6	; 0x06
    234a:	23 34       	cpi	r18, 0x43	; 67
    234c:	31 05       	cpc	r19, r1
    234e:	34 f4       	brge	.+12     	; 0x235c <DIO_EnuGetPortValue+0x52>
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	81 34       	cpi	r24, 0x41	; 65
    2356:	91 05       	cpc	r25, r1
    2358:	61 f0       	breq	.+24     	; 0x2372 <DIO_EnuGetPortValue+0x68>
    235a:	26 c0       	rjmp	.+76     	; 0x23a8 <DIO_EnuGetPortValue+0x9e>
    235c:	2d 81       	ldd	r18, Y+5	; 0x05
    235e:	3e 81       	ldd	r19, Y+6	; 0x06
    2360:	23 34       	cpi	r18, 0x43	; 67
    2362:	31 05       	cpc	r19, r1
    2364:	a1 f0       	breq	.+40     	; 0x238e <DIO_EnuGetPortValue+0x84>
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	84 34       	cpi	r24, 0x44	; 68
    236c:	91 05       	cpc	r25, r1
    236e:	b1 f0       	breq	.+44     	; 0x239c <DIO_EnuGetPortValue+0x92>
    2370:	1b c0       	rjmp	.+54     	; 0x23a8 <DIO_EnuGetPortValue+0x9e>
				 {
					case 'A':
							*Copy_u8Value=PINA;
    2372:	e9 e3       	ldi	r30, 0x39	; 57
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	eb 81       	ldd	r30, Y+3	; 0x03
    237a:	fc 81       	ldd	r31, Y+4	; 0x04
    237c:	80 83       	st	Z, r24
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <DIO_EnuGetPortValue+0x9e>
							break;
					case 'B':
							*Copy_u8Value=PINB;
    2380:	e6 e3       	ldi	r30, 0x36	; 54
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	eb 81       	ldd	r30, Y+3	; 0x03
    2388:	fc 81       	ldd	r31, Y+4	; 0x04
    238a:	80 83       	st	Z, r24
    238c:	0d c0       	rjmp	.+26     	; 0x23a8 <DIO_EnuGetPortValue+0x9e>
							break;
					case 'C':
							*Copy_u8Value=PINC;
    238e:	e3 e3       	ldi	r30, 0x33	; 51
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	eb 81       	ldd	r30, Y+3	; 0x03
    2396:	fc 81       	ldd	r31, Y+4	; 0x04
    2398:	80 83       	st	Z, r24
    239a:	06 c0       	rjmp	.+12     	; 0x23a8 <DIO_EnuGetPortValue+0x9e>
							break;
					case 'D':
							*Copy_u8Value=PIND;
    239c:	e0 e3       	ldi	r30, 0x30	; 48
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	eb 81       	ldd	r30, Y+3	; 0x03
    23a4:	fc 81       	ldd	r31, Y+4	; 0x04
    23a6:	80 83       	st	Z, r24
							break;
				 }
				 Local_u8Errorstate=ES_OK;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	05 c0       	rjmp	.+10     	; 0x23b8 <DIO_EnuGetPortValue+0xae>
			}
		else{
				Local_u8Errorstate=ES_OUT_OF_RANGE;
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <DIO_EnuGetPortValue+0xae>
		    }
	}
	else
	{
		Local_u8Errorstate=ES_PNULL;
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ba:	26 96       	adiw	r28, 0x06	; 6
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <DIO_EnuSetPinDirection>:
/*******************************************************************************/
/*******************************************************************************/


/*************************** CONTROL PINS *************************************/
ES_t DIO_EnuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID ,u8 Copy_u8Value){
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <DIO_EnuSetPinDirection+0x6>
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <DIO_EnuSetPinDirection+0x8>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <DIO_EnuSetPinDirection+0xa>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	8a 83       	std	Y+2, r24	; 0x02
    23dc:	6b 83       	std	Y+3, r22	; 0x03
    23de:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Errorstate=ES_NOK;
    23e0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7 && Copy_u8Value<=OUTPUT)
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	85 34       	cpi	r24, 0x45	; 69
    23e6:	08 f0       	brcs	.+2      	; 0x23ea <DIO_EnuSetPinDirection+0x1e>
    23e8:	d1 c0       	rjmp	.+418    	; 0x258c <DIO_EnuSetPinDirection+0x1c0>
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	88 30       	cpi	r24, 0x08	; 8
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <DIO_EnuSetPinDirection+0x26>
    23f0:	cd c0       	rjmp	.+410    	; 0x258c <DIO_EnuSetPinDirection+0x1c0>
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	82 30       	cpi	r24, 0x02	; 2
    23f6:	08 f0       	brcs	.+2      	; 0x23fa <DIO_EnuSetPinDirection+0x2e>
    23f8:	c9 c0       	rjmp	.+402    	; 0x258c <DIO_EnuSetPinDirection+0x1c0>
		{
					 switch(Copy_u8PortID)
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	3e 83       	std	Y+6, r19	; 0x06
    2402:	2d 83       	std	Y+5, r18	; 0x05
    2404:	6d 81       	ldd	r22, Y+5	; 0x05
    2406:	7e 81       	ldd	r23, Y+6	; 0x06
    2408:	62 34       	cpi	r22, 0x42	; 66
    240a:	71 05       	cpc	r23, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <DIO_EnuSetPinDirection+0x44>
    240e:	41 c0       	rjmp	.+130    	; 0x2492 <DIO_EnuSetPinDirection+0xc6>
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	83 34       	cpi	r24, 0x43	; 67
    2416:	91 05       	cpc	r25, r1
    2418:	34 f4       	brge	.+12     	; 0x2426 <DIO_EnuSetPinDirection+0x5a>
    241a:	2d 81       	ldd	r18, Y+5	; 0x05
    241c:	3e 81       	ldd	r19, Y+6	; 0x06
    241e:	21 34       	cpi	r18, 0x41	; 65
    2420:	31 05       	cpc	r19, r1
    2422:	71 f0       	breq	.+28     	; 0x2440 <DIO_EnuSetPinDirection+0x74>
    2424:	b0 c0       	rjmp	.+352    	; 0x2586 <DIO_EnuSetPinDirection+0x1ba>
    2426:	6d 81       	ldd	r22, Y+5	; 0x05
    2428:	7e 81       	ldd	r23, Y+6	; 0x06
    242a:	63 34       	cpi	r22, 0x43	; 67
    242c:	71 05       	cpc	r23, r1
    242e:	09 f4       	brne	.+2      	; 0x2432 <DIO_EnuSetPinDirection+0x66>
    2430:	59 c0       	rjmp	.+178    	; 0x24e4 <DIO_EnuSetPinDirection+0x118>
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	84 34       	cpi	r24, 0x44	; 68
    2438:	91 05       	cpc	r25, r1
    243a:	09 f4       	brne	.+2      	; 0x243e <DIO_EnuSetPinDirection+0x72>
    243c:	7c c0       	rjmp	.+248    	; 0x2536 <DIO_EnuSetPinDirection+0x16a>
    243e:	a3 c0       	rjmp	.+326    	; 0x2586 <DIO_EnuSetPinDirection+0x1ba>
					 {
						case 'A':
								CLR_BIT(DDRA,Copy_u8PinID);
    2440:	aa e3       	ldi	r26, 0x3A	; 58
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ea e3       	ldi	r30, 0x3A	; 58
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	48 2f       	mov	r20, r24
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	02 c0       	rjmp	.+4      	; 0x245c <DIO_EnuSetPinDirection+0x90>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	2a 95       	dec	r18
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <DIO_EnuSetPinDirection+0x8c>
    2460:	80 95       	com	r24
    2462:	84 23       	and	r24, r20
    2464:	8c 93       	st	X, r24
								DDRA|=(Copy_u8Value<<Copy_u8PinID);
    2466:	aa e3       	ldi	r26, 0x3A	; 58
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ea e3       	ldi	r30, 0x3A	; 58
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	48 2f       	mov	r20, r24
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	b9 01       	movw	r22, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <DIO_EnuSetPinDirection+0xba>
    2482:	66 0f       	add	r22, r22
    2484:	77 1f       	adc	r23, r23
    2486:	8a 95       	dec	r24
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <DIO_EnuSetPinDirection+0xb6>
    248a:	cb 01       	movw	r24, r22
    248c:	84 2b       	or	r24, r20
    248e:	8c 93       	st	X, r24
    2490:	7a c0       	rjmp	.+244    	; 0x2586 <DIO_EnuSetPinDirection+0x1ba>
								break;
						case 'B':
								CLR_BIT(DDRB,Copy_u8PinID);
    2492:	a7 e3       	ldi	r26, 0x37	; 55
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e7 e3       	ldi	r30, 0x37	; 55
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <DIO_EnuSetPinDirection+0xe2>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	2a 95       	dec	r18
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <DIO_EnuSetPinDirection+0xde>
    24b2:	80 95       	com	r24
    24b4:	84 23       	and	r24, r20
    24b6:	8c 93       	st	X, r24
								DDRB|=(Copy_u8Value<<Copy_u8PinID);
    24b8:	a7 e3       	ldi	r26, 0x37	; 55
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e7 e3       	ldi	r30, 0x37	; 55
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	48 2f       	mov	r20, r24
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	b9 01       	movw	r22, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_EnuSetPinDirection+0x10c>
    24d4:	66 0f       	add	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	8a 95       	dec	r24
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_EnuSetPinDirection+0x108>
    24dc:	cb 01       	movw	r24, r22
    24de:	84 2b       	or	r24, r20
    24e0:	8c 93       	st	X, r24
    24e2:	51 c0       	rjmp	.+162    	; 0x2586 <DIO_EnuSetPinDirection+0x1ba>
								break;
						case 'C':
								CLR_BIT(DDRC,Copy_u8PinID);
    24e4:	a4 e3       	ldi	r26, 0x34	; 52
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e4 e3       	ldi	r30, 0x34	; 52
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <DIO_EnuSetPinDirection+0x134>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	2a 95       	dec	r18
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <DIO_EnuSetPinDirection+0x130>
    2504:	80 95       	com	r24
    2506:	84 23       	and	r24, r20
    2508:	8c 93       	st	X, r24
								DDRC|=(Copy_u8Value<<Copy_u8PinID);
    250a:	a4 e3       	ldi	r26, 0x34	; 52
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e4 e3       	ldi	r30, 0x34	; 52
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	48 2f       	mov	r20, r24
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	b9 01       	movw	r22, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_EnuSetPinDirection+0x15e>
    2526:	66 0f       	add	r22, r22
    2528:	77 1f       	adc	r23, r23
    252a:	8a 95       	dec	r24
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_EnuSetPinDirection+0x15a>
    252e:	cb 01       	movw	r24, r22
    2530:	84 2b       	or	r24, r20
    2532:	8c 93       	st	X, r24
    2534:	28 c0       	rjmp	.+80     	; 0x2586 <DIO_EnuSetPinDirection+0x1ba>
								break;
						case 'D':
								CLR_BIT(DDRD,Copy_u8PinID);
    2536:	a1 e3       	ldi	r26, 0x31	; 49
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e1 e3       	ldi	r30, 0x31	; 49
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	48 2f       	mov	r20, r24
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <DIO_EnuSetPinDirection+0x186>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	2a 95       	dec	r18
    2554:	e2 f7       	brpl	.-8      	; 0x254e <DIO_EnuSetPinDirection+0x182>
    2556:	80 95       	com	r24
    2558:	84 23       	and	r24, r20
    255a:	8c 93       	st	X, r24
								DDRD|=(Copy_u8Value<<Copy_u8PinID);
    255c:	a1 e3       	ldi	r26, 0x31	; 49
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e1 e3       	ldi	r30, 0x31	; 49
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	48 2f       	mov	r20, r24
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	b9 01       	movw	r22, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_EnuSetPinDirection+0x1b0>
    2578:	66 0f       	add	r22, r22
    257a:	77 1f       	adc	r23, r23
    257c:	8a 95       	dec	r24
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <DIO_EnuSetPinDirection+0x1ac>
    2580:	cb 01       	movw	r24, r22
    2582:	84 2b       	or	r24, r20
    2584:	8c 93       	st	X, r24
								break;
					 }
					 Local_u8Errorstate=ES_OK;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <DIO_EnuSetPinDirection+0x1c4>
			}
	else {
				Local_u8Errorstate=ES_OUT_OF_RANGE;
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	89 83       	std	Y+1, r24	; 0x01
	    }

	return Local_u8Errorstate;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
}
    2592:	26 96       	adiw	r28, 0x06	; 6
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <DIO_EnuSetPinValue>:

/*******************************************************************************/

ES_t DIO_EnuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value){
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <DIO_EnuSetPinValue+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <DIO_EnuSetPinValue+0x8>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <DIO_EnuSetPinValue+0xa>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	6b 83       	std	Y+3, r22	; 0x03
    25b6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Errorstate=ES_NOK;
    25b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7 && Copy_u8Value<=OUTPUT)
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	85 34       	cpi	r24, 0x45	; 69
    25be:	08 f0       	brcs	.+2      	; 0x25c2 <DIO_EnuSetPinValue+0x1e>
    25c0:	d1 c0       	rjmp	.+418    	; 0x2764 <DIO_EnuSetPinValue+0x1c0>
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	88 30       	cpi	r24, 0x08	; 8
    25c6:	08 f0       	brcs	.+2      	; 0x25ca <DIO_EnuSetPinValue+0x26>
    25c8:	cd c0       	rjmp	.+410    	; 0x2764 <DIO_EnuSetPinValue+0x1c0>
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	82 30       	cpi	r24, 0x02	; 2
    25ce:	08 f0       	brcs	.+2      	; 0x25d2 <DIO_EnuSetPinValue+0x2e>
    25d0:	c9 c0       	rjmp	.+402    	; 0x2764 <DIO_EnuSetPinValue+0x1c0>
		{
					 switch(Copy_u8PortID)
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	3e 83       	std	Y+6, r19	; 0x06
    25da:	2d 83       	std	Y+5, r18	; 0x05
    25dc:	6d 81       	ldd	r22, Y+5	; 0x05
    25de:	7e 81       	ldd	r23, Y+6	; 0x06
    25e0:	62 34       	cpi	r22, 0x42	; 66
    25e2:	71 05       	cpc	r23, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <DIO_EnuSetPinValue+0x44>
    25e6:	41 c0       	rjmp	.+130    	; 0x266a <DIO_EnuSetPinValue+0xc6>
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	83 34       	cpi	r24, 0x43	; 67
    25ee:	91 05       	cpc	r25, r1
    25f0:	34 f4       	brge	.+12     	; 0x25fe <DIO_EnuSetPinValue+0x5a>
    25f2:	2d 81       	ldd	r18, Y+5	; 0x05
    25f4:	3e 81       	ldd	r19, Y+6	; 0x06
    25f6:	21 34       	cpi	r18, 0x41	; 65
    25f8:	31 05       	cpc	r19, r1
    25fa:	71 f0       	breq	.+28     	; 0x2618 <DIO_EnuSetPinValue+0x74>
    25fc:	b0 c0       	rjmp	.+352    	; 0x275e <DIO_EnuSetPinValue+0x1ba>
    25fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2600:	7e 81       	ldd	r23, Y+6	; 0x06
    2602:	63 34       	cpi	r22, 0x43	; 67
    2604:	71 05       	cpc	r23, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <DIO_EnuSetPinValue+0x66>
    2608:	59 c0       	rjmp	.+178    	; 0x26bc <DIO_EnuSetPinValue+0x118>
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	84 34       	cpi	r24, 0x44	; 68
    2610:	91 05       	cpc	r25, r1
    2612:	09 f4       	brne	.+2      	; 0x2616 <DIO_EnuSetPinValue+0x72>
    2614:	7c c0       	rjmp	.+248    	; 0x270e <DIO_EnuSetPinValue+0x16a>
    2616:	a3 c0       	rjmp	.+326    	; 0x275e <DIO_EnuSetPinValue+0x1ba>
					 {
						case 'A':
								CLR_BIT(PORTA,Copy_u8PinID);
    2618:	ab e3       	ldi	r26, 0x3B	; 59
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	eb e3       	ldi	r30, 0x3B	; 59
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	48 2f       	mov	r20, r24
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <DIO_EnuSetPinValue+0x90>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	2a 95       	dec	r18
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <DIO_EnuSetPinValue+0x8c>
    2638:	80 95       	com	r24
    263a:	84 23       	and	r24, r20
    263c:	8c 93       	st	X, r24
								PORTA|=(Copy_u8Value<<Copy_u8PinID);
    263e:	ab e3       	ldi	r26, 0x3B	; 59
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	eb e3       	ldi	r30, 0x3B	; 59
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	48 2f       	mov	r20, r24
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	b9 01       	movw	r22, r18
    2658:	02 c0       	rjmp	.+4      	; 0x265e <DIO_EnuSetPinValue+0xba>
    265a:	66 0f       	add	r22, r22
    265c:	77 1f       	adc	r23, r23
    265e:	8a 95       	dec	r24
    2660:	e2 f7       	brpl	.-8      	; 0x265a <DIO_EnuSetPinValue+0xb6>
    2662:	cb 01       	movw	r24, r22
    2664:	84 2b       	or	r24, r20
    2666:	8c 93       	st	X, r24
    2668:	7a c0       	rjmp	.+244    	; 0x275e <DIO_EnuSetPinValue+0x1ba>
								break;
						case 'B':
								CLR_BIT(PORTB,Copy_u8PinID);
    266a:	a8 e3       	ldi	r26, 0x38	; 56
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e8 e3       	ldi	r30, 0x38	; 56
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	48 2f       	mov	r20, r24
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <DIO_EnuSetPinValue+0xe2>
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	2a 95       	dec	r18
    2688:	e2 f7       	brpl	.-8      	; 0x2682 <DIO_EnuSetPinValue+0xde>
    268a:	80 95       	com	r24
    268c:	84 23       	and	r24, r20
    268e:	8c 93       	st	X, r24
								PORTB|=(Copy_u8Value<<Copy_u8PinID);
    2690:	a8 e3       	ldi	r26, 0x38	; 56
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e8 e3       	ldi	r30, 0x38	; 56
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	48 2f       	mov	r20, r24
    269c:	8c 81       	ldd	r24, Y+4	; 0x04
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	b9 01       	movw	r22, r18
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <DIO_EnuSetPinValue+0x10c>
    26ac:	66 0f       	add	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	8a 95       	dec	r24
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <DIO_EnuSetPinValue+0x108>
    26b4:	cb 01       	movw	r24, r22
    26b6:	84 2b       	or	r24, r20
    26b8:	8c 93       	st	X, r24
    26ba:	51 c0       	rjmp	.+162    	; 0x275e <DIO_EnuSetPinValue+0x1ba>
								break;
						case 'C':
								CLR_BIT(PORTC,Copy_u8PinID);
    26bc:	a5 e3       	ldi	r26, 0x35	; 53
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e5 e3       	ldi	r30, 0x35	; 53
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	48 2f       	mov	r20, r24
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <DIO_EnuSetPinValue+0x134>
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	2a 95       	dec	r18
    26da:	e2 f7       	brpl	.-8      	; 0x26d4 <DIO_EnuSetPinValue+0x130>
    26dc:	80 95       	com	r24
    26de:	84 23       	and	r24, r20
    26e0:	8c 93       	st	X, r24
								PORTC|=(Copy_u8Value<<Copy_u8PinID);
    26e2:	a5 e3       	ldi	r26, 0x35	; 53
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e5 e3       	ldi	r30, 0x35	; 53
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	48 2f       	mov	r20, r24
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	b9 01       	movw	r22, r18
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <DIO_EnuSetPinValue+0x15e>
    26fe:	66 0f       	add	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	8a 95       	dec	r24
    2704:	e2 f7       	brpl	.-8      	; 0x26fe <DIO_EnuSetPinValue+0x15a>
    2706:	cb 01       	movw	r24, r22
    2708:	84 2b       	or	r24, r20
    270a:	8c 93       	st	X, r24
    270c:	28 c0       	rjmp	.+80     	; 0x275e <DIO_EnuSetPinValue+0x1ba>
								break;
						case 'D':
								CLR_BIT(PORTD,Copy_u8PinID);
    270e:	a2 e3       	ldi	r26, 0x32	; 50
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e2 e3       	ldi	r30, 0x32	; 50
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	48 2f       	mov	r20, r24
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	02 c0       	rjmp	.+4      	; 0x272a <DIO_EnuSetPinValue+0x186>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	2a 95       	dec	r18
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <DIO_EnuSetPinValue+0x182>
    272e:	80 95       	com	r24
    2730:	84 23       	and	r24, r20
    2732:	8c 93       	st	X, r24
								PORTD|=(Copy_u8Value<<Copy_u8PinID);
    2734:	a2 e3       	ldi	r26, 0x32	; 50
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e2 e3       	ldi	r30, 0x32	; 50
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	48 2f       	mov	r20, r24
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	b9 01       	movw	r22, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <DIO_EnuSetPinValue+0x1b0>
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	8a 95       	dec	r24
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <DIO_EnuSetPinValue+0x1ac>
    2758:	cb 01       	movw	r24, r22
    275a:	84 2b       	or	r24, r20
    275c:	8c 93       	st	X, r24
								break;
					 }
				Local_u8Errorstate=ES_OK;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <DIO_EnuSetPinValue+0x1c4>
			}
	else {
				Local_u8Errorstate=ES_OUT_OF_RANGE;
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	89 83       	std	Y+1, r24	; 0x01
	    }


	return Local_u8Errorstate;
    2768:	89 81       	ldd	r24, Y+1	; 0x01
}
    276a:	26 96       	adiw	r28, 0x06	; 6
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <DIO_EnuTogPin>:

/*******************************************************************************/

ES_t DIO_EnuTogPin(u8 Copy_u8PortID,u8 Copy_u8PinID){
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <DIO_EnuTogPin+0x6>
    2782:	00 d0       	rcall	.+0      	; 0x2784 <DIO_EnuTogPin+0x8>
    2784:	0f 92       	push	r0
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	8a 83       	std	Y+2, r24	; 0x02
    278c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
    278e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7)
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	85 34       	cpi	r24, 0x45	; 69
    2794:	08 f0       	brcs	.+2      	; 0x2798 <DIO_EnuTogPin+0x1c>
    2796:	76 c0       	rjmp	.+236    	; 0x2884 <DIO_EnuTogPin+0x108>
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	88 30       	cpi	r24, 0x08	; 8
    279c:	08 f0       	brcs	.+2      	; 0x27a0 <DIO_EnuTogPin+0x24>
    279e:	72 c0       	rjmp	.+228    	; 0x2884 <DIO_EnuTogPin+0x108>
		{
					 switch(Copy_u8PortID)
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	3d 83       	std	Y+5, r19	; 0x05
    27a8:	2c 83       	std	Y+4, r18	; 0x04
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	82 34       	cpi	r24, 0x42	; 66
    27b0:	91 05       	cpc	r25, r1
    27b2:	51 f1       	breq	.+84     	; 0x2808 <DIO_EnuTogPin+0x8c>
    27b4:	2c 81       	ldd	r18, Y+4	; 0x04
    27b6:	3d 81       	ldd	r19, Y+5	; 0x05
    27b8:	23 34       	cpi	r18, 0x43	; 67
    27ba:	31 05       	cpc	r19, r1
    27bc:	34 f4       	brge	.+12     	; 0x27ca <DIO_EnuTogPin+0x4e>
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	9d 81       	ldd	r25, Y+5	; 0x05
    27c2:	81 34       	cpi	r24, 0x41	; 65
    27c4:	91 05       	cpc	r25, r1
    27c6:	61 f0       	breq	.+24     	; 0x27e0 <DIO_EnuTogPin+0x64>
    27c8:	5a c0       	rjmp	.+180    	; 0x287e <DIO_EnuTogPin+0x102>
    27ca:	2c 81       	ldd	r18, Y+4	; 0x04
    27cc:	3d 81       	ldd	r19, Y+5	; 0x05
    27ce:	23 34       	cpi	r18, 0x43	; 67
    27d0:	31 05       	cpc	r19, r1
    27d2:	71 f1       	breq	.+92     	; 0x2830 <DIO_EnuTogPin+0xb4>
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	9d 81       	ldd	r25, Y+5	; 0x05
    27d8:	84 34       	cpi	r24, 0x44	; 68
    27da:	91 05       	cpc	r25, r1
    27dc:	e9 f1       	breq	.+122    	; 0x2858 <DIO_EnuTogPin+0xdc>
    27de:	4f c0       	rjmp	.+158    	; 0x287e <DIO_EnuTogPin+0x102>
					 {
						case 'A':
								TOG_BIT(PORTA,Copy_u8PinID);
    27e0:	ab e3       	ldi	r26, 0x3B	; 59
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	eb e3       	ldi	r30, 0x3B	; 59
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	48 2f       	mov	r20, r24
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	02 2e       	mov	r0, r18
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <DIO_EnuTogPin+0x82>
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	0a 94       	dec	r0
    2800:	e2 f7       	brpl	.-8      	; 0x27fa <DIO_EnuTogPin+0x7e>
    2802:	84 27       	eor	r24, r20
    2804:	8c 93       	st	X, r24
    2806:	3b c0       	rjmp	.+118    	; 0x287e <DIO_EnuTogPin+0x102>
								break;
						case 'B':
								TOG_BIT(PORTB,Copy_u8PinID);
    2808:	a8 e3       	ldi	r26, 0x38	; 56
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e8 e3       	ldi	r30, 0x38	; 56
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	48 2f       	mov	r20, r24
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	02 2e       	mov	r0, r18
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <DIO_EnuTogPin+0xaa>
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	0a 94       	dec	r0
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <DIO_EnuTogPin+0xa6>
    282a:	84 27       	eor	r24, r20
    282c:	8c 93       	st	X, r24
    282e:	27 c0       	rjmp	.+78     	; 0x287e <DIO_EnuTogPin+0x102>
								break;
						case 'C':
								TOG_BIT(PORTC,Copy_u8PinID);
    2830:	a5 e3       	ldi	r26, 0x35	; 53
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e5 e3       	ldi	r30, 0x35	; 53
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	48 2f       	mov	r20, r24
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	28 2f       	mov	r18, r24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	02 2e       	mov	r0, r18
    2848:	02 c0       	rjmp	.+4      	; 0x284e <DIO_EnuTogPin+0xd2>
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	0a 94       	dec	r0
    2850:	e2 f7       	brpl	.-8      	; 0x284a <DIO_EnuTogPin+0xce>
    2852:	84 27       	eor	r24, r20
    2854:	8c 93       	st	X, r24
    2856:	13 c0       	rjmp	.+38     	; 0x287e <DIO_EnuTogPin+0x102>
								break;
						case 'D':
								TOG_BIT(PORTD,Copy_u8PinID);
    2858:	a2 e3       	ldi	r26, 0x32	; 50
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e2 e3       	ldi	r30, 0x32	; 50
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	48 2f       	mov	r20, r24
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	02 2e       	mov	r0, r18
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <DIO_EnuTogPin+0xfa>
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	0a 94       	dec	r0
    2878:	e2 f7       	brpl	.-8      	; 0x2872 <DIO_EnuTogPin+0xf6>
    287a:	84 27       	eor	r24, r20
    287c:	8c 93       	st	X, r24
								break;
					 }
			Local_u8Errorstate=ES_OK;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <DIO_EnuTogPin+0x10c>
		}
	else{
				Local_u8Errorstate=ES_OUT_OF_RANGE;
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	89 83       	std	Y+1, r24	; 0x01
	    }


	return Local_u8Errorstate;
    2888:	89 81       	ldd	r24, Y+1	; 0x01
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <DIO_EnuGetPinValue>:

/*******************************************************************************/

ES_t DIO_EnuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID,u8 * Copy_u8Value){
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	27 97       	sbiw	r28, 0x07	; 7
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	8a 83       	std	Y+2, r24	; 0x02
    28b0:	6b 83       	std	Y+3, r22	; 0x03
    28b2:	5d 83       	std	Y+5, r21	; 0x05
    28b4:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8Errorstate=ES_NOK;
    28b6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value!=NULL)
    28b8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ba:	9d 81       	ldd	r25, Y+5	; 0x05
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	09 f4       	brne	.+2      	; 0x28c2 <DIO_EnuGetPinValue+0x28>
    28c0:	7e c0       	rjmp	.+252    	; 0x29be <DIO_EnuGetPinValue+0x124>
	{
		if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7){
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	85 34       	cpi	r24, 0x45	; 69
    28c6:	08 f0       	brcs	.+2      	; 0x28ca <DIO_EnuGetPinValue+0x30>
    28c8:	77 c0       	rjmp	.+238    	; 0x29b8 <DIO_EnuGetPinValue+0x11e>
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	88 30       	cpi	r24, 0x08	; 8
    28ce:	08 f0       	brcs	.+2      	; 0x28d2 <DIO_EnuGetPinValue+0x38>
    28d0:	73 c0       	rjmp	.+230    	; 0x29b8 <DIO_EnuGetPinValue+0x11e>
				 switch(Copy_u8PortID)
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	3f 83       	std	Y+7, r19	; 0x07
    28da:	2e 83       	std	Y+6, r18	; 0x06
    28dc:	4e 81       	ldd	r20, Y+6	; 0x06
    28de:	5f 81       	ldd	r21, Y+7	; 0x07
    28e0:	42 34       	cpi	r20, 0x42	; 66
    28e2:	51 05       	cpc	r21, r1
    28e4:	59 f1       	breq	.+86     	; 0x293c <DIO_EnuGetPinValue+0xa2>
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ea:	83 34       	cpi	r24, 0x43	; 67
    28ec:	91 05       	cpc	r25, r1
    28ee:	34 f4       	brge	.+12     	; 0x28fc <DIO_EnuGetPinValue+0x62>
    28f0:	2e 81       	ldd	r18, Y+6	; 0x06
    28f2:	3f 81       	ldd	r19, Y+7	; 0x07
    28f4:	21 34       	cpi	r18, 0x41	; 65
    28f6:	31 05       	cpc	r19, r1
    28f8:	69 f0       	breq	.+26     	; 0x2914 <DIO_EnuGetPinValue+0x7a>
    28fa:	5b c0       	rjmp	.+182    	; 0x29b2 <DIO_EnuGetPinValue+0x118>
    28fc:	4e 81       	ldd	r20, Y+6	; 0x06
    28fe:	5f 81       	ldd	r21, Y+7	; 0x07
    2900:	43 34       	cpi	r20, 0x43	; 67
    2902:	51 05       	cpc	r21, r1
    2904:	79 f1       	breq	.+94     	; 0x2964 <DIO_EnuGetPinValue+0xca>
    2906:	8e 81       	ldd	r24, Y+6	; 0x06
    2908:	9f 81       	ldd	r25, Y+7	; 0x07
    290a:	84 34       	cpi	r24, 0x44	; 68
    290c:	91 05       	cpc	r25, r1
    290e:	09 f4       	brne	.+2      	; 0x2912 <DIO_EnuGetPinValue+0x78>
    2910:	3d c0       	rjmp	.+122    	; 0x298c <DIO_EnuGetPinValue+0xf2>
    2912:	4f c0       	rjmp	.+158    	; 0x29b2 <DIO_EnuGetPinValue+0x118>
				 {
					case 'A':
						*Copy_u8Value=GET_BIT(PINA,Copy_u8PinID);
    2914:	e9 e3       	ldi	r30, 0x39	; 57
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a9 01       	movw	r20, r18
    2926:	02 c0       	rjmp	.+4      	; 0x292c <DIO_EnuGetPinValue+0x92>
    2928:	55 95       	asr	r21
    292a:	47 95       	ror	r20
    292c:	8a 95       	dec	r24
    292e:	e2 f7       	brpl	.-8      	; 0x2928 <DIO_EnuGetPinValue+0x8e>
    2930:	ca 01       	movw	r24, r20
    2932:	81 70       	andi	r24, 0x01	; 1
    2934:	ec 81       	ldd	r30, Y+4	; 0x04
    2936:	fd 81       	ldd	r31, Y+5	; 0x05
    2938:	80 83       	st	Z, r24
    293a:	3b c0       	rjmp	.+118    	; 0x29b2 <DIO_EnuGetPinValue+0x118>
						break;
					case 'B':
						*Copy_u8Value=GET_BIT(PINB,Copy_u8PinID);
    293c:	e6 e3       	ldi	r30, 0x36	; 54
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a9 01       	movw	r20, r18
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <DIO_EnuGetPinValue+0xba>
    2950:	55 95       	asr	r21
    2952:	47 95       	ror	r20
    2954:	8a 95       	dec	r24
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <DIO_EnuGetPinValue+0xb6>
    2958:	ca 01       	movw	r24, r20
    295a:	81 70       	andi	r24, 0x01	; 1
    295c:	ec 81       	ldd	r30, Y+4	; 0x04
    295e:	fd 81       	ldd	r31, Y+5	; 0x05
    2960:	80 83       	st	Z, r24
    2962:	27 c0       	rjmp	.+78     	; 0x29b2 <DIO_EnuGetPinValue+0x118>
						break;
					case 'C':
						*Copy_u8Value=GET_BIT(PINC,Copy_u8PinID);
    2964:	e3 e3       	ldi	r30, 0x33	; 51
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a9 01       	movw	r20, r18
    2976:	02 c0       	rjmp	.+4      	; 0x297c <DIO_EnuGetPinValue+0xe2>
    2978:	55 95       	asr	r21
    297a:	47 95       	ror	r20
    297c:	8a 95       	dec	r24
    297e:	e2 f7       	brpl	.-8      	; 0x2978 <DIO_EnuGetPinValue+0xde>
    2980:	ca 01       	movw	r24, r20
    2982:	81 70       	andi	r24, 0x01	; 1
    2984:	ec 81       	ldd	r30, Y+4	; 0x04
    2986:	fd 81       	ldd	r31, Y+5	; 0x05
    2988:	80 83       	st	Z, r24
    298a:	13 c0       	rjmp	.+38     	; 0x29b2 <DIO_EnuGetPinValue+0x118>
						break;
					case 'D':
						*Copy_u8Value=GET_BIT(PIND,Copy_u8PinID);
    298c:	e0 e3       	ldi	r30, 0x30	; 48
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a9 01       	movw	r20, r18
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <DIO_EnuGetPinValue+0x10a>
    29a0:	55 95       	asr	r21
    29a2:	47 95       	ror	r20
    29a4:	8a 95       	dec	r24
    29a6:	e2 f7       	brpl	.-8      	; 0x29a0 <DIO_EnuGetPinValue+0x106>
    29a8:	ca 01       	movw	r24, r20
    29aa:	81 70       	andi	r24, 0x01	; 1
    29ac:	ec 81       	ldd	r30, Y+4	; 0x04
    29ae:	fd 81       	ldd	r31, Y+5	; 0x05
    29b0:	80 83       	st	Z, r24
						break;
				 }
				 Local_u8Errorstate=ES_OK;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <DIO_EnuGetPinValue+0x128>
			}
		else{
				Local_u8Errorstate=ES_OUT_OF_RANGE;
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <DIO_EnuGetPinValue+0x128>
		    }
	}
	else
	{
		Local_u8Errorstate=ES_PNULL;
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c4:	27 96       	adiw	r28, 0x07	; 7
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <KPD_u8GetPressedKey>:
#include "Keypad_Config.h"
#include "Keypad_Interface.h"
#include "Keypad_Private.h"


u8 KPD_u8GetPressedKey(void){
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	6a 97       	sbiw	r28, 0x1a	; 26
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
u8 Local_u8PressedKey=Key_NPresedKey;
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	8b 83       	std	Y+3, r24	; 0x03
static u8 Local_u8KPDColumArrPort[NUM_COLUMS]={KPD_COLUMN0_PORT,KPD_COLUMN1_PORT,KPD_COLUMN2_PORT,KPD_COLUMN3_PORT};

static u8 Local_u8KPDRowsArrPins[NUM_COLUMS]= {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
static u8 Local_u8KPDRowsArrPort[NUM_COLUMS]= {KPD_ROW0_PORT,KPD_ROW1_PORT,KPD_ROW2_PORT,KPD_ROW3_PORT};

u8 Local_u8CounterRows=0;
    29ee:	1a 82       	std	Y+2, r1	; 0x02
u8 Local_u8CounterColums=0;
    29f0:	19 82       	std	Y+1, r1	; 0x01

u8 Local_u8PinState;


u8 Local_u8KPDArr[NUM_ROWS][NUM_COLUMS]=KPD_ARR_VAL;
    29f2:	ce 01       	movw	r24, r28
    29f4:	05 96       	adiw	r24, 0x05	; 5
    29f6:	9f 8b       	std	Y+23, r25	; 0x17
    29f8:	8e 8b       	std	Y+22, r24	; 0x16
    29fa:	ea e7       	ldi	r30, 0x7A	; 122
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	f9 8f       	std	Y+25, r31	; 0x19
    2a00:	e8 8f       	std	Y+24, r30	; 0x18
    2a02:	f0 e1       	ldi	r31, 0x10	; 16
    2a04:	fa 8f       	std	Y+26, r31	; 0x1a
    2a06:	e8 8d       	ldd	r30, Y+24	; 0x18
    2a08:	f9 8d       	ldd	r31, Y+25	; 0x19
    2a0a:	00 80       	ld	r0, Z
    2a0c:	88 8d       	ldd	r24, Y+24	; 0x18
    2a0e:	99 8d       	ldd	r25, Y+25	; 0x19
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	99 8f       	std	Y+25, r25	; 0x19
    2a14:	88 8f       	std	Y+24, r24	; 0x18
    2a16:	ee 89       	ldd	r30, Y+22	; 0x16
    2a18:	ff 89       	ldd	r31, Y+23	; 0x17
    2a1a:	00 82       	st	Z, r0
    2a1c:	8e 89       	ldd	r24, Y+22	; 0x16
    2a1e:	9f 89       	ldd	r25, Y+23	; 0x17
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	9f 8b       	std	Y+23, r25	; 0x17
    2a24:	8e 8b       	std	Y+22, r24	; 0x16
    2a26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a28:	91 50       	subi	r25, 0x01	; 1
    2a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a2c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a2e:	ee 23       	and	r30, r30
    2a30:	51 f7       	brne	.-44     	; 0x2a06 <KPD_u8GetPressedKey+0x30>
for( Local_u8CounterColums=0; Local_u8CounterColums<NUM_COLUMS; Local_u8CounterColums++)
    2a32:	19 82       	std	Y+1, r1	; 0x01
    2a34:	7c c0       	rjmp	.+248    	; 0x2b2e <KPD_u8GetPressedKey+0x158>
{
	DIO_EnuSetPinValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8LOW);
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	ee 58       	subi	r30, 0x8E	; 142
    2a40:	fe 4f       	sbci	r31, 0xFE	; 254
    2a42:	20 81       	ld	r18, Z
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	88 2f       	mov	r24, r24
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	ea 58       	subi	r30, 0x8A	; 138
    2a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a50:	90 81       	ld	r25, Z
    2a52:	82 2f       	mov	r24, r18
    2a54:	69 2f       	mov	r22, r25
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>

	for( Local_u8CounterRows=0; Local_u8CounterRows<NUM_ROWS; Local_u8CounterRows++)
    2a5c:	1a 82       	std	Y+2, r1	; 0x02
    2a5e:	4d c0       	rjmp	.+154    	; 0x2afa <KPD_u8GetPressedKey+0x124>
		{
			DIO_EnuGetPinValue(Local_u8KPDRowsArrPort[Local_u8CounterRows],Local_u8KPDRowsArrPins[Local_u8CounterRows],&Local_u8PinState);
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	88 2f       	mov	r24, r24
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	fc 01       	movw	r30, r24
    2a68:	e6 59       	subi	r30, 0x96	; 150
    2a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6c:	40 81       	ld	r20, Z
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	fc 01       	movw	r30, r24
    2a76:	e2 59       	subi	r30, 0x92	; 146
    2a78:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7a:	90 81       	ld	r25, Z
    2a7c:	9e 01       	movw	r18, r28
    2a7e:	2c 5f       	subi	r18, 0xFC	; 252
    2a80:	3f 4f       	sbci	r19, 0xFF	; 255
    2a82:	84 2f       	mov	r24, r20
    2a84:	69 2f       	mov	r22, r25
    2a86:	a9 01       	movw	r20, r18
    2a88:	0e 94 4d 14 	call	0x289a	; 0x289a <DIO_EnuGetPinValue>

			if(DIO_u8LOW==Local_u8PinState){
    2a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8e:	88 23       	and	r24, r24
    2a90:	89 f5       	brne	.+98     	; 0x2af4 <KPD_u8GetPressedKey+0x11e>
				Local_u8PressedKey=Local_u8KPDArr[Local_u8CounterRows][Local_u8CounterColums];
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	48 2f       	mov	r20, r24
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	22 0f       	add	r18, r18
    2aa0:	33 1f       	adc	r19, r19
    2aa2:	22 0f       	add	r18, r18
    2aa4:	33 1f       	adc	r19, r19
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	82 0f       	add	r24, r18
    2aac:	93 1f       	adc	r25, r19
    2aae:	84 0f       	add	r24, r20
    2ab0:	95 1f       	adc	r25, r21
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	34 96       	adiw	r30, 0x04	; 4
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
    2aba:	16 c0       	rjmp	.+44     	; 0x2ae8 <KPD_u8GetPressedKey+0x112>

				/* Polling busy Waiting until event */
				while(DIO_u8LOW==Local_u8PinState){
					DIO_EnuGetPinValue(Local_u8KPDRowsArrPort[Local_u8CounterRows],Local_u8KPDRowsArrPins[Local_u8CounterRows],&Local_u8PinState);
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	e6 59       	subi	r30, 0x96	; 150
    2ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac8:	40 81       	ld	r20, Z
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e2 59       	subi	r30, 0x92	; 146
    2ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad6:	90 81       	ld	r25, Z
    2ad8:	9e 01       	movw	r18, r28
    2ada:	2c 5f       	subi	r18, 0xFC	; 252
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ade:	84 2f       	mov	r24, r20
    2ae0:	69 2f       	mov	r22, r25
    2ae2:	a9 01       	movw	r20, r18
    2ae4:	0e 94 4d 14 	call	0x289a	; 0x289a <DIO_EnuGetPinValue>

			if(DIO_u8LOW==Local_u8PinState){
				Local_u8PressedKey=Local_u8KPDArr[Local_u8CounterRows][Local_u8CounterColums];

				/* Polling busy Waiting until event */
				while(DIO_u8LOW==Local_u8PinState){
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	88 23       	and	r24, r24
    2aec:	39 f3       	breq	.-50     	; 0x2abc <KPD_u8GetPressedKey+0xe6>
					DIO_EnuGetPinValue(Local_u8KPDRowsArrPort[Local_u8CounterRows],Local_u8KPDRowsArrPins[Local_u8CounterRows],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    2aee:	fb 81       	ldd	r31, Y+3	; 0x03
    2af0:	fd 8b       	std	Y+21, r31	; 0x15
    2af2:	23 c0       	rjmp	.+70     	; 0x2b3a <KPD_u8GetPressedKey+0x164>
u8 Local_u8KPDArr[NUM_ROWS][NUM_COLUMS]=KPD_ARR_VAL;
for( Local_u8CounterColums=0; Local_u8CounterColums<NUM_COLUMS; Local_u8CounterColums++)
{
	DIO_EnuSetPinValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8LOW);

	for( Local_u8CounterRows=0; Local_u8CounterRows<NUM_ROWS; Local_u8CounterRows++)
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	8a 83       	std	Y+2, r24	; 0x02
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	84 30       	cpi	r24, 0x04	; 4
    2afe:	08 f4       	brcc	.+2      	; 0x2b02 <KPD_u8GetPressedKey+0x12c>
    2b00:	af cf       	rjmp	.-162    	; 0x2a60 <KPD_u8GetPressedKey+0x8a>

				}
				return Local_u8PressedKey;
			}
		}
	DIO_EnuSetPinValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8HIGH );
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ee 58       	subi	r30, 0x8E	; 142
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	20 81       	ld	r18, Z
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	fc 01       	movw	r30, r24
    2b18:	ea 58       	subi	r30, 0x8A	; 138
    2b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1c:	90 81       	ld	r25, Z
    2b1e:	82 2f       	mov	r24, r18
    2b20:	69 2f       	mov	r22, r25
    2b22:	41 e0       	ldi	r20, 0x01	; 1
    2b24:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <DIO_EnuSetPinValue>

u8 Local_u8PinState;


u8 Local_u8KPDArr[NUM_ROWS][NUM_COLUMS]=KPD_ARR_VAL;
for( Local_u8CounterColums=0; Local_u8CounterColums<NUM_COLUMS; Local_u8CounterColums++)
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	8f 5f       	subi	r24, 0xFF	; 255
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	84 30       	cpi	r24, 0x04	; 4
    2b32:	08 f4       	brcc	.+2      	; 0x2b36 <KPD_u8GetPressedKey+0x160>
    2b34:	80 cf       	rjmp	.-256    	; 0x2a36 <KPD_u8GetPressedKey+0x60>
			}
		}
	DIO_EnuSetPinValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8HIGH );

}
return Local_u8PressedKey;
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	8d 8b       	std	Y+21, r24	; 0x15
    2b3a:	8d 89       	ldd	r24, Y+21	; 0x15
}
    2b3c:	6a 96       	adiw	r28, 0x1a	; 26
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <__divmodhi4>:
    2b4e:	97 fb       	bst	r25, 7
    2b50:	09 2e       	mov	r0, r25
    2b52:	07 26       	eor	r0, r23
    2b54:	0a d0       	rcall	.+20     	; 0x2b6a <__divmodhi4_neg1>
    2b56:	77 fd       	sbrc	r23, 7
    2b58:	04 d0       	rcall	.+8      	; 0x2b62 <__divmodhi4_neg2>
    2b5a:	0c d0       	rcall	.+24     	; 0x2b74 <__udivmodhi4>
    2b5c:	06 d0       	rcall	.+12     	; 0x2b6a <__divmodhi4_neg1>
    2b5e:	00 20       	and	r0, r0
    2b60:	1a f4       	brpl	.+6      	; 0x2b68 <__divmodhi4_exit>

00002b62 <__divmodhi4_neg2>:
    2b62:	70 95       	com	r23
    2b64:	61 95       	neg	r22
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255

00002b68 <__divmodhi4_exit>:
    2b68:	08 95       	ret

00002b6a <__divmodhi4_neg1>:
    2b6a:	f6 f7       	brtc	.-4      	; 0x2b68 <__divmodhi4_exit>
    2b6c:	90 95       	com	r25
    2b6e:	81 95       	neg	r24
    2b70:	9f 4f       	sbci	r25, 0xFF	; 255
    2b72:	08 95       	ret

00002b74 <__udivmodhi4>:
    2b74:	aa 1b       	sub	r26, r26
    2b76:	bb 1b       	sub	r27, r27
    2b78:	51 e1       	ldi	r21, 0x11	; 17
    2b7a:	07 c0       	rjmp	.+14     	; 0x2b8a <__udivmodhi4_ep>

00002b7c <__udivmodhi4_loop>:
    2b7c:	aa 1f       	adc	r26, r26
    2b7e:	bb 1f       	adc	r27, r27
    2b80:	a6 17       	cp	r26, r22
    2b82:	b7 07       	cpc	r27, r23
    2b84:	10 f0       	brcs	.+4      	; 0x2b8a <__udivmodhi4_ep>
    2b86:	a6 1b       	sub	r26, r22
    2b88:	b7 0b       	sbc	r27, r23

00002b8a <__udivmodhi4_ep>:
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	5a 95       	dec	r21
    2b90:	a9 f7       	brne	.-22     	; 0x2b7c <__udivmodhi4_loop>
    2b92:	80 95       	com	r24
    2b94:	90 95       	com	r25
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	08 95       	ret

00002b9c <__prologue_saves__>:
    2b9c:	2f 92       	push	r2
    2b9e:	3f 92       	push	r3
    2ba0:	4f 92       	push	r4
    2ba2:	5f 92       	push	r5
    2ba4:	6f 92       	push	r6
    2ba6:	7f 92       	push	r7
    2ba8:	8f 92       	push	r8
    2baa:	9f 92       	push	r9
    2bac:	af 92       	push	r10
    2bae:	bf 92       	push	r11
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	ca 1b       	sub	r28, r26
    2bc6:	db 0b       	sbc	r29, r27
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	09 94       	ijmp

00002bd4 <__epilogue_restores__>:
    2bd4:	2a 88       	ldd	r2, Y+18	; 0x12
    2bd6:	39 88       	ldd	r3, Y+17	; 0x11
    2bd8:	48 88       	ldd	r4, Y+16	; 0x10
    2bda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bde:	7d 84       	ldd	r7, Y+13	; 0x0d
    2be0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2be2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2be4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2be6:	b9 84       	ldd	r11, Y+9	; 0x09
    2be8:	c8 84       	ldd	r12, Y+8	; 0x08
    2bea:	df 80       	ldd	r13, Y+7	; 0x07
    2bec:	ee 80       	ldd	r14, Y+6	; 0x06
    2bee:	fd 80       	ldd	r15, Y+5	; 0x05
    2bf0:	0c 81       	ldd	r16, Y+4	; 0x04
    2bf2:	1b 81       	ldd	r17, Y+3	; 0x03
    2bf4:	aa 81       	ldd	r26, Y+2	; 0x02
    2bf6:	b9 81       	ldd	r27, Y+1	; 0x01
    2bf8:	ce 0f       	add	r28, r30
    2bfa:	d1 1d       	adc	r29, r1
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	ed 01       	movw	r28, r26
    2c08:	08 95       	ret

00002c0a <_exit>:
    2c0a:	f8 94       	cli

00002c0c <__stop_program>:
    2c0c:	ff cf       	rjmp	.-2      	; 0x2c0c <__stop_program>
