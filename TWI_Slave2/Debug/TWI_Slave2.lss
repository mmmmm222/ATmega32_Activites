
TWI_Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001cc2  00001d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b00  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dec  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006549  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000081e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000085d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008d9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <main>
      7a:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e8       	ldi	r26, 0x85	; 133
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e8       	ldi	r24, 0x85	; 133
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	  2-r\w => write
	  3- data => command to the eight pins
	  4-enable pulse for 2 milli seconds
	 */
	/*set rs to low*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	65 e0       	ldi	r22, 0x05	; 5
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	66 e0       	ldi	r22, 0x06	; 6
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>

	/* set command to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	67 e0       	ldi	r22, 0x07	; 7
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	67 e0       	ldi	r22, 0x07	; 7
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>
}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs to HIGH for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	65 e0       	ldi	r22, 0x05	; 5
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>

	/*set rw pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	66 e0       	ldi	r22, 0x06	; 6
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>

	/* set Data to the eight pins for data through set port function*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_u8SetPortValue>

	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	67 e0       	ldi	r22, 0x07	; 7
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	67 e0       	ldi	r22, 0x07	; 7
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_u8SetPinValue>

}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_voidSendString>:

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <CLCD_voidSendString+0x6>
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9b 83       	std	Y+3, r25	; 0x03
     dbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	0e c0       	rjmp	.+28     	; 0xdde <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	fc 01       	movw	r30, r24
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	80 81       	ld	r24, Z
     dd4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		Local_u8Counter++;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	89 83       	std	Y+1, r24	; 0x01

/*send string function*/
void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	39 f7       	brne	.-50     	; 0xdc2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <CLCD_voidGoToXY+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	8a 83       	std	Y+2, r24	; 0x02
     e0e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address=0;
     e10:	19 82       	std	Y+1, r1	; 0x01

	/*if x ==0 we target the first line*/
	if(Copy_u8XPos == 0)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	88 23       	and	r24, r24
     e16:	19 f4       	brne	.+6      	; 0xe1e <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Address=Copy_u8YPos;
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <CLCD_voidGoToXY+0x2a>
	}

	/*if x ==1 we target the second line*/
	else if(Copy_u8XPos == 1)
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	19 f4       	brne	.+6      	; 0xe2a <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Address=Copy_u8YPos+(0x40);
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	80 5c       	subi	r24, 0xC0	; 192
     e28:	89 83       	std	Y+1, r24	; 0x01
	}
	/*here we added 128 because the binary address we got is 7 digits only and we need the 8th digit to be 1*/
	CLCD_voidSendCommand(Local_u8Address+128);
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	80 58       	subi	r24, 0x80	; 128
     e2e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <CLCD_voidInit>:


void CLCD_voidInit(void)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2e 97       	sbiw	r28, 0x0e	; 14
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e2       	ldi	r26, 0x20	; 32
     e58:	b2 e4       	ldi	r27, 0x42	; 66
     e5a:	8b 87       	std	Y+11, r24	; 0x0b
     e5c:	9c 87       	std	Y+12, r25	; 0x0c
     e5e:	ad 87       	std	Y+13, r26	; 0x0d
     e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	6b 85       	ldd	r22, Y+11	; 0x0b
     e64:	7c 85       	ldd	r23, Y+12	; 0x0c
     e66:	8d 85       	ldd	r24, Y+13	; 0x0d
     e68:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a ef       	ldi	r20, 0xFA	; 250
     e70:	54 e4       	ldi	r21, 0x44	; 68
     e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	8f 83       	std	Y+7, r24	; 0x07
     e7c:	98 87       	std	Y+8, r25	; 0x08
     e7e:	a9 87       	std	Y+9, r26	; 0x09
     e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <CLCD_voidInit+0x66>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	4c f5       	brge	.+82     	; 0xf0e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <CLCD_voidInit+0xc6>
     ee6:	88 ec       	ldi	r24, 0xC8	; 200
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9c 83       	std	Y+4, r25	; 0x04
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <CLCD_voidInit+0xb4>
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f7       	brne	.-38     	; 0xee6 <CLCD_voidInit+0xa8>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0e:	6f 81       	ldd	r22, Y+7	; 0x07
     f10:	78 85       	ldd	r23, Y+8	; 0x08
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <CLCD_voidInit+0xf0>
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	/*1 => (5*11)(columns of pixels)*(Rows of pixels) bigger font  */
	/*X => don not care choose any value*/
	/*the R/s and r/w have been chosen before*/

	/*we choose two lines and 5*8 Font size */
	CLCD_voidSendCommand(0b00111100);
     f36:	8c e3       	ldi	r24, 0x3C	; 60
     f38:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	/* 0 |  0  |  0  |  0  |  0  |  0  |  1  |  D  |  C  |  B  */
	/*D => Display enable 0=> disable & 1=> enable*/
	/*C => cursor enable 0=> disable & 1=> enable */
	/*B => blink cursor 0=> don't blink & 1=> blink*/
	/*Display(screen) on/off command & the cursor state*/
	CLCD_voidSendCommand(0b00001100);
     f3c:	8c e0       	ldi	r24, 0x0C	; 12
     f3e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*clear screen it is a fixed command */
	CLCD_voidSendCommand(0b00000001);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
     f48:	2e 96       	adiw	r28, 0x0e	; 14
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <CLCD_voidWriteSpecialCharacter>:

/*CGRAM => charchater gerenator ram */


void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	27 97       	sbiw	r28, 0x07	; 7
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	9c 83       	std	Y+4, r25	; 0x04
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	6d 83       	std	Y+5, r22	; 0x05
     f74:	4e 83       	std	Y+6, r20	; 0x06
     f76:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8Iterator;
     f78:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	80 5c       	subi	r24, 0xC0	; 192
     f92:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
     f96:	19 82       	std	Y+1, r1	; 0x01
     f98:	0e c0       	rjmp	.+28     	; 0xfb6 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	fc 01       	movw	r30, r24
     fa6:	e2 0f       	add	r30, r18
     fa8:	f3 1f       	adc	r31, r19
     faa:	80 81       	ld	r24, Z
     fac:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>

	/*Send CG ram address command to lcd , with 6 bit =1 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write the pattern to CG ram*/
	for(Local_u8Iterator=0; Local_u8Iterator<8; Local_u8Iterator++)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	88 30       	cpi	r24, 0x08	; 8
     fba:	78 f3       	brcs	.-34     	; 0xf9a <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*go to the target pos*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	0e 94 00 07 	call	0xe00	; 0xe00 <CLCD_voidGoToXY>

	/*display the pattern */
	CLCD_voidSendData(Copy_u8PatternNumber);
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>

}
     fca:	27 96       	adiw	r28, 0x07	; 7
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <CLCD_voidDisplayNumber>:

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	65 97       	sbiw	r28, 0x15	; 21
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	6a 87       	std	Y+10, r22	; 0x0a
     ff2:	7b 87       	std	Y+11, r23	; 0x0b
     ff4:	8c 87       	std	Y+12, r24	; 0x0c
     ff6:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
     ff8:	2d b7       	in	r18, 0x3d	; 61
     ffa:	3e b7       	in	r19, 0x3e	; 62
     ffc:	3d 8b       	std	Y+21, r19	; 0x15
     ffe:	2c 8b       	std	Y+20, r18	; 0x14

}

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    1000:	8a 85       	ldd	r24, Y+10	; 0x0a
    1002:	9b 85       	ldd	r25, Y+11	; 0x0b
    1004:	ac 85       	ldd	r26, Y+12	; 0x0c
    1006:	bd 85       	ldd	r27, Y+13	; 0x0d
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a1 05       	cpc	r26, r1
    100c:	b1 05       	cpc	r27, r1
    100e:	21 f4       	brne	.+8      	; 0x1018 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    1010:	80 e3       	ldi	r24, 0x30	; 48
    1012:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1016:	13 c1       	rjmp	.+550    	; 0x123e <CLCD_voidDisplayNumber+0x262>
    1018:	8d b7       	in	r24, 0x3d	; 61
    101a:	9e b7       	in	r25, 0x3e	; 62
    101c:	9f 87       	std	Y+15, r25	; 0x0f
    101e:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;
    1020:	1f 82       	std	Y+7, r1	; 0x07
    1022:	1e 82       	std	Y+6, r1	; 0x06
    1024:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    1026:	8a 85       	ldd	r24, Y+10	; 0x0a
    1028:	9b 85       	ldd	r25, Y+11	; 0x0b
    102a:	ac 85       	ldd	r26, Y+12	; 0x0c
    102c:	bd 85       	ldd	r27, Y+13	; 0x0d
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	ab 83       	std	Y+3, r26	; 0x03
    1034:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	ab 81       	ldd	r26, Y+3	; 0x03
    1042:	bc 81       	ldd	r27, Y+4	; 0x04
    1044:	2a e0       	ldi	r18, 0x0A	; 10
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    1054:	da 01       	movw	r26, r20
    1056:	c9 01       	movw	r24, r18
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	ab 83       	std	Y+3, r26	; 0x03
    105e:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	ab 81       	ldd	r26, Y+3	; 0x03
    1066:	bc 81       	ldd	r27, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	a1 05       	cpc	r26, r1
    106c:	b1 05       	cpc	r27, r1
    106e:	19 f7       	brne	.-58     	; 0x1036 <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	2d b7       	in	r18, 0x3d	; 61
    1078:	3e b7       	in	r19, 0x3e	; 62
    107a:	28 1b       	sub	r18, r24
    107c:	39 0b       	sbc	r19, r25
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	3e bf       	out	0x3e, r19	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	2d bf       	out	0x3d, r18	; 61
    1088:	8d b7       	in	r24, 0x3d	; 61
    108a:	9e b7       	in	r25, 0x3e	; 62
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9b 8b       	std	Y+19, r25	; 0x13
    1090:	8a 8b       	std	Y+18, r24	; 0x12
    1092:	8a 89       	ldd	r24, Y+18	; 0x12
    1094:	9b 89       	ldd	r25, Y+19	; 0x13
    1096:	00 96       	adiw	r24, 0x00	; 0
    1098:	9b 8b       	std	Y+19, r25	; 0x13
    109a:	8a 8b       	std	Y+18, r24	; 0x12
    109c:	2a 89       	ldd	r18, Y+18	; 0x12
    109e:	3b 89       	ldd	r19, Y+19	; 0x13
    10a0:	39 87       	std	Y+9, r19	; 0x09
    10a2:	28 87       	std	Y+8, r18	; 0x08
    10a4:	2e c0       	rjmp	.+92     	; 0x1102 <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    10a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    10a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    10aa:	ac 85       	ldd	r26, Y+12	; 0x0c
    10ac:	bd 85       	ldd	r27, Y+13	; 0x0d
    10ae:	2a e0       	ldi	r18, 0x0A	; 10
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	88 85       	ldd	r24, Y+8	; 0x08
    10cc:	99 85       	ldd	r25, Y+9	; 0x09
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	8f 81       	ldd	r24, Y+7	; 0x07
    10d6:	80 83       	st	Z, r24
		Local_u8Counter++;
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    10de:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e2:	ac 85       	ldd	r26, Y+12	; 0x0c
    10e4:	bd 85       	ldd	r27, Y+13	; 0x0d
    10e6:	2a e0       	ldi	r18, 0x0A	; 10
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    10f6:	da 01       	movw	r26, r20
    10f8:	c9 01       	movw	r24, r18
    10fa:	8a 87       	std	Y+10, r24	; 0x0a
    10fc:	9b 87       	std	Y+11, r25	; 0x0b
    10fe:	ac 87       	std	Y+12, r26	; 0x0c
    1100:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    1102:	8a 85       	ldd	r24, Y+10	; 0x0a
    1104:	9b 85       	ldd	r25, Y+11	; 0x0b
    1106:	ac 85       	ldd	r26, Y+12	; 0x0c
    1108:	bd 85       	ldd	r27, Y+13	; 0x0d
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	a1 05       	cpc	r26, r1
    110e:	b1 05       	cpc	r27, r1
    1110:	21 f0       	breq	.+8      	; 0x111a <CLCD_voidDisplayNumber+0x13e>
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	98 17       	cp	r25, r24
    1118:	30 f2       	brcs	.-116    	; 0x10a6 <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	81 50       	subi	r24, 0x01	; 1
    111e:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1120:	1e 82       	std	Y+6, r1	; 0x06
    1122:	81 c0       	rjmp	.+258    	; 0x1226 <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	28 1b       	sub	r18, r24
    1132:	39 0b       	sbc	r19, r25
    1134:	88 85       	ldd	r24, Y+8	; 0x08
    1136:	99 85       	ldd	r25, Y+9	; 0x09
    1138:	fc 01       	movw	r30, r24
    113a:	e2 0f       	add	r30, r18
    113c:	f3 1f       	adc	r31, r19
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	39 8b       	std	Y+17, r19	; 0x11
    1146:	28 8b       	std	Y+16, r18	; 0x10
    1148:	88 89       	ldd	r24, Y+16	; 0x10
    114a:	99 89       	ldd	r25, Y+17	; 0x11
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <CLCD_voidDisplayNumber+0x178>
    1152:	4f c0       	rjmp	.+158    	; 0x11f2 <CLCD_voidDisplayNumber+0x216>
    1154:	28 89       	ldd	r18, Y+16	; 0x10
    1156:	39 89       	ldd	r19, Y+17	; 0x11
    1158:	25 30       	cpi	r18, 0x05	; 5
    115a:	31 05       	cpc	r19, r1
    115c:	d4 f4       	brge	.+52     	; 0x1192 <CLCD_voidDisplayNumber+0x1b6>
    115e:	88 89       	ldd	r24, Y+16	; 0x10
    1160:	99 89       	ldd	r25, Y+17	; 0x11
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	c9 f1       	breq	.+114    	; 0x11da <CLCD_voidDisplayNumber+0x1fe>
    1168:	28 89       	ldd	r18, Y+16	; 0x10
    116a:	39 89       	ldd	r19, Y+17	; 0x11
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <CLCD_voidDisplayNumber+0x1a0>
    1172:	88 89       	ldd	r24, Y+16	; 0x10
    1174:	99 89       	ldd	r25, Y+17	; 0x11
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f1       	breq	.+88     	; 0x11d2 <CLCD_voidDisplayNumber+0x1f6>
    117a:	52 c0       	rjmp	.+164    	; 0x1220 <CLCD_voidDisplayNumber+0x244>
    117c:	28 89       	ldd	r18, Y+16	; 0x10
    117e:	39 89       	ldd	r19, Y+17	; 0x11
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	71 f1       	breq	.+92     	; 0x11e2 <CLCD_voidDisplayNumber+0x206>
    1186:	88 89       	ldd	r24, Y+16	; 0x10
    1188:	99 89       	ldd	r25, Y+17	; 0x11
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	69 f1       	breq	.+90     	; 0x11ea <CLCD_voidDisplayNumber+0x20e>
    1190:	47 c0       	rjmp	.+142    	; 0x1220 <CLCD_voidDisplayNumber+0x244>
    1192:	28 89       	ldd	r18, Y+16	; 0x10
    1194:	39 89       	ldd	r19, Y+17	; 0x11
    1196:	27 30       	cpi	r18, 0x07	; 7
    1198:	31 05       	cpc	r19, r1
    119a:	b9 f1       	breq	.+110    	; 0x120a <CLCD_voidDisplayNumber+0x22e>
    119c:	88 89       	ldd	r24, Y+16	; 0x10
    119e:	99 89       	ldd	r25, Y+17	; 0x11
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	91 05       	cpc	r25, r1
    11a4:	5c f4       	brge	.+22     	; 0x11bc <CLCD_voidDisplayNumber+0x1e0>
    11a6:	28 89       	ldd	r18, Y+16	; 0x10
    11a8:	39 89       	ldd	r19, Y+17	; 0x11
    11aa:	25 30       	cpi	r18, 0x05	; 5
    11ac:	31 05       	cpc	r19, r1
    11ae:	29 f1       	breq	.+74     	; 0x11fa <CLCD_voidDisplayNumber+0x21e>
    11b0:	88 89       	ldd	r24, Y+16	; 0x10
    11b2:	99 89       	ldd	r25, Y+17	; 0x11
    11b4:	86 30       	cpi	r24, 0x06	; 6
    11b6:	91 05       	cpc	r25, r1
    11b8:	21 f1       	breq	.+72     	; 0x1202 <CLCD_voidDisplayNumber+0x226>
    11ba:	32 c0       	rjmp	.+100    	; 0x1220 <CLCD_voidDisplayNumber+0x244>
    11bc:	28 89       	ldd	r18, Y+16	; 0x10
    11be:	39 89       	ldd	r19, Y+17	; 0x11
    11c0:	28 30       	cpi	r18, 0x08	; 8
    11c2:	31 05       	cpc	r19, r1
    11c4:	31 f1       	breq	.+76     	; 0x1212 <CLCD_voidDisplayNumber+0x236>
    11c6:	88 89       	ldd	r24, Y+16	; 0x10
    11c8:	99 89       	ldd	r25, Y+17	; 0x11
    11ca:	89 30       	cpi	r24, 0x09	; 9
    11cc:	91 05       	cpc	r25, r1
    11ce:	29 f1       	breq	.+74     	; 0x121a <CLCD_voidDisplayNumber+0x23e>
    11d0:	27 c0       	rjmp	.+78     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    11d2:	80 e3       	ldi	r24, 0x30	; 48
    11d4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11d8:	23 c0       	rjmp	.+70     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    11da:	81 e3       	ldi	r24, 0x31	; 49
    11dc:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11e0:	1f c0       	rjmp	.+62     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    11e2:	82 e3       	ldi	r24, 0x32	; 50
    11e4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11e8:	1b c0       	rjmp	.+54     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    11ea:	83 e3       	ldi	r24, 0x33	; 51
    11ec:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11f0:	17 c0       	rjmp	.+46     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    11f2:	84 e3       	ldi	r24, 0x34	; 52
    11f4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    11f8:	13 c0       	rjmp	.+38     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    11fa:	85 e3       	ldi	r24, 0x35	; 53
    11fc:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    1202:	86 e3       	ldi	r24, 0x36	; 54
    1204:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    120a:	87 e3       	ldi	r24, 0x37	; 55
    120c:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    1212:	88 e3       	ldi	r24, 0x38	; 56
    1214:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    121a:	89 e3       	ldi	r24, 0x39	; 57
    121c:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	8e 83       	std	Y+6, r24	; 0x06
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	89 17       	cp	r24, r25
    122c:	08 f0       	brcs	.+2      	; 0x1230 <CLCD_voidDisplayNumber+0x254>
    122e:	7a cf       	rjmp	.-268    	; 0x1124 <CLCD_voidDisplayNumber+0x148>
    1230:	2e 85       	ldd	r18, Y+14	; 0x0e
    1232:	3f 85       	ldd	r19, Y+15	; 0x0f
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	3e bf       	out	0x3e, r19	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    123e:	8c 89       	ldd	r24, Y+20	; 0x14
    1240:	9d 89       	ldd	r25, Y+21	; 0x15
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	9e bf       	out	0x3e, r25	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	8d bf       	out	0x3d, r24	; 61
    124c:	65 96       	adiw	r28, 0x15	; 21
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <CLCD_voidClearScreen>:

//=======================================================================================================

void CLCD_voidClearScreen(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	2e 97       	sbiw	r28, 0x0e	; 14
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x01);
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e2       	ldi	r26, 0x20	; 32
    127e:	b1 e4       	ldi	r27, 0x41	; 65
    1280:	8b 87       	std	Y+11, r24	; 0x0b
    1282:	9c 87       	std	Y+12, r25	; 0x0c
    1284:	ad 87       	std	Y+13, r26	; 0x0d
    1286:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4a ef       	ldi	r20, 0xFA	; 250
    1296:	54 e4       	ldi	r21, 0x44	; 68
    1298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	98 87       	std	Y+8, r25	; 0x08
    12a4:	a9 87       	std	Y+9, r26	; 0x09
    12a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12bc:	88 23       	and	r24, r24
    12be:	2c f4       	brge	.+10     	; 0x12ca <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	3f c0       	rjmp	.+126    	; 0x1348 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	4c f5       	brge	.+82     	; 0x1334 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	0f c0       	rjmp	.+30     	; 0x132a <CLCD_voidClearScreen+0xcc>
    130c:	88 ec       	ldi	r24, 0xC8	; 200
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <CLCD_voidClearScreen+0xba>
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <CLCD_voidClearScreen+0xae>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <CLCD_voidClearScreen+0xf6>
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //wait more than 1.53 ms
}
    135c:	2e 96       	adiw	r28, 0x0e	; 14
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	28 97       	sbiw	r28, 0x08	; 8
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	6b 83       	std	Y+3, r22	; 0x03
    1386:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1388:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	08 f0       	brcs	.+2      	; 0x1392 <DIO_u8SetPinValue+0x24>
    1390:	f4 c0       	rjmp	.+488    	; 0x157a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	09 f0       	breq	.+2      	; 0x139a <DIO_u8SetPinValue+0x2c>
    1398:	72 c0       	rjmp	.+228    	; 0x147e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	38 87       	std	Y+8, r19	; 0x08
    13a2:	2f 83       	std	Y+7, r18	; 0x07
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	49 f1       	breq	.+82     	; 0x1400 <DIO_u8SetPinValue+0x92>
    13ae:	2f 81       	ldd	r18, Y+7	; 0x07
    13b0:	38 85       	ldd	r19, Y+8	; 0x08
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <DIO_u8SetPinValue+0x54>
    13b8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ba:	98 85       	ldd	r25, Y+8	; 0x08
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	61 f0       	breq	.+24     	; 0x13d8 <DIO_u8SetPinValue+0x6a>
    13c0:	5b c0       	rjmp	.+182    	; 0x1478 <DIO_u8SetPinValue+0x10a>
    13c2:	2f 81       	ldd	r18, Y+7	; 0x07
    13c4:	38 85       	ldd	r19, Y+8	; 0x08
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	71 f1       	breq	.+92     	; 0x1428 <DIO_u8SetPinValue+0xba>
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	e9 f1       	breq	.+122    	; 0x1450 <DIO_u8SetPinValue+0xe2>
    13d6:	50 c0       	rjmp	.+160    	; 0x1478 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_u8SetPinValue+0x88>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_u8SetPinValue+0x84>
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	bf c0       	rjmp	.+382    	; 0x157e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
    1400:	a8 e3       	ldi	r26, 0x38	; 56
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e8 e3       	ldi	r30, 0x38	; 56
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8SetPinValue+0xb0>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8SetPinValue+0xac>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	ab c0       	rjmp	.+342    	; 0x157e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
    1428:	a5 e3       	ldi	r26, 0x35	; 53
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8SetPinValue+0xd8>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8SetPinValue+0xd4>
    144a:	84 2b       	or	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	97 c0       	rjmp	.+302    	; 0x157e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
    1450:	a2 e3       	ldi	r26, 0x32	; 50
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8SetPinValue+0x100>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8SetPinValue+0xfc>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	83 c0       	rjmp	.+262    	; 0x157e <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	80 c0       	rjmp	.+256    	; 0x157e <DIO_u8SetPinValue+0x210>

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	88 23       	and	r24, r24
    1482:	09 f0       	breq	.+2      	; 0x1486 <DIO_u8SetPinValue+0x118>
    1484:	77 c0       	rjmp	.+238    	; 0x1574 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3e 83       	std	Y+6, r19	; 0x06
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	59 f1       	breq	.+86     	; 0x14f0 <DIO_u8SetPinValue+0x182>
    149a:	2d 81       	ldd	r18, Y+5	; 0x05
    149c:	3e 81       	ldd	r19, Y+6	; 0x06
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DIO_u8SetPinValue+0x140>
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f0       	breq	.+26     	; 0x14c6 <DIO_u8SetPinValue+0x158>
    14ac:	60 c0       	rjmp	.+192    	; 0x156e <DIO_u8SetPinValue+0x200>
    14ae:	2d 81       	ldd	r18, Y+5	; 0x05
    14b0:	3e 81       	ldd	r19, Y+6	; 0x06
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	89 f1       	breq	.+98     	; 0x151a <DIO_u8SetPinValue+0x1ac>
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <DIO_u8SetPinValue+0x156>
    14c2:	40 c0       	rjmp	.+128    	; 0x1544 <DIO_u8SetPinValue+0x1d6>
    14c4:	54 c0       	rjmp	.+168    	; 0x156e <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
    14c6:	ab e3       	ldi	r26, 0x3B	; 59
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e3       	ldi	r30, 0x3B	; 59
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_u8SetPinValue+0x176>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_u8SetPinValue+0x172>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	47 c0       	rjmp	.+142    	; 0x157e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
    14f0:	a8 e3       	ldi	r26, 0x38	; 56
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e8 e3       	ldi	r30, 0x38	; 56
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_u8SetPinValue+0x1a0>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_u8SetPinValue+0x19c>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	32 c0       	rjmp	.+100    	; 0x157e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
    151a:	a5 e3       	ldi	r26, 0x35	; 53
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_u8SetPinValue+0x1ca>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_u8SetPinValue+0x1c6>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	1d c0       	rjmp	.+58     	; 0x157e <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
    1544:	a2 e3       	ldi	r26, 0x32	; 50
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_u8SetPinValue+0x1f4>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_u8SetPinValue+0x1f0>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	08 c0       	rjmp	.+16     	; 0x157e <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	05 c0       	rjmp	.+10     	; 0x157e <DIO_u8SetPinValue+0x210>
			}
		}

		else
		{
			Local_u8ErrorState=1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	28 96       	adiw	r28, 0x08	; 8
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <DIO_u8SetPortValue+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <DIO_u8SetPortValue+0x8>
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    15a4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3d 83       	std	Y+5, r19	; 0x05
    15ae:	2c 83       	std	Y+4, r18	; 0x04
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	d1 f0       	breq	.+52     	; 0x15ee <DIO_u8SetPortValue+0x5c>
    15ba:	2c 81       	ldd	r18, Y+4	; 0x04
    15bc:	3d 81       	ldd	r19, Y+5	; 0x05
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <DIO_u8SetPortValue+0x3c>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <DIO_u8SetPortValue+0x52>
    15cc:	1f c0       	rjmp	.+62     	; 0x160c <DIO_u8SetPortValue+0x7a>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	81 f0       	breq	.+32     	; 0x15f8 <DIO_u8SetPortValue+0x66>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <DIO_u8SetPortValue+0x70>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	80 83       	st	Z, r24
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	80 83       	st	Z, r24
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    15f8:	e5 e3       	ldi	r30, 0x35	; 53
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	80 83       	st	Z, r24
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	80 83       	st	Z, r24
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState=1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	27 97       	sbiw	r28, 0x07	; 7
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6b 83       	std	Y+3, r22	; 0x03
    163a:	5d 83       	std	Y+5, r21	; 0x05
    163c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    163e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	09 f4       	brne	.+2      	; 0x164a <DIO_u8GetPinValue+0x28>
    1648:	78 c0       	rjmp	.+240    	; 0x173a <DIO_u8GetPinValue+0x118>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	08 f0       	brcs	.+2      	; 0x1652 <DIO_u8GetPinValue+0x30>
    1650:	74 c0       	rjmp	.+232    	; 0x173a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3f 83       	std	Y+7, r19	; 0x07
    165a:	2e 83       	std	Y+6, r18	; 0x06
    165c:	4e 81       	ldd	r20, Y+6	; 0x06
    165e:	5f 81       	ldd	r21, Y+7	; 0x07
    1660:	41 30       	cpi	r20, 0x01	; 1
    1662:	51 05       	cpc	r21, r1
    1664:	59 f1       	breq	.+86     	; 0x16bc <DIO_u8GetPinValue+0x9a>
    1666:	8e 81       	ldd	r24, Y+6	; 0x06
    1668:	9f 81       	ldd	r25, Y+7	; 0x07
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	91 05       	cpc	r25, r1
    166e:	34 f4       	brge	.+12     	; 0x167c <DIO_u8GetPinValue+0x5a>
    1670:	2e 81       	ldd	r18, Y+6	; 0x06
    1672:	3f 81       	ldd	r19, Y+7	; 0x07
    1674:	21 15       	cp	r18, r1
    1676:	31 05       	cpc	r19, r1
    1678:	69 f0       	breq	.+26     	; 0x1694 <DIO_u8GetPinValue+0x72>
    167a:	5c c0       	rjmp	.+184    	; 0x1734 <DIO_u8GetPinValue+0x112>
    167c:	4e 81       	ldd	r20, Y+6	; 0x06
    167e:	5f 81       	ldd	r21, Y+7	; 0x07
    1680:	42 30       	cpi	r20, 0x02	; 2
    1682:	51 05       	cpc	r21, r1
    1684:	79 f1       	breq	.+94     	; 0x16e4 <DIO_u8GetPinValue+0xc2>
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	9f 81       	ldd	r25, Y+7	; 0x07
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <DIO_u8GetPinValue+0x70>
    1690:	3d c0       	rjmp	.+122    	; 0x170c <DIO_u8GetPinValue+0xea>
    1692:	50 c0       	rjmp	.+160    	; 0x1734 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
    1694:	e9 e3       	ldi	r30, 0x39	; 57
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_u8GetPinValue+0x8a>
    16a8:	55 95       	asr	r21
    16aa:	47 95       	ror	r20
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_u8GetPinValue+0x86>
    16b0:	ca 01       	movw	r24, r20
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	ec 81       	ldd	r30, Y+4	; 0x04
    16b6:	fd 81       	ldd	r31, Y+5	; 0x05
    16b8:	80 83       	st	Z, r24
    16ba:	41 c0       	rjmp	.+130    	; 0x173e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
    16bc:	e6 e3       	ldi	r30, 0x36	; 54
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_u8GetPinValue+0xb2>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_u8GetPinValue+0xae>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	ec 81       	ldd	r30, Y+4	; 0x04
    16de:	fd 81       	ldd	r31, Y+5	; 0x05
    16e0:	80 83       	st	Z, r24
    16e2:	2d c0       	rjmp	.+90     	; 0x173e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
    16e4:	e3 e3       	ldi	r30, 0x33	; 51
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a9 01       	movw	r20, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <DIO_u8GetPinValue+0xda>
    16f8:	55 95       	asr	r21
    16fa:	47 95       	ror	r20
    16fc:	8a 95       	dec	r24
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <DIO_u8GetPinValue+0xd6>
    1700:	ca 01       	movw	r24, r20
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	ec 81       	ldd	r30, Y+4	; 0x04
    1706:	fd 81       	ldd	r31, Y+5	; 0x05
    1708:	80 83       	st	Z, r24
    170a:	19 c0       	rjmp	.+50     	; 0x173e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
    170c:	e0 e3       	ldi	r30, 0x30	; 48
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a9 01       	movw	r20, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_u8GetPinValue+0x102>
    1720:	55 95       	asr	r21
    1722:	47 95       	ror	r20
    1724:	8a 95       	dec	r24
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_u8GetPinValue+0xfe>
    1728:	ca 01       	movw	r24, r20
    172a:	81 70       	andi	r24, 0x01	; 1
    172c:	ec 81       	ldd	r30, Y+4	; 0x04
    172e:	fd 81       	ldd	r31, Y+5	; 0x05
    1730:	80 83       	st	Z, r24
    1732:	05 c0       	rjmp	.+10     	; 0x173e <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorState=1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1740:	27 96       	adiw	r28, 0x07	; 7
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,SREG_I);
    175a:	af e5       	ldi	r26, 0x5F	; 95
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ef e5       	ldi	r30, 0x5F	; 95
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 68       	ori	r24, 0x80	; 128
    1766:	8c 93       	st	X, r24
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,SREG_I);
    1776:	af e5       	ldi	r26, 0x5F	; 95
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ef e5       	ldi	r30, 0x5F	; 95
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 77       	andi	r24, 0x7F	; 127
    1782:	8c 93       	st	X, r24
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <PORT_voidInIt>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
    1792:	ea e3       	ldi	r30, 0x3A	; 58
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 ee       	ldi	r24, 0xE0	; 224
    1798:	80 83       	st	Z, r24
    DDRB = PORTB_DIR;
    179a:	e7 e3       	ldi	r30, 0x37	; 55
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	10 82       	st	Z, r1
    DDRC = PORTC_DIR;
    17a0:	e4 e3       	ldi	r30, 0x34	; 52
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	10 82       	st	Z, r1
    DDRD = PORTD_DIR;
    17a6:	e1 e3       	ldi	r30, 0x31	; 49
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	80 83       	st	Z, r24

    PORTA = PORTA_INITIAL_VALUE;
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	10 82       	st	Z, r1
    PORTB = PORTB_INITIAL_VALUE;
    17b4:	e8 e3       	ldi	r30, 0x38	; 56
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	10 82       	st	Z, r1
    PORTC = PORTC_INITIAL_VALUE;
    17ba:	e5 e3       	ldi	r30, 0x35	; 53
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	10 82       	st	Z, r1
    PORTD = PORTD_INITIAL_VALUE;
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	10 82       	st	Z, r1
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <main>:
#include "CLCD_interface.h"

u8 Data=55;

void main()
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInIt();
    17d6:	0e 94 c5 0b 	call	0x178a	; 0x178a <PORT_voidInIt>
	CLCD_voidInit();
    17da:	0e 94 1f 07 	call	0xe3e	; 0xe3e <CLCD_voidInit>
	GIE_voidEnable();
    17de:	0e 94 a9 0b 	call	0x1752	; 0x1752 <GIE_voidEnable>
	TWI_voidInitSlave(50);
    17e2:	82 e3       	ldi	r24, 0x32	; 50
    17e4:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_voidInitSlave>
	CLCD_voidSendString("wwwwwwwwwww");
    17e8:	80 e6       	ldi	r24, 0x60	; 96
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
	u8 x;
	while(1)
	{
		x = TWI_SlaveReadDataByte(&Data);
    17f0:	8d e8       	ldi	r24, 0x8D	; 141
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_SlaveReadDataByte>
    17f8:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidGoToXY(0,0);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	0e 94 00 07 	call	0xe00	; 0xe00 <CLCD_voidGoToXY>
		CLCD_voidSendString("SLAVE_1 Err= ");
    1802:	8c e6       	ldi	r24, 0x6C	; 108
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
		CLCD_voidDisplayNumber(x);
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 ee 07 	call	0xfdc	; 0xfdc <CLCD_voidDisplayNumber>
		CLCD_voidGoToXY(1,0);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	0e 94 00 07 	call	0xe00	; 0xe00 <CLCD_voidGoToXY>
		CLCD_voidSendString("SLAVE_1 = ");
    1824:	8a e7       	ldi	r24, 0x7A	; 122
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
		CLCD_voidDisplayNumber(Data);
    182c:	80 91 8d 00 	lds	r24, 0x008D
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <CLCD_voidDisplayNumber>
    1840:	d7 cf       	rjmp	.-82     	; 0x17f0 <main+0x24>

00001842 <TWI_voidInitMaster>:

//-------------------------------------------------------------------------------------------------------------------------------

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
    184e:	e0 e2       	ldi	r30, 0x20	; 32
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	80 83       	st	Z, r24

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
    1856:	e1 e2       	ldi	r30, 0x21	; 33
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	10 82       	st	Z, r1
	{
		TWSR=3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	88 23       	and	r24, r24
    1860:	29 f0       	breq	.+10     	; 0x186c <TWI_voidInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
    1862:	e2 e2       	ldi	r30, 0x22	; 34
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 0f       	add	r24, r24
    186a:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    186c:	a6 e5       	ldi	r26, 0x56	; 86
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e6 e5       	ldi	r30, 0x56	; 86
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    187a:	a6 e5       	ldi	r26, 0x56	; 86
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e6 e5       	ldi	r30, 0x56	; 86
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	84 60       	ori	r24, 0x04	; 4
    1886:	8c 93       	st	X, r24
}
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
    189c:	e2 e2       	ldi	r30, 0x22	; 34
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	88 0f       	add	r24, r24
    18a4:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    18a6:	a6 e5       	ldi	r26, 0x56	; 86
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e6 e5       	ldi	r30, 0x56	; 86
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 64       	ori	r24, 0x40	; 64
    18b2:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    18b4:	a6 e5       	ldi	r26, 0x56	; 86
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e6 e5       	ldi	r30, 0x56	; 86
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	84 60       	ori	r24, 0x04	; 4
    18c0:	8c 93       	st	X, r24
}
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	0f 92       	push	r0
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    18d4:	19 82       	std	Y+1, r1	; 0x01


	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    18d6:	a6 e5       	ldi	r26, 0x56	; 86
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e6 e5       	ldi	r30, 0x56	; 86
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 62       	ori	r24, 0x20	; 32
    18e2:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    18e4:	a6 e5       	ldi	r26, 0x56	; 86
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e6 e5       	ldi	r30, 0x56	; 86
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	8c 93       	st	X, r24
	Hint : we could use 
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    18f2:	e6 e5       	ldi	r30, 0x56	; 86
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	88 23       	and	r24, r24
    18fa:	dc f7       	brge	.-10     	; 0x18f2 <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
    18fc:	e1 e2       	ldi	r30, 0x21	; 33
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	88 7f       	andi	r24, 0xF8	; 248
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	88 30       	cpi	r24, 0x08	; 8
    190c:	91 05       	cpc	r25, r1
    190e:	11 f0       	breq	.+4      	; 0x1914 <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
}
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    1928:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    192a:	a6 e5       	ldi	r26, 0x56	; 86
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e6 e5       	ldi	r30, 0x56	; 86
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1938:	a6 e5       	ldi	r26, 0x56	; 86
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e6 e5       	ldi	r30, 0x56	; 86
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 68       	ori	r24, 0x80	; 128
    1944:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1946:	e6 e5       	ldi	r30, 0x56	; 86
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	88 23       	and	r24, r24
    194e:	dc f7       	brge	.-10     	; 0x1946 <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
    1950:	e1 e2       	ldi	r30, 0x21	; 33
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	88 7f       	andi	r24, 0xF8	; 248
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	80 31       	cpi	r24, 0x10	; 16
    1960:	91 05       	cpc	r25, r1
    1962:	11 f0       	breq	.+4      	; 0x1968 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error = RepeatedStartError;
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
}
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <TWI_SendSlaveAddressWithWrite+0x6>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    197e:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
    1980:	e3 e2       	ldi	r30, 0x23	; 35
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	88 0f       	add	r24, r24
    1988:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
    198a:	a3 e2       	ldi	r26, 0x23	; 35
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e3 e2       	ldi	r30, 0x23	; 35
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8e 7f       	andi	r24, 0xFE	; 254
    1996:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1998:	a6 e5       	ldi	r26, 0x56	; 86
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 e5       	ldi	r30, 0x56	; 86
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8f 7d       	andi	r24, 0xDF	; 223
    19a4:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    19a6:	a6 e5       	ldi	r26, 0x56	; 86
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e6 e5       	ldi	r30, 0x56	; 86
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 68       	ori	r24, 0x80	; 128
    19b2:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	88 23       	and	r24, r24
    19bc:	dc f7       	brge	.-10     	; 0x19b4 <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    19be:	e1 e2       	ldi	r30, 0x21	; 33
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	88 7f       	andi	r24, 0xF8	; 248
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	88 31       	cpi	r24, 0x18	; 24
    19ce:	91 05       	cpc	r25, r1
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <TWI_SendSlaveAddressWithRead+0x6>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    19ee:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
    19f0:	e3 e2       	ldi	r30, 0x23	; 35
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	88 0f       	add	r24, r24
    19f8:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
    19fa:	a3 e2       	ldi	r26, 0x23	; 35
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e3 e2       	ldi	r30, 0x23	; 35
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	81 60       	ori	r24, 0x01	; 1
    1a06:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1a08:	a6 e5       	ldi	r26, 0x56	; 86
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e6 e5       	ldi	r30, 0x56	; 86
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1a16:	a6 e5       	ldi	r26, 0x56	; 86
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e6 e5       	ldi	r30, 0x56	; 86
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 68       	ori	r24, 0x80	; 128
    1a22:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1a24:	e6 e5       	ldi	r30, 0x56	; 86
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	88 23       	and	r24, r24
    1a2c:	dc f7       	brge	.-10     	; 0x1a24 <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    1a2e:	e1 e2       	ldi	r30, 0x21	; 33
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	88 7f       	andi	r24, 0xF8	; 248
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	80 34       	cpi	r24, 0x40	; 64
    1a3e:	91 05       	cpc	r25, r1
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <TWI_MasterWriteDataByte+0x6>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    1a5e:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    1a60:	e3 e2       	ldi	r30, 0x23	; 35
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1a68:	a6 e5       	ldi	r26, 0x56	; 86
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e6 e5       	ldi	r30, 0x56	; 86
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	80 68       	ori	r24, 0x80	; 128
    1a74:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1a76:	e6 e5       	ldi	r30, 0x56	; 86
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 23       	and	r24, r24
    1a7e:	dc f7       	brge	.-10     	; 0x1a76 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
    1a80:	e1 e2       	ldi	r30, 0x21	; 33
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	88 7f       	andi	r24, 0xF8	; 248
    1a8c:	90 70       	andi	r25, 0x00	; 0
    1a8e:	88 32       	cpi	r24, 0x28	; 40
    1a90:	91 05       	cpc	r25, r1
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
    1a94:	85 e0       	ldi	r24, 0x05	; 5
    1a96:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <TWI_MasterReadDataByte+0x6>
    1aaa:	0f 92       	push	r0
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9b 83       	std	Y+3, r25	; 0x03
    1ab2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    1ab4:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
    1ab6:	a6 e5       	ldi	r26, 0x56	; 86
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e6 e5       	ldi	r30, 0x56	; 86
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 68       	ori	r24, 0x80	; 128
    1ac2:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1ac4:	e6 e5       	ldi	r30, 0x56	; 86
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	dc f7       	brge	.-10     	; 0x1ac4 <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
    1ace:	e1 e2       	ldi	r30, 0x21	; 33
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	88 7f       	andi	r24, 0xF8	; 248
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	80 35       	cpi	r24, 0x50	; 80
    1ade:	91 05       	cpc	r25, r1
    1ae0:	19 f0       	breq	.+6      	; 0x1ae8 <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
    1ae2:	86 e0       	ldi	r24, 0x06	; 6
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    1ae8:	e3 e2       	ldi	r30, 0x23	; 35
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	ea 81       	ldd	r30, Y+2	; 0x02
    1af0:	fb 81       	ldd	r31, Y+3	; 0x03
    1af2:	80 83       	st	Z, r24
	}

	return Local_Error;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <TWI_SlaveWriteDataByte>:

TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <TWI_SlaveWriteDataByte+0x6>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    1b0e:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    1b10:	e3 e2       	ldi	r30, 0x23	; 35
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1b18:	a6 e5       	ldi	r26, 0x56	; 86
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1b26:	e6 e5       	ldi	r30, 0x56	; 86
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 23       	and	r24, r24
    1b2e:	dc f7       	brge	.-10     	; 0x1b26 <TWI_SlaveWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
    1b30:	e1 e2       	ldi	r30, 0x21	; 33
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	88 7f       	andi	r24, 0xF8	; 248
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	88 3b       	cpi	r24, 0xB8	; 184
    1b40:	91 05       	cpc	r25, r1
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <TWI_SlaveWriteDataByte+0x46>
	{
		Local_Error = SlaveWriteByteErr;
    1b44:	87 e0       	ldi	r24, 0x07	; 7
    1b46:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <TWI_SlaveReadDataByte+0x6>
    1b5a:	0f 92       	push	r0
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	9b 83       	std	Y+3, r25	; 0x03
    1b62:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    1b64:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
    1b66:	a6 e5       	ldi	r26, 0x56	; 86
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e6 e5       	ldi	r30, 0x56	; 86
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 68       	ori	r24, 0x80	; 128
    1b72:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1b74:	e6 e5       	ldi	r30, 0x56	; 86
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 23       	and	r24, r24
    1b7c:	dc f7       	brge	.-10     	; 0x1b74 <TWI_SlaveReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
    1b7e:	e1 e2       	ldi	r30, 0x21	; 33
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	88 7f       	andi	r24, 0xF8	; 248
    1b8a:	90 70       	andi	r25, 0x00	; 0
    1b8c:	80 36       	cpi	r24, 0x60	; 96
    1b8e:	91 05       	cpc	r25, r1
    1b90:	11 f0       	breq	.+4      	; 0x1b96 <TWI_SlaveReadDataByte+0x42>
	{
		Local_Error = SlaveReadByteErr;
    1b92:	88 e0       	ldi	r24, 0x08	; 8
    1b94:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(TWCR,TWCR_TWINT);
    1b96:	a6 e5       	ldi	r26, 0x56	; 86
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e6 e5       	ldi	r30, 0x56	; 86
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 68       	ori	r24, 0x80	; 128
    1ba2:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1ba4:	e6 e5       	ldi	r30, 0x56	; 86
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 23       	and	r24, r24
    1bac:	dc f7       	brge	.-10     	; 0x1ba4 <TWI_SlaveReadDataByte+0x50>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    1bae:	e1 e2       	ldi	r30, 0x21	; 33
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	88 7f       	andi	r24, 0xF8	; 248
    1bba:	90 70       	andi	r25, 0x00	; 0
    1bbc:	80 38       	cpi	r24, 0x80	; 128
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <TWI_SlaveReadDataByte+0x74>
	{
		Local_Error = SlaveReadByteErr;
    1bc2:	88 e0       	ldi	r24, 0x08	; 8
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	06 c0       	rjmp	.+12     	; 0x1bd4 <TWI_SlaveReadDataByte+0x80>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    1bc8:	e3 e2       	ldi	r30, 0x23	; 35
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd2:	80 83       	st	Z, r24
	}

	return Local_Error;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    1bea:	a6 e5       	ldi	r26, 0x56	; 86
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e6 e5       	ldi	r30, 0x56	; 86
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 61       	ori	r24, 0x10	; 16
    1bf6:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1bf8:	a6 e5       	ldi	r26, 0x56	; 86
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e6 e5       	ldi	r30, 0x56	; 86
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 68       	ori	r24, 0x80	; 128
    1c04:	8c 93       	st	X, r24

}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <__udivmodsi4>:
    1c0c:	a1 e2       	ldi	r26, 0x21	; 33
    1c0e:	1a 2e       	mov	r1, r26
    1c10:	aa 1b       	sub	r26, r26
    1c12:	bb 1b       	sub	r27, r27
    1c14:	fd 01       	movw	r30, r26
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <__udivmodsi4_ep>

00001c18 <__udivmodsi4_loop>:
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	ee 1f       	adc	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	a2 17       	cp	r26, r18
    1c22:	b3 07       	cpc	r27, r19
    1c24:	e4 07       	cpc	r30, r20
    1c26:	f5 07       	cpc	r31, r21
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <__udivmodsi4_ep>
    1c2a:	a2 1b       	sub	r26, r18
    1c2c:	b3 0b       	sbc	r27, r19
    1c2e:	e4 0b       	sbc	r30, r20
    1c30:	f5 0b       	sbc	r31, r21

00001c32 <__udivmodsi4_ep>:
    1c32:	66 1f       	adc	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	1a 94       	dec	r1
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <__udivmodsi4_loop>
    1c3e:	60 95       	com	r22
    1c40:	70 95       	com	r23
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	bd 01       	movw	r22, r26
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	08 95       	ret

00001c50 <__prologue_saves__>:
    1c50:	2f 92       	push	r2
    1c52:	3f 92       	push	r3
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	ca 1b       	sub	r28, r26
    1c7a:	db 0b       	sbc	r29, r27
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	09 94       	ijmp

00001c88 <__epilogue_restores__>:
    1c88:	2a 88       	ldd	r2, Y+18	; 0x12
    1c8a:	39 88       	ldd	r3, Y+17	; 0x11
    1c8c:	48 88       	ldd	r4, Y+16	; 0x10
    1c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    1caa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cac:	ce 0f       	add	r28, r30
    1cae:	d1 1d       	adc	r29, r1
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	ed 01       	movw	r28, r26
    1cbc:	08 95       	ret

00001cbe <_exit>:
    1cbe:	f8 94       	cli

00001cc0 <__stop_program>:
    1cc0:	ff cf       	rjmp	.-2      	; 0x1cc0 <__stop_program>
