
TWI_Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  00000bba  2**0
                  ALLOC
  2 .stab         00001020  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000070f  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
  74:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	72 c0       	rjmp	.+228    	; 0x18c <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	49 f1       	breq	.+82     	; 0x10e <DIO_u8SetPinValue+0x92>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	61 f0       	breq	.+24     	; 0xe6 <DIO_u8SetPinValue+0x6a>
  ce:	5b c0       	rjmp	.+182    	; 0x186 <DIO_u8SetPinValue+0x10a>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	71 f1       	breq	.+92     	; 0x136 <DIO_u8SetPinValue+0xba>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	e9 f1       	breq	.+122    	; 0x15e <DIO_u8SetPinValue+0xe2>
  e4:	50 c0       	rjmp	.+160    	; 0x186 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA : SET_BIT(PORTA, Copy_u8Pin); break;
  e6:	ab e3       	ldi	r26, 0x3B	; 59
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	eb e3       	ldi	r30, 0x3B	; 59
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x88>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x84>
 108:	84 2b       	or	r24, r20
 10a:	8c 93       	st	X, r24
 10c:	bf c0       	rjmp	.+382    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin); break;
 10e:	a8 e3       	ldi	r26, 0x38	; 56
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e8 e3       	ldi	r30, 0x38	; 56
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8SetPinValue+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8SetPinValue+0xac>
 130:	84 2b       	or	r24, r20
 132:	8c 93       	st	X, r24
 134:	ab c0       	rjmp	.+342    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : SET_BIT(PORTC, Copy_u8Pin); break;
 136:	a5 e3       	ldi	r26, 0x35	; 53
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e5 e3       	ldi	r30, 0x35	; 53
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinValue+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinValue+0xd4>
 158:	84 2b       	or	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	97 c0       	rjmp	.+302    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : SET_BIT(PORTD, Copy_u8Pin); break;
 15e:	a2 e3       	ldi	r26, 0x32	; 50
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e2 e3       	ldi	r30, 0x32	; 50
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinValue+0x100>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinValue+0xfc>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	83 c0       	rjmp	.+262    	; 0x28c <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	80 c0       	rjmp	.+256    	; 0x28c <DIO_u8SetPinValue+0x210>

			}
		}

		else if(Copy_u8Value==DIO_u8PIN_LOW)
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	88 23       	and	r24, r24
 190:	09 f0       	breq	.+2      	; 0x194 <DIO_u8SetPinValue+0x118>
 192:	77 c0       	rjmp	.+238    	; 0x282 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	3e 83       	std	Y+6, r19	; 0x06
 19c:	2d 83       	std	Y+5, r18	; 0x05
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	9e 81       	ldd	r25, Y+6	; 0x06
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	59 f1       	breq	.+86     	; 0x1fe <DIO_u8SetPinValue+0x182>
 1a8:	2d 81       	ldd	r18, Y+5	; 0x05
 1aa:	3e 81       	ldd	r19, Y+6	; 0x06
 1ac:	22 30       	cpi	r18, 0x02	; 2
 1ae:	31 05       	cpc	r19, r1
 1b0:	2c f4       	brge	.+10     	; 0x1bc <DIO_u8SetPinValue+0x140>
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	9e 81       	ldd	r25, Y+6	; 0x06
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <DIO_u8SetPinValue+0x158>
 1ba:	60 c0       	rjmp	.+192    	; 0x27c <DIO_u8SetPinValue+0x200>
 1bc:	2d 81       	ldd	r18, Y+5	; 0x05
 1be:	3e 81       	ldd	r19, Y+6	; 0x06
 1c0:	22 30       	cpi	r18, 0x02	; 2
 1c2:	31 05       	cpc	r19, r1
 1c4:	89 f1       	breq	.+98     	; 0x228 <DIO_u8SetPinValue+0x1ac>
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	91 05       	cpc	r25, r1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_u8SetPinValue+0x156>
 1d0:	40 c0       	rjmp	.+128    	; 0x252 <DIO_u8SetPinValue+0x1d6>
 1d2:	54 c0       	rjmp	.+168    	; 0x27c <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA, Copy_u8Pin); break;
 1d4:	ab e3       	ldi	r26, 0x3B	; 59
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	eb e3       	ldi	r30, 0x3B	; 59
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x176>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x172>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	47 c0       	rjmp	.+142    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB : CLR_BIT(PORTB, Copy_u8Pin); break;
 1fe:	a8 e3       	ldi	r26, 0x38	; 56
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e8 e3       	ldi	r30, 0x38	; 56
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_u8SetPinValue+0x1a0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_u8SetPinValue+0x19c>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
 226:	32 c0       	rjmp	.+100    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC : CLR_BIT(PORTC, Copy_u8Pin); break;
 228:	a5 e3       	ldi	r26, 0x35	; 53
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e5 e3       	ldi	r30, 0x35	; 53
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_u8SetPinValue+0x1c6>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
 250:	1d c0       	rjmp	.+58     	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD : CLR_BIT(PORTD, Copy_u8Pin); break;
 252:	a2 e3       	ldi	r26, 0x32	; 50
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e2 e3       	ldi	r30, 0x32	; 50
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_u8SetPinValue+0x1f4>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_u8SetPinValue+0x1f0>
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
				default : Local_u8ErrorState=1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}

		else
		{
			Local_u8ErrorState=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortValue+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_u8SetPortValue+0x5c>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_u8SetPortValue+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_u8SetPortValue+0x52>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_u8SetPortValue+0x7a>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8SetPortValue+0x66>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_u8SetPortValue+0x70>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 2fc:	e8 e3       	ldi	r30, 0x38	; 56
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 306:	e5 e3       	ldi	r30, 0x35	; 53
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
 30e:	07 c0       	rjmp	.+14     	; 0x31e <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 310:	e2 e3       	ldi	r30, 0x32	; 50
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	80 83       	st	Z, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState=1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	27 97       	sbiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	6b 83       	std	Y+3, r22	; 0x03
 348:	5d 83       	std	Y+5, r21	; 0x05
 34a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 34c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	9d 81       	ldd	r25, Y+5	; 0x05
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_u8GetPinValue+0x28>
 356:	78 c0       	rjmp	.+240    	; 0x448 <DIO_u8GetPinValue+0x118>
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	88 30       	cpi	r24, 0x08	; 8
 35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_u8GetPinValue+0x30>
 35e:	74 c0       	rjmp	.+232    	; 0x448 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3f 83       	std	Y+7, r19	; 0x07
 368:	2e 83       	std	Y+6, r18	; 0x06
 36a:	4e 81       	ldd	r20, Y+6	; 0x06
 36c:	5f 81       	ldd	r21, Y+7	; 0x07
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	51 05       	cpc	r21, r1
 372:	59 f1       	breq	.+86     	; 0x3ca <DIO_u8GetPinValue+0x9a>
 374:	8e 81       	ldd	r24, Y+6	; 0x06
 376:	9f 81       	ldd	r25, Y+7	; 0x07
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	34 f4       	brge	.+12     	; 0x38a <DIO_u8GetPinValue+0x5a>
 37e:	2e 81       	ldd	r18, Y+6	; 0x06
 380:	3f 81       	ldd	r19, Y+7	; 0x07
 382:	21 15       	cp	r18, r1
 384:	31 05       	cpc	r19, r1
 386:	69 f0       	breq	.+26     	; 0x3a2 <DIO_u8GetPinValue+0x72>
 388:	5c c0       	rjmp	.+184    	; 0x442 <DIO_u8GetPinValue+0x112>
 38a:	4e 81       	ldd	r20, Y+6	; 0x06
 38c:	5f 81       	ldd	r21, Y+7	; 0x07
 38e:	42 30       	cpi	r20, 0x02	; 2
 390:	51 05       	cpc	r21, r1
 392:	79 f1       	breq	.+94     	; 0x3f2 <DIO_u8GetPinValue+0xc2>
 394:	8e 81       	ldd	r24, Y+6	; 0x06
 396:	9f 81       	ldd	r25, Y+7	; 0x07
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	91 05       	cpc	r25, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_u8GetPinValue+0x70>
 39e:	3d c0       	rjmp	.+122    	; 0x41a <DIO_u8GetPinValue+0xea>
 3a0:	50 c0       	rjmp	.+160    	; 0x442 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
 3a2:	e9 e3       	ldi	r30, 0x39	; 57
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a9 01       	movw	r20, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_u8GetPinValue+0x8a>
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_u8GetPinValue+0x86>
 3be:	ca 01       	movw	r24, r20
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	ec 81       	ldd	r30, Y+4	; 0x04
 3c4:	fd 81       	ldd	r31, Y+5	; 0x05
 3c6:	80 83       	st	Z, r24
 3c8:	41 c0       	rjmp	.+130    	; 0x44c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
 3ca:	e6 e3       	ldi	r30, 0x36	; 54
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8GetPinValue+0xb2>
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8GetPinValue+0xae>
 3e6:	ca 01       	movw	r24, r20
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	ec 81       	ldd	r30, Y+4	; 0x04
 3ec:	fd 81       	ldd	r31, Y+5	; 0x05
 3ee:	80 83       	st	Z, r24
 3f0:	2d c0       	rjmp	.+90     	; 0x44c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
 3f2:	e3 e3       	ldi	r30, 0x33	; 51
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a9 01       	movw	r20, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8GetPinValue+0xda>
 406:	55 95       	asr	r21
 408:	47 95       	ror	r20
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8GetPinValue+0xd6>
 40e:	ca 01       	movw	r24, r20
 410:	81 70       	andi	r24, 0x01	; 1
 412:	ec 81       	ldd	r30, Y+4	; 0x04
 414:	fd 81       	ldd	r31, Y+5	; 0x05
 416:	80 83       	st	Z, r24
 418:	19 c0       	rjmp	.+50     	; 0x44c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
 41a:	e0 e3       	ldi	r30, 0x30	; 48
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a9 01       	movw	r20, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8GetPinValue+0x102>
 42e:	55 95       	asr	r21
 430:	47 95       	ror	r20
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8GetPinValue+0xfe>
 436:	ca 01       	movw	r24, r20
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	ec 81       	ldd	r30, Y+4	; 0x04
 43c:	fd 81       	ldd	r31, Y+5	; 0x05
 43e:	80 83       	st	Z, r24
 440:	05 c0       	rjmp	.+10     	; 0x44c <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorState=1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	27 96       	adiw	r28, 0x07	; 7
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,SREG_I);
 468:	af e5       	ldi	r26, 0x5F	; 95
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	ef e5       	ldi	r30, 0x5F	; 95
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 68       	ori	r24, 0x80	; 128
 474:	8c 93       	st	X, r24
}
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <GIE_voidDisable>:

void GIE_voidDisable(void)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,SREG_I);
 484:	af e5       	ldi	r26, 0x5F	; 95
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	ef e5       	ldi	r30, 0x5F	; 95
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8f 77       	andi	r24, 0x7F	; 127
 490:	8c 93       	st	X, r24
}
 492:	cf 91       	pop	r28
 494:	df 91       	pop	r29
 496:	08 95       	ret

00000498 <PORT_voidInIt>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInIt(void)
{
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR;
 4a0:	ea e3       	ldi	r30, 0x3A	; 58
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	10 82       	st	Z, r1
    DDRB = PORTB_DIR;
 4a6:	e7 e3       	ldi	r30, 0x37	; 55
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	10 82       	st	Z, r1
    DDRC = PORTC_DIR;
 4ac:	e4 e3       	ldi	r30, 0x34	; 52
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	10 82       	st	Z, r1
    DDRD = PORTD_DIR;
 4b2:	e1 e3       	ldi	r30, 0x31	; 49
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 83       	st	Z, r24

    PORTA = PORTA_INITIAL_VALUE;
 4ba:	eb e3       	ldi	r30, 0x3B	; 59
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	10 82       	st	Z, r1
    PORTB = PORTB_INITIAL_VALUE;
 4c0:	e8 e3       	ldi	r30, 0x38	; 56
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 e1       	ldi	r24, 0x10	; 16
 4c6:	80 83       	st	Z, r24
    PORTC = PORTC_INITIAL_VALUE;
 4c8:	e5 e3       	ldi	r30, 0x35	; 53
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	10 82       	st	Z, r1
    PORTD = PORTD_INITIAL_VALUE;
 4ce:	e2 e3       	ldi	r30, 0x32	; 50
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	10 82       	st	Z, r1
}
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	08 95       	ret

000004da <main>:

u8 Data=0;
long long cnt=0;

void main()
{
 4da:	af 92       	push	r10
 4dc:	bf 92       	push	r11
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	ab 97       	sbiw	r28, 0x2b	; 43
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInIt();
 4fe:	0e 94 4c 02 	call	0x498	; 0x498 <PORT_voidInIt>
	GIE_voidEnable();
 502:	0e 94 30 02 	call	0x460	; 0x460 <GIE_voidEnable>
	TWI_voidInitSlave(200);
 506:	88 ec       	ldi	r24, 0xC8	; 200
 508:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TWI_voidInitSlave>
	while(1)
	{
		TWI_SlaveReadDataByte(&Data);
 50c:	80 e6       	ldi	r24, 0x60	; 96
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 45 05 	call	0xa8a	; 0xa8a <TWI_SlaveReadDataByte>
		if(cnt%2==0){
 514:	20 91 61 00 	lds	r18, 0x0061
 518:	30 91 62 00 	lds	r19, 0x0062
 51c:	40 91 63 00 	lds	r20, 0x0063
 520:	50 91 64 00 	lds	r21, 0x0064
 524:	60 91 65 00 	lds	r22, 0x0065
 528:	70 91 66 00 	lds	r23, 0x0066
 52c:	80 91 67 00 	lds	r24, 0x0067
 530:	90 91 68 00 	lds	r25, 0x0068
 534:	a2 2e       	mov	r10, r18
 536:	b3 2e       	mov	r11, r19
 538:	c4 2e       	mov	r12, r20
 53a:	d5 2e       	mov	r13, r21
 53c:	e6 2e       	mov	r14, r22
 53e:	f7 2e       	mov	r15, r23
 540:	08 2f       	mov	r16, r24
 542:	19 2f       	mov	r17, r25
 544:	2a 2d       	mov	r18, r10
 546:	21 70       	andi	r18, 0x01	; 1
 548:	3b 2d       	mov	r19, r11
 54a:	30 70       	andi	r19, 0x00	; 0
 54c:	4c 2d       	mov	r20, r12
 54e:	40 70       	andi	r20, 0x00	; 0
 550:	5d 2d       	mov	r21, r13
 552:	50 70       	andi	r21, 0x00	; 0
 554:	6e 2d       	mov	r22, r14
 556:	60 70       	andi	r22, 0x00	; 0
 558:	7f 2d       	mov	r23, r15
 55a:	70 70       	andi	r23, 0x00	; 0
 55c:	80 2f       	mov	r24, r16
 55e:	80 70       	andi	r24, 0x00	; 0
 560:	91 2f       	mov	r25, r17
 562:	90 70       	andi	r25, 0x00	; 0
 564:	e2 2f       	mov	r30, r18
 566:	e3 2b       	or	r30, r19
 568:	e4 2b       	or	r30, r20
 56a:	e5 2b       	or	r30, r21
 56c:	e6 2b       	or	r30, r22
 56e:	e7 2b       	or	r30, r23
 570:	e8 2b       	or	r30, r24
 572:	e9 2b       	or	r30, r25
 574:	ee 23       	and	r30, r30
 576:	31 f4       	brne	.+12     	; 0x584 <main+0xaa>
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_HIGH);
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	41 e0       	ldi	r20, 0x01	; 1
 57e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
 582:	05 c0       	rjmp	.+10     	; 0x58e <main+0xb4>
		}
		else{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_LOW);
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
		}
		cnt++;
 58e:	80 91 61 00 	lds	r24, 0x0061
 592:	89 83       	std	Y+1, r24	; 0x01
 594:	90 91 62 00 	lds	r25, 0x0062
 598:	9a 83       	std	Y+2, r25	; 0x02
 59a:	80 91 63 00 	lds	r24, 0x0063
 59e:	8b 83       	std	Y+3, r24	; 0x03
 5a0:	90 91 64 00 	lds	r25, 0x0064
 5a4:	9c 83       	std	Y+4, r25	; 0x04
 5a6:	80 91 65 00 	lds	r24, 0x0065
 5aa:	8d 83       	std	Y+5, r24	; 0x05
 5ac:	90 91 66 00 	lds	r25, 0x0066
 5b0:	9e 83       	std	Y+6, r25	; 0x06
 5b2:	80 91 67 00 	lds	r24, 0x0067
 5b6:	8f 83       	std	Y+7, r24	; 0x07
 5b8:	90 91 68 00 	lds	r25, 0x0068
 5bc:	98 87       	std	Y+8, r25	; 0x08
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 87       	std	Y+9, r24	; 0x09
 5c2:	1a 86       	std	Y+10, r1	; 0x0a
 5c4:	1b 86       	std	Y+11, r1	; 0x0b
 5c6:	1c 86       	std	Y+12, r1	; 0x0c
 5c8:	1d 86       	std	Y+13, r1	; 0x0d
 5ca:	1e 86       	std	Y+14, r1	; 0x0e
 5cc:	1f 86       	std	Y+15, r1	; 0x0f
 5ce:	18 8a       	std	Y+16, r1	; 0x10
 5d0:	99 81       	ldd	r25, Y+1	; 0x01
 5d2:	89 85       	ldd	r24, Y+9	; 0x09
 5d4:	98 0f       	add	r25, r24
 5d6:	99 8b       	std	Y+17, r25	; 0x11
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	99 8f       	std	Y+25, r25	; 0x19
 5dc:	89 89       	ldd	r24, Y+17	; 0x11
 5de:	99 81       	ldd	r25, Y+1	; 0x01
 5e0:	89 17       	cp	r24, r25
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <main+0x10c>
 5e4:	19 8e       	std	Y+25, r1	; 0x19
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ea:	89 0f       	add	r24, r25
 5ec:	8a 8b       	std	Y+18, r24	; 0x12
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	8a 8f       	std	Y+26, r24	; 0x1a
 5f2:	9a 89       	ldd	r25, Y+18	; 0x12
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	98 17       	cp	r25, r24
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <main+0x122>
 5fa:	1a 8e       	std	Y+26, r1	; 0x1a
 5fc:	99 8d       	ldd	r25, Y+25	; 0x19
 5fe:	8a 89       	ldd	r24, Y+18	; 0x12
 600:	98 0f       	add	r25, r24
 602:	9b 8f       	std	Y+27, r25	; 0x1b
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	9c 8f       	std	Y+28, r25	; 0x1c
 608:	8b 8d       	ldd	r24, Y+27	; 0x1b
 60a:	9a 89       	ldd	r25, Y+18	; 0x12
 60c:	89 17       	cp	r24, r25
 60e:	08 f0       	brcs	.+2      	; 0x612 <main+0x138>
 610:	1c 8e       	std	Y+28, r1	; 0x1c
 612:	8a 8d       	ldd	r24, Y+26	; 0x1a
 614:	9c 8d       	ldd	r25, Y+28	; 0x1c
 616:	89 2b       	or	r24, r25
 618:	8a 8f       	std	Y+26, r24	; 0x1a
 61a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 61c:	8a 8b       	std	Y+18, r24	; 0x12
 61e:	9b 81       	ldd	r25, Y+3	; 0x03
 620:	8b 85       	ldd	r24, Y+11	; 0x0b
 622:	98 0f       	add	r25, r24
 624:	9b 8b       	std	Y+19, r25	; 0x13
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	9d 8f       	std	Y+29, r25	; 0x1d
 62a:	8b 89       	ldd	r24, Y+19	; 0x13
 62c:	9b 81       	ldd	r25, Y+3	; 0x03
 62e:	89 17       	cp	r24, r25
 630:	08 f0       	brcs	.+2      	; 0x634 <main+0x15a>
 632:	1d 8e       	std	Y+29, r1	; 0x1d
 634:	8a 8d       	ldd	r24, Y+26	; 0x1a
 636:	9b 89       	ldd	r25, Y+19	; 0x13
 638:	89 0f       	add	r24, r25
 63a:	8e 8f       	std	Y+30, r24	; 0x1e
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	8f 8f       	std	Y+31, r24	; 0x1f
 640:	9e 8d       	ldd	r25, Y+30	; 0x1e
 642:	8b 89       	ldd	r24, Y+19	; 0x13
 644:	98 17       	cp	r25, r24
 646:	08 f0       	brcs	.+2      	; 0x64a <main+0x170>
 648:	1f 8e       	std	Y+31, r1	; 0x1f
 64a:	9d 8d       	ldd	r25, Y+29	; 0x1d
 64c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 64e:	98 2b       	or	r25, r24
 650:	9d 8f       	std	Y+29, r25	; 0x1d
 652:	9e 8d       	ldd	r25, Y+30	; 0x1e
 654:	9b 8b       	std	Y+19, r25	; 0x13
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	9c 85       	ldd	r25, Y+12	; 0x0c
 65a:	89 0f       	add	r24, r25
 65c:	8c 8b       	std	Y+20, r24	; 0x14
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	88 a3       	std	Y+32, r24	; 0x20
 662:	9c 89       	ldd	r25, Y+20	; 0x14
 664:	8c 81       	ldd	r24, Y+4	; 0x04
 666:	98 17       	cp	r25, r24
 668:	08 f0       	brcs	.+2      	; 0x66c <main+0x192>
 66a:	18 a2       	std	Y+32, r1	; 0x20
 66c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 66e:	8c 89       	ldd	r24, Y+20	; 0x14
 670:	98 0f       	add	r25, r24
 672:	99 a3       	std	Y+33, r25	; 0x21
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	9a a3       	std	Y+34, r25	; 0x22
 678:	89 a1       	ldd	r24, Y+33	; 0x21
 67a:	9c 89       	ldd	r25, Y+20	; 0x14
 67c:	89 17       	cp	r24, r25
 67e:	08 f0       	brcs	.+2      	; 0x682 <main+0x1a8>
 680:	1a a2       	std	Y+34, r1	; 0x22
 682:	88 a1       	ldd	r24, Y+32	; 0x20
 684:	9a a1       	ldd	r25, Y+34	; 0x22
 686:	89 2b       	or	r24, r25
 688:	88 a3       	std	Y+32, r24	; 0x20
 68a:	89 a1       	ldd	r24, Y+33	; 0x21
 68c:	8c 8b       	std	Y+20, r24	; 0x14
 68e:	9d 81       	ldd	r25, Y+5	; 0x05
 690:	8d 85       	ldd	r24, Y+13	; 0x0d
 692:	98 0f       	add	r25, r24
 694:	9d 8b       	std	Y+21, r25	; 0x15
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	9b a3       	std	Y+35, r25	; 0x23
 69a:	8d 89       	ldd	r24, Y+21	; 0x15
 69c:	9d 81       	ldd	r25, Y+5	; 0x05
 69e:	89 17       	cp	r24, r25
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <main+0x1ca>
 6a2:	1b a2       	std	Y+35, r1	; 0x23
 6a4:	88 a1       	ldd	r24, Y+32	; 0x20
 6a6:	9d 89       	ldd	r25, Y+21	; 0x15
 6a8:	89 0f       	add	r24, r25
 6aa:	8c a3       	std	Y+36, r24	; 0x24
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	8d a3       	std	Y+37, r24	; 0x25
 6b0:	9c a1       	ldd	r25, Y+36	; 0x24
 6b2:	8d 89       	ldd	r24, Y+21	; 0x15
 6b4:	98 17       	cp	r25, r24
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <main+0x1e0>
 6b8:	1d a2       	std	Y+37, r1	; 0x25
 6ba:	9b a1       	ldd	r25, Y+35	; 0x23
 6bc:	8d a1       	ldd	r24, Y+37	; 0x25
 6be:	98 2b       	or	r25, r24
 6c0:	9b a3       	std	Y+35, r25	; 0x23
 6c2:	9c a1       	ldd	r25, Y+36	; 0x24
 6c4:	9d 8b       	std	Y+21, r25	; 0x15
 6c6:	8e 81       	ldd	r24, Y+6	; 0x06
 6c8:	9e 85       	ldd	r25, Y+14	; 0x0e
 6ca:	89 0f       	add	r24, r25
 6cc:	8e 8b       	std	Y+22, r24	; 0x16
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	8e a3       	std	Y+38, r24	; 0x26
 6d2:	9e 89       	ldd	r25, Y+22	; 0x16
 6d4:	8e 81       	ldd	r24, Y+6	; 0x06
 6d6:	98 17       	cp	r25, r24
 6d8:	08 f0       	brcs	.+2      	; 0x6dc <main+0x202>
 6da:	1e a2       	std	Y+38, r1	; 0x26
 6dc:	9b a1       	ldd	r25, Y+35	; 0x23
 6de:	8e 89       	ldd	r24, Y+22	; 0x16
 6e0:	98 0f       	add	r25, r24
 6e2:	9f a3       	std	Y+39, r25	; 0x27
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	98 a7       	std	Y+40, r25	; 0x28
 6e8:	8f a1       	ldd	r24, Y+39	; 0x27
 6ea:	9e 89       	ldd	r25, Y+22	; 0x16
 6ec:	89 17       	cp	r24, r25
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <main+0x218>
 6f0:	18 a6       	std	Y+40, r1	; 0x28
 6f2:	8e a1       	ldd	r24, Y+38	; 0x26
 6f4:	98 a5       	ldd	r25, Y+40	; 0x28
 6f6:	89 2b       	or	r24, r25
 6f8:	8e a3       	std	Y+38, r24	; 0x26
 6fa:	8f a1       	ldd	r24, Y+39	; 0x27
 6fc:	8e 8b       	std	Y+22, r24	; 0x16
 6fe:	9f 81       	ldd	r25, Y+7	; 0x07
 700:	8f 85       	ldd	r24, Y+15	; 0x0f
 702:	98 0f       	add	r25, r24
 704:	9f 8b       	std	Y+23, r25	; 0x17
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	99 a7       	std	Y+41, r25	; 0x29
 70a:	8f 89       	ldd	r24, Y+23	; 0x17
 70c:	9f 81       	ldd	r25, Y+7	; 0x07
 70e:	89 17       	cp	r24, r25
 710:	08 f0       	brcs	.+2      	; 0x714 <main+0x23a>
 712:	19 a6       	std	Y+41, r1	; 0x29
 714:	8e a1       	ldd	r24, Y+38	; 0x26
 716:	9f 89       	ldd	r25, Y+23	; 0x17
 718:	89 0f       	add	r24, r25
 71a:	8a a7       	std	Y+42, r24	; 0x2a
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	8b a7       	std	Y+43, r24	; 0x2b
 720:	9a a5       	ldd	r25, Y+42	; 0x2a
 722:	8f 89       	ldd	r24, Y+23	; 0x17
 724:	98 17       	cp	r25, r24
 726:	08 f0       	brcs	.+2      	; 0x72a <main+0x250>
 728:	1b a6       	std	Y+43, r1	; 0x2b
 72a:	99 a5       	ldd	r25, Y+41	; 0x29
 72c:	8b a5       	ldd	r24, Y+43	; 0x2b
 72e:	98 2b       	or	r25, r24
 730:	99 a7       	std	Y+41, r25	; 0x29
 732:	9a a5       	ldd	r25, Y+42	; 0x2a
 734:	9f 8b       	std	Y+23, r25	; 0x17
 736:	88 85       	ldd	r24, Y+8	; 0x08
 738:	98 89       	ldd	r25, Y+16	; 0x10
 73a:	89 0f       	add	r24, r25
 73c:	88 8f       	std	Y+24, r24	; 0x18
 73e:	89 a5       	ldd	r24, Y+41	; 0x29
 740:	98 8d       	ldd	r25, Y+24	; 0x18
 742:	89 0f       	add	r24, r25
 744:	88 8f       	std	Y+24, r24	; 0x18
 746:	29 89       	ldd	r18, Y+17	; 0x11
 748:	3a 89       	ldd	r19, Y+18	; 0x12
 74a:	4b 89       	ldd	r20, Y+19	; 0x13
 74c:	5c 89       	ldd	r21, Y+20	; 0x14
 74e:	6d 89       	ldd	r22, Y+21	; 0x15
 750:	7e 89       	ldd	r23, Y+22	; 0x16
 752:	8f 89       	ldd	r24, Y+23	; 0x17
 754:	98 8d       	ldd	r25, Y+24	; 0x18
 756:	20 93 61 00 	sts	0x0061, r18
 75a:	30 93 62 00 	sts	0x0062, r19
 75e:	40 93 63 00 	sts	0x0063, r20
 762:	50 93 64 00 	sts	0x0064, r21
 766:	60 93 65 00 	sts	0x0065, r22
 76a:	70 93 66 00 	sts	0x0066, r23
 76e:	80 93 67 00 	sts	0x0067, r24
 772:	90 93 68 00 	sts	0x0068, r25
 776:	ca ce       	rjmp	.-620    	; 0x50c <main+0x32>

00000778 <TWI_voidInitMaster>:

//-------------------------------------------------------------------------------------------------------------------------------

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	0f 92       	push	r0
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
 784:	e0 e2       	ldi	r30, 0x20	; 32
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	80 83       	st	Z, r24

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
 78c:	e1 e2       	ldi	r30, 0x21	; 33
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	10 82       	st	Z, r1
	{
		TWSR=3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	88 23       	and	r24, r24
 796:	29 f0       	breq	.+10     	; 0x7a2 <TWI_voidInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
 798:	e2 e2       	ldi	r30, 0x22	; 34
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	88 0f       	add	r24, r24
 7a0:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
 7a2:	a6 e5       	ldi	r26, 0x56	; 86
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	e6 e5       	ldi	r30, 0x56	; 86
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	80 64       	ori	r24, 0x40	; 64
 7ae:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
 7b0:	a6 e5       	ldi	r26, 0x56	; 86
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e6 e5       	ldi	r30, 0x56	; 86
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	84 60       	ori	r24, 0x04	; 4
 7bc:	8c 93       	st	X, r24
}
 7be:	0f 90       	pop	r0
 7c0:	cf 91       	pop	r28
 7c2:	df 91       	pop	r29
 7c4:	08 95       	ret

000007c6 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
 7c6:	df 93       	push	r29
 7c8:	cf 93       	push	r28
 7ca:	0f 92       	push	r0
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
 7d2:	e2 e2       	ldi	r30, 0x22	; 34
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	88 0f       	add	r24, r24
 7da:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
 7dc:	a6 e5       	ldi	r26, 0x56	; 86
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e6 e5       	ldi	r30, 0x56	; 86
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	80 64       	ori	r24, 0x40	; 64
 7e8:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
 7ea:	a6 e5       	ldi	r26, 0x56	; 86
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	e6 e5       	ldi	r30, 0x56	; 86
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	84 60       	ori	r24, 0x04	; 4
 7f6:	8c 93       	st	X, r24
}
 7f8:	0f 90       	pop	r0
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	08 95       	ret

00000800 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
 800:	df 93       	push	r29
 802:	cf 93       	push	r28
 804:	0f 92       	push	r0
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
 80a:	19 82       	std	Y+1, r1	; 0x01


	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
 80c:	a6 e5       	ldi	r26, 0x56	; 86
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	e6 e5       	ldi	r30, 0x56	; 86
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	80 62       	ori	r24, 0x20	; 32
 818:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 81a:	a6 e5       	ldi	r26, 0x56	; 86
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	e6 e5       	ldi	r30, 0x56	; 86
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	80 68       	ori	r24, 0x80	; 128
 826:	8c 93       	st	X, r24
	Hint : we could use 
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 828:	e6 e5       	ldi	r30, 0x56	; 86
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	88 23       	and	r24, r24
 830:	dc f7       	brge	.-10     	; 0x828 <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
 832:	e1 e2       	ldi	r30, 0x21	; 33
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	88 7f       	andi	r24, 0xF8	; 248
 83e:	90 70       	andi	r25, 0x00	; 0
 840:	88 30       	cpi	r24, 0x08	; 8
 842:	91 05       	cpc	r25, r1
 844:	11 f0       	breq	.+4      	; 0x84a <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
 84a:	89 81       	ldd	r24, Y+1	; 0x01
}
 84c:	0f 90       	pop	r0
 84e:	cf 91       	pop	r28
 850:	df 91       	pop	r29
 852:	08 95       	ret

00000854 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
 854:	df 93       	push	r29
 856:	cf 93       	push	r28
 858:	0f 92       	push	r0
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
 85e:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
 860:	a6 e5       	ldi	r26, 0x56	; 86
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	e6 e5       	ldi	r30, 0x56	; 86
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	80 62       	ori	r24, 0x20	; 32
 86c:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 86e:	a6 e5       	ldi	r26, 0x56	; 86
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	e6 e5       	ldi	r30, 0x56	; 86
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	80 68       	ori	r24, 0x80	; 128
 87a:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 87c:	e6 e5       	ldi	r30, 0x56	; 86
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	88 23       	and	r24, r24
 884:	dc f7       	brge	.-10     	; 0x87c <__stack+0x1d>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
 886:	e1 e2       	ldi	r30, 0x21	; 33
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	88 2f       	mov	r24, r24
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	88 7f       	andi	r24, 0xF8	; 248
 892:	90 70       	andi	r25, 0x00	; 0
 894:	80 31       	cpi	r24, 0x10	; 16
 896:	91 05       	cpc	r25, r1
 898:	11 f0       	breq	.+4      	; 0x89e <__stack+0x3f>
	{
		Local_Error = RepeatedStartError;
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
 89e:	89 81       	ldd	r24, Y+1	; 0x01
}
 8a0:	0f 90       	pop	r0
 8a2:	cf 91       	pop	r28
 8a4:	df 91       	pop	r29
 8a6:	08 95       	ret

000008a8 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
 8a8:	df 93       	push	r29
 8aa:	cf 93       	push	r28
 8ac:	00 d0       	rcall	.+0      	; 0x8ae <TWI_SendSlaveAddressWithWrite+0x6>
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
 8b4:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
 8b6:	e3 e2       	ldi	r30, 0x23	; 35
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	8a 81       	ldd	r24, Y+2	; 0x02
 8bc:	88 0f       	add	r24, r24
 8be:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
 8c0:	a3 e2       	ldi	r26, 0x23	; 35
 8c2:	b0 e0       	ldi	r27, 0x00	; 0
 8c4:	e3 e2       	ldi	r30, 0x23	; 35
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	8e 7f       	andi	r24, 0xFE	; 254
 8cc:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
 8ce:	a6 e5       	ldi	r26, 0x56	; 86
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	e6 e5       	ldi	r30, 0x56	; 86
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	8f 7d       	andi	r24, 0xDF	; 223
 8da:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 8dc:	a6 e5       	ldi	r26, 0x56	; 86
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	e6 e5       	ldi	r30, 0x56	; 86
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	80 68       	ori	r24, 0x80	; 128
 8e8:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 8ea:	e6 e5       	ldi	r30, 0x56	; 86
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	88 23       	and	r24, r24
 8f2:	dc f7       	brge	.-10     	; 0x8ea <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
 8f4:	e1 e2       	ldi	r30, 0x21	; 33
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	88 2f       	mov	r24, r24
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	88 7f       	andi	r24, 0xF8	; 248
 900:	90 70       	andi	r25, 0x00	; 0
 902:	88 31       	cpi	r24, 0x18	; 24
 904:	91 05       	cpc	r25, r1
 906:	11 f0       	breq	.+4      	; 0x90c <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
 908:	83 e0       	ldi	r24, 0x03	; 3
 90a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
 90c:	89 81       	ldd	r24, Y+1	; 0x01
}
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	cf 91       	pop	r28
 914:	df 91       	pop	r29
 916:	08 95       	ret

00000918 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
 918:	df 93       	push	r29
 91a:	cf 93       	push	r28
 91c:	00 d0       	rcall	.+0      	; 0x91e <TWI_SendSlaveAddressWithRead+0x6>
 91e:	cd b7       	in	r28, 0x3d	; 61
 920:	de b7       	in	r29, 0x3e	; 62
 922:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
 924:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
 926:	e3 e2       	ldi	r30, 0x23	; 35
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	8a 81       	ldd	r24, Y+2	; 0x02
 92c:	88 0f       	add	r24, r24
 92e:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
 930:	a3 e2       	ldi	r26, 0x23	; 35
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	e3 e2       	ldi	r30, 0x23	; 35
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
 93e:	a6 e5       	ldi	r26, 0x56	; 86
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	e6 e5       	ldi	r30, 0x56	; 86
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	80 81       	ld	r24, Z
 948:	8f 7d       	andi	r24, 0xDF	; 223
 94a:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 94c:	a6 e5       	ldi	r26, 0x56	; 86
 94e:	b0 e0       	ldi	r27, 0x00	; 0
 950:	e6 e5       	ldi	r30, 0x56	; 86
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	80 68       	ori	r24, 0x80	; 128
 958:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 95a:	e6 e5       	ldi	r30, 0x56	; 86
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	88 23       	and	r24, r24
 962:	dc f7       	brge	.-10     	; 0x95a <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
 964:	e1 e2       	ldi	r30, 0x21	; 33
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	88 2f       	mov	r24, r24
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	88 7f       	andi	r24, 0xF8	; 248
 970:	90 70       	andi	r25, 0x00	; 0
 972:	80 34       	cpi	r24, 0x40	; 64
 974:	91 05       	cpc	r25, r1
 976:	11 f0       	breq	.+4      	; 0x97c <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
 978:	84 e0       	ldi	r24, 0x04	; 4
 97a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
 97c:	89 81       	ldd	r24, Y+1	; 0x01
}
 97e:	0f 90       	pop	r0
 980:	0f 90       	pop	r0
 982:	cf 91       	pop	r28
 984:	df 91       	pop	r29
 986:	08 95       	ret

00000988 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
 988:	df 93       	push	r29
 98a:	cf 93       	push	r28
 98c:	00 d0       	rcall	.+0      	; 0x98e <TWI_MasterWriteDataByte+0x6>
 98e:	cd b7       	in	r28, 0x3d	; 61
 990:	de b7       	in	r29, 0x3e	; 62
 992:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
 994:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
 996:	e3 e2       	ldi	r30, 0x23	; 35
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	8a 81       	ldd	r24, Y+2	; 0x02
 99c:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 99e:	a6 e5       	ldi	r26, 0x56	; 86
 9a0:	b0 e0       	ldi	r27, 0x00	; 0
 9a2:	e6 e5       	ldi	r30, 0x56	; 86
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	80 68       	ori	r24, 0x80	; 128
 9aa:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 9ac:	e6 e5       	ldi	r30, 0x56	; 86
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	88 23       	and	r24, r24
 9b4:	dc f7       	brge	.-10     	; 0x9ac <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
 9b6:	e1 e2       	ldi	r30, 0x21	; 33
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	88 2f       	mov	r24, r24
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	88 7f       	andi	r24, 0xF8	; 248
 9c2:	90 70       	andi	r25, 0x00	; 0
 9c4:	88 32       	cpi	r24, 0x28	; 40
 9c6:	91 05       	cpc	r25, r1
 9c8:	11 f0       	breq	.+4      	; 0x9ce <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
 9ca:	85 e0       	ldi	r24, 0x05	; 5
 9cc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
}
 9d0:	0f 90       	pop	r0
 9d2:	0f 90       	pop	r0
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	08 95       	ret

000009da <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
 9da:	df 93       	push	r29
 9dc:	cf 93       	push	r28
 9de:	00 d0       	rcall	.+0      	; 0x9e0 <TWI_MasterReadDataByte+0x6>
 9e0:	0f 92       	push	r0
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62
 9e6:	9b 83       	std	Y+3, r25	; 0x03
 9e8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
 9ea:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
 9ec:	a6 e5       	ldi	r26, 0x56	; 86
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	e6 e5       	ldi	r30, 0x56	; 86
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	80 68       	ori	r24, 0x80	; 128
 9f8:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 9fa:	e6 e5       	ldi	r30, 0x56	; 86
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	88 23       	and	r24, r24
 a02:	dc f7       	brge	.-10     	; 0x9fa <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
 a04:	e1 e2       	ldi	r30, 0x21	; 33
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	88 2f       	mov	r24, r24
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	88 7f       	andi	r24, 0xF8	; 248
 a10:	90 70       	andi	r25, 0x00	; 0
 a12:	80 35       	cpi	r24, 0x50	; 80
 a14:	91 05       	cpc	r25, r1
 a16:	19 f0       	breq	.+6      	; 0xa1e <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
 a18:	86 e0       	ldi	r24, 0x06	; 6
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
 a1e:	e3 e2       	ldi	r30, 0x23	; 35
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	ea 81       	ldd	r30, Y+2	; 0x02
 a26:	fb 81       	ldd	r31, Y+3	; 0x03
 a28:	80 83       	st	Z, r24
	}

	return Local_Error;
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
 a2c:	0f 90       	pop	r0
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	cf 91       	pop	r28
 a34:	df 91       	pop	r29
 a36:	08 95       	ret

00000a38 <TWI_SlaveWriteDataByte>:

TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
 a38:	df 93       	push	r29
 a3a:	cf 93       	push	r28
 a3c:	00 d0       	rcall	.+0      	; 0xa3e <TWI_SlaveWriteDataByte+0x6>
 a3e:	cd b7       	in	r28, 0x3d	; 61
 a40:	de b7       	in	r29, 0x3e	; 62
 a42:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
 a44:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
 a46:	e3 e2       	ldi	r30, 0x23	; 35
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 a4e:	a6 e5       	ldi	r26, 0x56	; 86
 a50:	b0 e0       	ldi	r27, 0x00	; 0
 a52:	e6 e5       	ldi	r30, 0x56	; 86
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	80 81       	ld	r24, Z
 a58:	80 68       	ori	r24, 0x80	; 128
 a5a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 a5c:	e6 e5       	ldi	r30, 0x56	; 86
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	88 23       	and	r24, r24
 a64:	dc f7       	brge	.-10     	; 0xa5c <TWI_SlaveWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
 a66:	e1 e2       	ldi	r30, 0x21	; 33
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	80 81       	ld	r24, Z
 a6c:	88 2f       	mov	r24, r24
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	88 7f       	andi	r24, 0xF8	; 248
 a72:	90 70       	andi	r25, 0x00	; 0
 a74:	88 3b       	cpi	r24, 0xB8	; 184
 a76:	91 05       	cpc	r25, r1
 a78:	11 f0       	breq	.+4      	; 0xa7e <TWI_SlaveWriteDataByte+0x46>
	{
		Local_Error = SlaveWriteByteErr;
 a7a:	87 e0       	ldi	r24, 0x07	; 7
 a7c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
 a7e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a80:	0f 90       	pop	r0
 a82:	0f 90       	pop	r0
 a84:	cf 91       	pop	r28
 a86:	df 91       	pop	r29
 a88:	08 95       	ret

00000a8a <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
 a8a:	df 93       	push	r29
 a8c:	cf 93       	push	r28
 a8e:	00 d0       	rcall	.+0      	; 0xa90 <TWI_SlaveReadDataByte+0x6>
 a90:	0f 92       	push	r0
 a92:	cd b7       	in	r28, 0x3d	; 61
 a94:	de b7       	in	r29, 0x3e	; 62
 a96:	9b 83       	std	Y+3, r25	; 0x03
 a98:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
 a9a:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
 a9c:	a6 e5       	ldi	r26, 0x56	; 86
 a9e:	b0 e0       	ldi	r27, 0x00	; 0
 aa0:	e6 e5       	ldi	r30, 0x56	; 86
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	80 81       	ld	r24, Z
 aa6:	80 68       	ori	r24, 0x80	; 128
 aa8:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 aaa:	e6 e5       	ldi	r30, 0x56	; 86
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	80 81       	ld	r24, Z
 ab0:	88 23       	and	r24, r24
 ab2:	dc f7       	brge	.-10     	; 0xaaa <TWI_SlaveReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
 ab4:	e1 e2       	ldi	r30, 0x21	; 33
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	80 81       	ld	r24, Z
 aba:	88 2f       	mov	r24, r24
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	88 7f       	andi	r24, 0xF8	; 248
 ac0:	90 70       	andi	r25, 0x00	; 0
 ac2:	80 36       	cpi	r24, 0x60	; 96
 ac4:	91 05       	cpc	r25, r1
 ac6:	11 f0       	breq	.+4      	; 0xacc <TWI_SlaveReadDataByte+0x42>
	{
		Local_Error = SlaveReadByteErr;
 ac8:	88 e0       	ldi	r24, 0x08	; 8
 aca:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(TWCR,TWCR_TWINT);
 acc:	a6 e5       	ldi	r26, 0x56	; 86
 ace:	b0 e0       	ldi	r27, 0x00	; 0
 ad0:	e6 e5       	ldi	r30, 0x56	; 86
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	80 81       	ld	r24, Z
 ad6:	80 68       	ori	r24, 0x80	; 128
 ad8:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 ada:	e6 e5       	ldi	r30, 0x56	; 86
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z
 ae0:	88 23       	and	r24, r24
 ae2:	dc f7       	brge	.-10     	; 0xada <TWI_SlaveReadDataByte+0x50>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
 ae4:	e1 e2       	ldi	r30, 0x21	; 33
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	80 81       	ld	r24, Z
 aea:	88 2f       	mov	r24, r24
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	88 7f       	andi	r24, 0xF8	; 248
 af0:	90 70       	andi	r25, 0x00	; 0
 af2:	80 38       	cpi	r24, 0x80	; 128
 af4:	91 05       	cpc	r25, r1
 af6:	19 f0       	breq	.+6      	; 0xafe <TWI_SlaveReadDataByte+0x74>
	{
		Local_Error = SlaveReadByteErr;
 af8:	88 e0       	ldi	r24, 0x08	; 8
 afa:	89 83       	std	Y+1, r24	; 0x01
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <TWI_SlaveReadDataByte+0x80>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
 afe:	e3 e2       	ldi	r30, 0x23	; 35
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	ea 81       	ldd	r30, Y+2	; 0x02
 b06:	fb 81       	ldd	r31, Y+3	; 0x03
 b08:	80 83       	st	Z, r24
	}

	return Local_Error;
 b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
 b0c:	0f 90       	pop	r0
 b0e:	0f 90       	pop	r0
 b10:	0f 90       	pop	r0
 b12:	cf 91       	pop	r28
 b14:	df 91       	pop	r29
 b16:	08 95       	ret

00000b18 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
 b18:	df 93       	push	r29
 b1a:	cf 93       	push	r28
 b1c:	cd b7       	in	r28, 0x3d	; 61
 b1e:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
 b20:	a6 e5       	ldi	r26, 0x56	; 86
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	e6 e5       	ldi	r30, 0x56	; 86
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	80 61       	ori	r24, 0x10	; 16
 b2c:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
 b2e:	a6 e5       	ldi	r26, 0x56	; 86
 b30:	b0 e0       	ldi	r27, 0x00	; 0
 b32:	e6 e5       	ldi	r30, 0x56	; 86
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	80 81       	ld	r24, Z
 b38:	80 68       	ori	r24, 0x80	; 128
 b3a:	8c 93       	st	X, r24

}
 b3c:	cf 91       	pop	r28
 b3e:	df 91       	pop	r29
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
